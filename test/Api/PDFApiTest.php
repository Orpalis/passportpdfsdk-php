<?php
/**
 * PDFApiTest
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PassportPDF API
 *
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * PDFApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PDFApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for annotate
     *
     * Annotates a previously uploaded document..
     *
     */
    public function testAnnotate()
    {
    }

    /**
     * Test case for autoDeskew
     *
     * Performs auto deskew on a page range of a previously uploaded document..
     *
     */
    public function testAutoDeskew()
    {
    }

    /**
     * Test case for clearPage
     *
     * Clears a page range from a previously uploaded document..
     *
     */
    public function testClearPage()
    {
    }

    /**
     * Test case for clonePage
     *
     * Clones specific pages from a previously uploaded document to another previously uploaded document..
     *
     */
    public function testClonePage()
    {
    }

    /**
     * Test case for closePDF
     *
     * Closes a previously uploaded document..
     *
     */
    public function testClosePDF()
    {
    }

    /**
     * Test case for convertToPDFA
     *
     * Converts a previously uploaded document to PDF/A..
     *
     */
    public function testConvertToPDFA()
    {
    }

    /**
     * Test case for deletePage
     *
     * Deletes a page range from a previously uploaded document..
     *
     */
    public function testDeletePage()
    {
    }

    /**
     * Test case for detectPageOrientation
     *
     * Detects the orientation of the page(s) of a previously uploaded document and offers to automatically rotate them..
     *
     */
    public function testDetectPageOrientation()
    {
    }

    /**
     * Test case for digiSign
     *
     * Signs a previously uploaded document digitally..
     *
     */
    public function testDigiSign()
    {
    }

    /**
     * Test case for drawImage
     *
     * Draws an image on a page range of a previously uploaded document..
     *
     */
    public function testDrawImage()
    {
    }

    /**
     * Test case for extractPage
     *
     * Extracts a page range from a previously uploaded document into one or several new documents..
     *
     */
    public function testExtractPage()
    {
    }

    /**
     * Test case for extractText
     *
     * Extracts text from the document pages..
     *
     */
    public function testExtractText()
    {
    }

    /**
     * Test case for flatten
     *
     * Flattens the form-fields, annotations, and/or the layers of a previously uploaded document..
     *
     */
    public function testFlatten()
    {
    }

    /**
     * Test case for getInfo
     *
     * Gets information about a previously uploaded document..
     *
     */
    public function testGetInfo()
    {
    }

    /**
     * Test case for getPDFImportSupportedFileExtensions
     *
     * Gets the supported file extensions by the LoadDocumentAsPDF action..
     *
     */
    public function testGetPDFImportSupportedFileExtensions()
    {
    }

    /**
     * Test case for getPageThumbnail
     *
     * Gets a thumbnail of each page within the provided page range from a previously uploaded document..
     *
     */
    public function testGetPageThumbnail()
    {
    }

    /**
     * Test case for insertImage
     *
     * Inserts an image on a new page of a previously uploaded document..
     *
     */
    public function testInsertImage()
    {
    }

    /**
     * Test case for insertNewPage
     *
     * Inserts one or more new blank pages to a specific position in a previously uploaded document..
     *
     */
    public function testInsertNewPage()
    {
    }

    /**
     * Test case for insertPageNumber
     *
     * Inserts page number(s) on a document..
     *
     */
    public function testInsertPageNumber()
    {
    }

    /**
     * Test case for insertText
     *
     * Inserts text on a document..
     *
     */
    public function testInsertText()
    {
    }

    /**
     * Test case for linearize
     *
     * Linearizes a previously uploaded document..
     *
     */
    public function testLinearize()
    {
    }

    /**
     * Test case for loadDocumentAsPDF
     *
     * Imports the provided document as PDF.  Supported document formats can be retrieved by the GetPDFImportSupportedFileExtensions action..
     *
     */
    public function testLoadDocumentAsPDF()
    {
    }

    /**
     * Test case for loadDocumentAsPDFMultipart
     *
     * Imports the provided document as PDF using Multipart Upload.  Supported document formats can be retrieved by the GetPDFImportSupportedFileExtensions action..
     *
     */
    public function testLoadDocumentAsPDFMultipart()
    {
    }

    /**
     * Test case for merge
     *
     * Merges several previously uploaded documents into a new PDF..
     *
     */
    public function testMerge()
    {
    }

    /**
     * Test case for mergePages
     *
     * Merges multiple pages, vertically, within a previously uploaded document into one single page..
     *
     */
    public function testMergePages()
    {
    }

    /**
     * Test case for movePage
     *
     * Moves a page range from a previously uploaded document..
     *
     */
    public function testMovePage()
    {
    }

    /**
     * Test case for oCR
     *
     * Performs optical character recognition on a page range of a previously uploaded document.  The recognized text is added as invisible text on each processed page.  No token is charged for blank pages..
     *
     */
    public function testOCR()
    {
    }

    /**
     * Test case for protect
     *
     * Protects a previously uploaded document..
     *
     */
    public function testProtect()
    {
    }

    /**
     * Test case for readBarcodes
     *
     * Reads barcodes from a previously uploaded document..
     *
     */
    public function testReadBarcodes()
    {
    }

    /**
     * Test case for reduce
     *
     * Reduces the size of a previously uploaded document..
     *
     */
    public function testReduce()
    {
    }

    /**
     * Test case for removePageFormFields
     *
     * Removes the form fields from a page range of a previously uploaded document..
     *
     */
    public function testRemovePageFormFields()
    {
    }

    /**
     * Test case for removeText
     *
     * Removes text (all text or only invisible one) from a previously uploaded PDF..
     *
     */
    public function testRemoveText()
    {
    }

    /**
     * Test case for reorderPages
     *
     * Reorders pages of a previously uploaded document..
     *
     */
    public function testReorderPages()
    {
    }

    /**
     * Test case for repairDocument
     *
     * Repairs a previously uploaded PDF document..
     *
     */
    public function testRepairDocument()
    {
    }

    /**
     * Test case for rotatePageStandard
     *
     * Rotates (standardly) a page range from a previously uploaded document..
     *
     */
    public function testRotatePageStandard()
    {
    }

    /**
     * Test case for saveAsJPEG
     *
     * Saves a previously uploaded document as JPEG, and sends the file data in a JSON-serialized object..
     *
     */
    public function testSaveAsJPEG()
    {
    }

    /**
     * Test case for saveAsJPEGFile
     *
     * Saves a previously uploaded document as JPEG, and streams the file binary data to the response (this is the most efficient download method)..
     *
     */
    public function testSaveAsJPEGFile()
    {
    }

    /**
     * Test case for saveAsPNG
     *
     * Saves a previously uploaded document as PNG, and sends the file data in a JSON-serialized object..
     *
     */
    public function testSaveAsPNG()
    {
    }

    /**
     * Test case for saveAsPNGFile
     *
     * Saves a previously uploaded document as PNG, and streams the file binary data to the response (this is the most efficient download method)..
     *
     */
    public function testSaveAsPNGFile()
    {
    }

    /**
     * Test case for saveAsTIFF
     *
     * Saves a previously uploaded document as TIFF, and sends the file data in a JSON-serialized object..
     *
     */
    public function testSaveAsTIFF()
    {
    }

    /**
     * Test case for saveAsTIFFFile
     *
     * Saves a previously uploaded document as TIFF, and streams the file binary data to the response (this is the most efficient download method)..
     *
     */
    public function testSaveAsTIFFFile()
    {
    }

    /**
     * Test case for saveAsTIFFMultipage
     *
     * Saves a previously uploaded document as multipage TIFF, and sends the file data in a JSON-serialized object..
     *
     */
    public function testSaveAsTIFFMultipage()
    {
    }

    /**
     * Test case for saveAsTIFFMultipageFile
     *
     * Saves a previously uploaded document as multipage TIFF, and streams the file binary data to the response (this is the most efficient download method)..
     *
     */
    public function testSaveAsTIFFMultipageFile()
    {
    }

    /**
     * Test case for saveDocument
     *
     * Saves a previously uploaded document as PDF, and sends the file data in a JSON-serialized object..
     *
     */
    public function testSaveDocument()
    {
    }

    /**
     * Test case for saveDocumentToFile
     *
     * Saves a previously uploaded document as PDF, and streams the file binary data to the response (this is the most efficient download method)..
     *
     */
    public function testSaveDocumentToFile()
    {
    }

    /**
     * Test case for scalePage
     *
     * Scales a page range from a previously uploaded document..
     *
     */
    public function testScalePage()
    {
    }

    /**
     * Test case for setInfo
     *
     * Sets information to a previously uploaded document..
     *
     */
    public function testSetInfo()
    {
    }

    /**
     * Test case for setInitialView
     *
     * Sets various document level initial view options to a previously uploaded document..
     *
     */
    public function testSetInitialView()
    {
    }

    /**
     * Test case for setPageBox
     *
     * Sets pagebox to a page range from previously uploaded document..
     *
     */
    public function testSetPageBox()
    {
    }

    /**
     * Test case for setPassword
     *
     * Unprotects a previously uploaded document..
     *
     */
    public function testSetPassword()
    {
    }

    /**
     * Test case for split
     *
     * Splits a previously uploaded document into new ones..
     *
     */
    public function testSplit()
    {
    }

    /**
     * Test case for swapPages
     *
     * Swaps two pages from a previously uploaded document..
     *
     */
    public function testSwapPages()
    {
    }

    /**
     * Test case for unprotect
     *
     * Unprotects a previously uploaded document..
     *
     */
    public function testUnprotect()
    {
    }
}
