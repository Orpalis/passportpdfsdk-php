<?php
/**
 * ImageApiTest
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PassportPDF API
 *
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * ImageApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ImageApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass()
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp()
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown()
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass()
    {
    }

    /**
     * Test case for imageAdjust
     *
     * Adjusts a previously uploaded image..
     *
     */
    public function testImageAdjust()
    {
    }

    /**
     * Test case for imageAutoCrop
     *
     * Automatically crops a previously uploaded image..
     *
     */
    public function testImageAutoCrop()
    {
    }

    /**
     * Test case for imageCleanupDocument
     *
     * Cleanup a previously uploaded image..
     *
     */
    public function testImageCleanupDocument()
    {
    }

    /**
     * Test case for imageCloneRegions
     *
     * Clones regions from a previously uploaded image into new images..
     *
     */
    public function testImageCloneRegions()
    {
    }

    /**
     * Test case for imageClose
     *
     * Closes a previously uploaded image..
     *
     */
    public function testImageClose()
    {
    }

    /**
     * Test case for imageConvertColorDepth
     *
     * Converts the color depth of a previously uploaded image..
     *
     */
    public function testImageConvertColorDepth()
    {
    }

    /**
     * Test case for imageCrop
     *
     * Crops a previously uploaded image..
     *
     */
    public function testImageCrop()
    {
    }

    /**
     * Test case for imageDeletePage
     *
     * Deletes a page range from a previously uploaded image..
     *
     */
    public function testImageDeletePage()
    {
    }

    /**
     * Test case for imageDetectBlankPages
     *
     * Detects the blank page(s) from a previously uploaded image and offers to remove them..
     *
     */
    public function testImageDetectBlankPages()
    {
    }

    /**
     * Test case for imageDetectColor
     *
     * Performs color detection  on a previously uploaded image..
     *
     */
    public function testImageDetectColor()
    {
    }

    /**
     * Test case for imageDetectPageOrientation
     *
     * Detects the orientation of the page(s) of a previously uploaded image and offers to automatically rotate them..
     *
     */
    public function testImageDetectPageOrientation()
    {
    }

    /**
     * Test case for imageFilter
     *
     * Applies filters to a previously uploaded image..
     *
     */
    public function testImageFilter()
    {
    }

    /**
     * Test case for imageGetPageThumbnail
     *
     * Gets a thumbnail of each page within the provided page range from a previously uploaded image..
     *
     */
    public function testImageGetPageThumbnail()
    {
    }

    /**
     * Test case for imageGetSupportedFileExtensions
     *
     * Gets the supported file extensions by the image loading actions..
     *
     */
    public function testImageGetSupportedFileExtensions()
    {
    }

    /**
     * Test case for imageLoad
     *
     * Loads the provided image file.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action..
     *
     */
    public function testImageLoad()
    {
    }

    /**
     * Test case for imageLoadMultipart
     *
     * Loads the provided image file using Multipart Upload.  Supported image formats can be retrieved by the GetSupportedImageFileExtensions action..
     *
     */
    public function testImageLoadMultipart()
    {
    }

    /**
     * Test case for imageMICR
     *
     * Performs MICR (Magnetic Ink Character Recognition) on a previously uploaded image..
     *
     */
    public function testImageMICR()
    {
    }

    /**
     * Test case for imageReadBarcodes
     *
     * Reads barcodes from a previously uploaded image..
     *
     */
    public function testImageReadBarcodes()
    {
    }

    /**
     * Test case for imageResize
     *
     * Resizes a previously uploaded image..
     *
     */
    public function testImageResize()
    {
    }

    /**
     * Test case for imageRotate
     *
     * Rotates and/or flips a previously uploaded image..
     *
     */
    public function testImageRotate()
    {
    }

    /**
     * Test case for imageSaveAsJPEG
     *
     * Saves a previously uploaded image as JPEG, and sends the file data in a JSON-serialized object..
     *
     */
    public function testImageSaveAsJPEG()
    {
    }

    /**
     * Test case for imageSaveAsJPEGFile
     *
     * Saves a previously uploaded image as JPEG, and streams the file binary data to the response (this is the most efficient download method)..
     *
     */
    public function testImageSaveAsJPEGFile()
    {
    }

    /**
     * Test case for imageSaveAsPDF
     *
     * Saves a previously uploaded image as PDF, and sends the file data in a JSON-serialized object..
     *
     */
    public function testImageSaveAsPDF()
    {
    }

    /**
     * Test case for imageSaveAsPDFFile
     *
     * Saves a previously uploaded image as PDF, and streams the file binary data to the response (this is the most efficient download method)..
     *
     */
    public function testImageSaveAsPDFFile()
    {
    }

    /**
     * Test case for imageSaveAsPDFMRC
     *
     * Saves a previously uploaded image as PDF using MRC compression, and sends the file data in a JSON-serialized object..
     *
     */
    public function testImageSaveAsPDFMRC()
    {
    }

    /**
     * Test case for imageSaveAsPDFMRCFile
     *
     * Saves a previously uploaded image as PDF using MRC compression, and streams the file binary data to the response (this is the most efficient download method)..
     *
     */
    public function testImageSaveAsPDFMRCFile()
    {
    }

    /**
     * Test case for imageSaveAsPNG
     *
     * Saves a previously uploaded image as PNG, and sends the file data in a JSON-serialized object..
     *
     */
    public function testImageSaveAsPNG()
    {
    }

    /**
     * Test case for imageSaveAsPNGFile
     *
     * Saves a previously uploaded image as PNG, and streams the file binary data to the response (this is the most efficient download method)..
     *
     */
    public function testImageSaveAsPNGFile()
    {
    }

    /**
     * Test case for imageSaveAsTIFF
     *
     * Saves a previously uploaded image as TIFF, and sends the file data in a JSON-serialized object..
     *
     */
    public function testImageSaveAsTIFF()
    {
    }

    /**
     * Test case for imageSaveAsTIFFFile
     *
     * Saves a previously uploaded image as TIFF, and streams the file binary data to the response (this is the most efficient download method)..
     *
     */
    public function testImageSaveAsTIFFFile()
    {
    }

    /**
     * Test case for imageSaveAsTIFFMultipage
     *
     * Saves a previously uploaded image as multipage TIFF, and sends the file data in a JSON-serialized object..
     *
     */
    public function testImageSaveAsTIFFMultipage()
    {
    }

    /**
     * Test case for imageSaveAsTIFFMultipageFile
     *
     * Saves a previously uploaded image as multipage TIFF, and streams the file binary data to the response (this is the most efficient download method)..
     *
     */
    public function testImageSaveAsTIFFMultipageFile()
    {
    }

    /**
     * Test case for imageSwapPages
     *
     * Swaps two pages from a previously uploaded image..
     *
     */
    public function testImageSwapPages()
    {
    }
}
