<?php
/**
 * MICRSymbolInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PassportPDF API
 *
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * MICRSymbolInfo Class Doc Comment
 *
 * @category Class
 * @description Holds detailed information about a magnetic ink symbol detected by a MICR process.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class MICRSymbolInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MICRSymbolInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'symbol_value' => 'string',
        'symbol_value2' => 'string',
        'top' => 'int',
        'left' => 'int',
        'bottom' => 'int',
        'right' => 'int',
        'line' => 'int',
        'confidence' => 'float',
        'confidence2' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'symbol_value' => null,
        'symbol_value2' => null,
        'top' => 'int32',
        'left' => 'int32',
        'bottom' => 'int32',
        'right' => 'int32',
        'line' => 'int32',
        'confidence' => 'float',
        'confidence2' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'symbol_value' => 'SymbolValue',
        'symbol_value2' => 'SymbolValue2',
        'top' => 'Top',
        'left' => 'Left',
        'bottom' => 'Bottom',
        'right' => 'Right',
        'line' => 'Line',
        'confidence' => 'Confidence',
        'confidence2' => 'Confidence2'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'symbol_value' => 'setSymbolValue',
        'symbol_value2' => 'setSymbolValue2',
        'top' => 'setTop',
        'left' => 'setLeft',
        'bottom' => 'setBottom',
        'right' => 'setRight',
        'line' => 'setLine',
        'confidence' => 'setConfidence',
        'confidence2' => 'setConfidence2'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'symbol_value' => 'getSymbolValue',
        'symbol_value2' => 'getSymbolValue2',
        'top' => 'getTop',
        'left' => 'getLeft',
        'bottom' => 'getBottom',
        'right' => 'getRight',
        'line' => 'getLine',
        'confidence' => 'getConfidence',
        'confidence2' => 'getConfidence2'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['symbol_value'] = isset($data['symbol_value']) ? $data['symbol_value'] : null;
        $this->container['symbol_value2'] = isset($data['symbol_value2']) ? $data['symbol_value2'] : null;
        $this->container['top'] = isset($data['top']) ? $data['top'] : null;
        $this->container['left'] = isset($data['left']) ? $data['left'] : null;
        $this->container['bottom'] = isset($data['bottom']) ? $data['bottom'] : null;
        $this->container['right'] = isset($data['right']) ? $data['right'] : null;
        $this->container['line'] = isset($data['line']) ? $data['line'] : null;
        $this->container['confidence'] = isset($data['confidence']) ? $data['confidence'] : null;
        $this->container['confidence2'] = isset($data['confidence2']) ? $data['confidence2'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets symbol_value
     *
     * @return string|null
     */
    public function getSymbolValue()
    {
        return $this->container['symbol_value'];
    }

    /**
     * Sets symbol_value
     *
     * @param string|null $symbol_value Specifies the best candidate for the character representation of the detected symbol.
     *
     * @return $this
     */
    public function setSymbolValue($symbol_value)
    {
        $this->container['symbol_value'] = $symbol_value;

        return $this;
    }

    /**
     * Gets symbol_value2
     *
     * @return string|null
     */
    public function getSymbolValue2()
    {
        return $this->container['symbol_value2'];
    }

    /**
     * Sets symbol_value2
     *
     * @param string|null $symbol_value2 Specifies the second best candidate for the character representation of the detected symbol.
     *
     * @return $this
     */
    public function setSymbolValue2($symbol_value2)
    {
        $this->container['symbol_value2'] = $symbol_value2;

        return $this;
    }

    /**
     * Gets top
     *
     * @return int|null
     */
    public function getTop()
    {
        return $this->container['top'];
    }

    /**
     * Sets top
     *
     * @param int|null $top Specifies the top coordinate of the symbol, in pixels.
     *
     * @return $this
     */
    public function setTop($top)
    {
        $this->container['top'] = $top;

        return $this;
    }

    /**
     * Gets left
     *
     * @return int|null
     */
    public function getLeft()
    {
        return $this->container['left'];
    }

    /**
     * Sets left
     *
     * @param int|null $left Specifies the left coordinate of the symbol, in pixels.
     *
     * @return $this
     */
    public function setLeft($left)
    {
        $this->container['left'] = $left;

        return $this;
    }

    /**
     * Gets bottom
     *
     * @return int|null
     */
    public function getBottom()
    {
        return $this->container['bottom'];
    }

    /**
     * Sets bottom
     *
     * @param int|null $bottom Specifies the bottom coordinate of the symbol, in pixels.
     *
     * @return $this
     */
    public function setBottom($bottom)
    {
        $this->container['bottom'] = $bottom;

        return $this;
    }

    /**
     * Gets right
     *
     * @return int|null
     */
    public function getRight()
    {
        return $this->container['right'];
    }

    /**
     * Sets right
     *
     * @param int|null $right Specifies the right coordinate of the symbol, in pixels.
     *
     * @return $this
     */
    public function setRight($right)
    {
        $this->container['right'] = $right;

        return $this;
    }

    /**
     * Gets line
     *
     * @return int|null
     */
    public function getLine()
    {
        return $this->container['line'];
    }

    /**
     * Sets line
     *
     * @param int|null $line Specifies the number of the line on which the symbol has been detected.
     *
     * @return $this
     */
    public function setLine($line)
    {
        $this->container['line'] = $line;

        return $this;
    }

    /**
     * Gets confidence
     *
     * @return float|null
     */
    public function getConfidence()
    {
        return $this->container['confidence'];
    }

    /**
     * Sets confidence
     *
     * @param float|null $confidence Specifies the level of confidence of the best detected symbol candidate.
     *
     * @return $this
     */
    public function setConfidence($confidence)
    {
        $this->container['confidence'] = $confidence;

        return $this;
    }

    /**
     * Gets confidence2
     *
     * @return float|null
     */
    public function getConfidence2()
    {
        return $this->container['confidence2'];
    }

    /**
     * Sets confidence2
     *
     * @param float|null $confidence2 Specifies the level of confidence of the second best detected symbol candidate.
     *
     * @return $this
     */
    public function setConfidence2($confidence2)
    {
        $this->container['confidence2'] = $confidence2;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


