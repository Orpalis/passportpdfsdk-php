<?php
/**
 * PdfFlattenParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PassportPDF API
 *
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PdfFlattenParameters Class Doc Comment
 *
 * @category Class
 * @description Represents the parameters for a flatten action.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PdfFlattenParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PdfFlattenParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'file_id' => 'string',
        'flatten_annotations' => 'bool',
        'flatten_form_fields' => 'bool',
        'flatten_layers' => 'bool',
        'page_range' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'file_id' => null,
        'flatten_annotations' => null,
        'flatten_form_fields' => null,
        'flatten_layers' => null,
        'page_range' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file_id' => 'FileId',
        'flatten_annotations' => 'FlattenAnnotations',
        'flatten_form_fields' => 'FlattenFormFields',
        'flatten_layers' => 'FlattenLayers',
        'page_range' => 'PageRange'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file_id' => 'setFileId',
        'flatten_annotations' => 'setFlattenAnnotations',
        'flatten_form_fields' => 'setFlattenFormFields',
        'flatten_layers' => 'setFlattenLayers',
        'page_range' => 'setPageRange'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file_id' => 'getFileId',
        'flatten_annotations' => 'getFlattenAnnotations',
        'flatten_form_fields' => 'getFlattenFormFields',
        'flatten_layers' => 'getFlattenLayers',
        'page_range' => 'getPageRange'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file_id'] = isset($data['file_id']) ? $data['file_id'] : null;
        $this->container['flatten_annotations'] = isset($data['flatten_annotations']) ? $data['flatten_annotations'] : false;
        $this->container['flatten_form_fields'] = isset($data['flatten_form_fields']) ? $data['flatten_form_fields'] : false;
        $this->container['flatten_layers'] = isset($data['flatten_layers']) ? $data['flatten_layers'] : false;
        $this->container['page_range'] = isset($data['page_range']) ? $data['page_range'] : '*';
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['file_id'] === null) {
            $invalidProperties[] = "'file_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets file_id
     *
     * @return string
     */
    public function getFileId()
    {
        return $this->container['file_id'];
    }

    /**
     * Sets file_id
     *
     * @param string $file_id The identifier of the previously uploaded file to be processed.
     *
     * @return $this
     */
    public function setFileId($file_id)
    {
        $this->container['file_id'] = $file_id;

        return $this;
    }

    /**
     * Gets flatten_annotations
     *
     * @return bool|null
     */
    public function getFlattenAnnotations()
    {
        return $this->container['flatten_annotations'];
    }

    /**
     * Sets flatten_annotations
     *
     * @param bool|null $flatten_annotations Specifies whether the annotations shall be flattened.
     *
     * @return $this
     */
    public function setFlattenAnnotations($flatten_annotations)
    {
        $this->container['flatten_annotations'] = $flatten_annotations;

        return $this;
    }

    /**
     * Gets flatten_form_fields
     *
     * @return bool|null
     */
    public function getFlattenFormFields()
    {
        return $this->container['flatten_form_fields'];
    }

    /**
     * Sets flatten_form_fields
     *
     * @param bool|null $flatten_form_fields Specifies whether the form-fields shall be flattened.
     *
     * @return $this
     */
    public function setFlattenFormFields($flatten_form_fields)
    {
        $this->container['flatten_form_fields'] = $flatten_form_fields;

        return $this;
    }

    /**
     * Gets flatten_layers
     *
     * @return bool|null
     */
    public function getFlattenLayers()
    {
        return $this->container['flatten_layers'];
    }

    /**
     * Sets flatten_layers
     *
     * @param bool|null $flatten_layers Specifies whether the layers shall be flattened.
     *
     * @return $this
     */
    public function setFlattenLayers($flatten_layers)
    {
        $this->container['flatten_layers'] = $flatten_layers;

        return $this;
    }

    /**
     * Gets page_range
     *
     * @return string|null
     */
    public function getPageRange()
    {
        return $this->container['page_range'];
    }

    /**
     * Sets page_range
     *
     * @param string|null $page_range Specifies the range of page whose form-fields and annotations shall be flattened, if any.
     *
     * @return $this
     */
    public function setPageRange($page_range)
    {
        $this->container['page_range'] = $page_range;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


