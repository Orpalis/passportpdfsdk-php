<?php
/**
 * LoadImageFromByteArrayParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PassportPDF API
 *
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * LoadImageFromByteArrayParameters Class Doc Comment
 *
 * @category Class
 * @description Represents the parameters for an image loading request.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LoadImageFromByteArrayParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'LoadImageFromByteArrayParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'content' => 'string',
        'file_name' => 'string',
        'content_encoding' => '\OpenAPI\Client\Model\ContentEncoding',
        'get_preview' => 'bool',
        'thumbnail_width' => 'int',
        'thumbnail_height' => 'int',
        'thumbnail_background_color' => 'string',
        'thumbnail_fit_to_page_size' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'content' => 'byte',
        'file_name' => null,
        'content_encoding' => null,
        'get_preview' => null,
        'thumbnail_width' => 'int32',
        'thumbnail_height' => 'int32',
        'thumbnail_background_color' => null,
        'thumbnail_fit_to_page_size' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'content' => 'Content',
        'file_name' => 'FileName',
        'content_encoding' => 'ContentEncoding',
        'get_preview' => 'GetPreview',
        'thumbnail_width' => 'ThumbnailWidth',
        'thumbnail_height' => 'ThumbnailHeight',
        'thumbnail_background_color' => 'ThumbnailBackgroundColor',
        'thumbnail_fit_to_page_size' => 'ThumbnailFitToPageSize'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'content' => 'setContent',
        'file_name' => 'setFileName',
        'content_encoding' => 'setContentEncoding',
        'get_preview' => 'setGetPreview',
        'thumbnail_width' => 'setThumbnailWidth',
        'thumbnail_height' => 'setThumbnailHeight',
        'thumbnail_background_color' => 'setThumbnailBackgroundColor',
        'thumbnail_fit_to_page_size' => 'setThumbnailFitToPageSize'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'content' => 'getContent',
        'file_name' => 'getFileName',
        'content_encoding' => 'getContentEncoding',
        'get_preview' => 'getGetPreview',
        'thumbnail_width' => 'getThumbnailWidth',
        'thumbnail_height' => 'getThumbnailHeight',
        'thumbnail_background_color' => 'getThumbnailBackgroundColor',
        'thumbnail_fit_to_page_size' => 'getThumbnailFitToPageSize'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['content_encoding'] = isset($data['content_encoding']) ? $data['content_encoding'] : null;
        $this->container['get_preview'] = isset($data['get_preview']) ? $data['get_preview'] : false;
        $this->container['thumbnail_width'] = isset($data['thumbnail_width']) ? $data['thumbnail_width'] : 140;
        $this->container['thumbnail_height'] = isset($data['thumbnail_height']) ? $data['thumbnail_height'] : 220;
        $this->container['thumbnail_background_color'] = isset($data['thumbnail_background_color']) ? $data['thumbnail_background_color'] : 'rgba(0,0,0,0)';
        $this->container['thumbnail_fit_to_page_size'] = isset($data['thumbnail_fit_to_page_size']) ? $data['thumbnail_fit_to_page_size'] : true;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['content'] === null) {
            $invalidProperties[] = "'content' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content Specifies the data of the image.
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name Specifies the name of the document.
     *
     * @return $this
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets content_encoding
     *
     * @return \OpenAPI\Client\Model\ContentEncoding|null
     */
    public function getContentEncoding()
    {
        return $this->container['content_encoding'];
    }

    /**
     * Sets content_encoding
     *
     * @param \OpenAPI\Client\Model\ContentEncoding|null $content_encoding content_encoding
     *
     * @return $this
     */
    public function setContentEncoding($content_encoding)
    {
        $this->container['content_encoding'] = $content_encoding;

        return $this;
    }

    /**
     * Gets get_preview
     *
     * @return bool|null
     */
    public function getGetPreview()
    {
        return $this->container['get_preview'];
    }

    /**
     * Sets get_preview
     *
     * @param bool|null $get_preview Specifies whether the response must contain a thumbnail of the first page of the document.
     *
     * @return $this
     */
    public function setGetPreview($get_preview)
    {
        $this->container['get_preview'] = $get_preview;

        return $this;
    }

    /**
     * Gets thumbnail_width
     *
     * @return int|null
     */
    public function getThumbnailWidth()
    {
        return $this->container['thumbnail_width'];
    }

    /**
     * Sets thumbnail_width
     *
     * @param int|null $thumbnail_width Specifies, in pixels, the width of the thumbnail to be retrieved. Only applicable if GetPreview has been set to true.
     *
     * @return $this
     */
    public function setThumbnailWidth($thumbnail_width)
    {
        $this->container['thumbnail_width'] = $thumbnail_width;

        return $this;
    }

    /**
     * Gets thumbnail_height
     *
     * @return int|null
     */
    public function getThumbnailHeight()
    {
        return $this->container['thumbnail_height'];
    }

    /**
     * Sets thumbnail_height
     *
     * @param int|null $thumbnail_height Specifies, in pixels, the height of the thumbnail to be retrieved.  Only applicable if GetPreview has been set to true.
     *
     * @return $this
     */
    public function setThumbnailHeight($thumbnail_height)
    {
        $this->container['thumbnail_height'] = $thumbnail_height;

        return $this;
    }

    /**
     * Gets thumbnail_background_color
     *
     * @return string|null
     */
    public function getThumbnailBackgroundColor()
    {
        return $this->container['thumbnail_background_color'];
    }

    /**
     * Sets thumbnail_background_color
     *
     * @param string|null $thumbnail_background_color Specifies the background color of the thumbnail, using the color name (ie: \"red\") or its RGBa code (ie: \"rgba(255,0,0,1)\").   Only applicable if GetPreview has been set to true.
     *
     * @return $this
     */
    public function setThumbnailBackgroundColor($thumbnail_background_color)
    {
        $this->container['thumbnail_background_color'] = $thumbnail_background_color;

        return $this;
    }

    /**
     * Gets thumbnail_fit_to_page_size
     *
     * @return bool|null
     */
    public function getThumbnailFitToPageSize()
    {
        return $this->container['thumbnail_fit_to_page_size'];
    }

    /**
     * Sets thumbnail_fit_to_page_size
     *
     * @param bool|null $thumbnail_fit_to_page_size Specifies if the size of the produced thumbnail is automatically adjusted to don't have any margin.  Only applicable if GetPreview has been set to true.
     *
     * @return $this
     */
    public function setThumbnailFitToPageSize($thumbnail_fit_to_page_size)
    {
        $this->container['thumbnail_fit_to_page_size'] = $thumbnail_fit_to_page_size;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


