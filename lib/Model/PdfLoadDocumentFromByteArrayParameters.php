<?php
/**
 * PdfLoadDocumentFromByteArrayParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PassportPDF API
 *
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PdfLoadDocumentFromByteArrayParameters Class Doc Comment
 *
 * @category Class
 * @description Represents the parameters for a load document action request.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PdfLoadDocumentFromByteArrayParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PdfLoadDocumentFromByteArrayParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'content' => 'string',
        'file_name' => 'string',
        'password' => 'string',
        'conformance' => '\OpenAPI\Client\Model\PdfConformance',
        'content_encoding' => '\OpenAPI\Client\Model\ContentEncoding',
        'enable_color_detection' => 'bool',
        'get_preview' => 'bool',
        'thumbnail_width' => 'int',
        'thumbnail_height' => 'int',
        'thumbnail_background_color' => 'string',
        'thumbnail_fit_to_page_size' => 'bool',
        'txt_page_width' => 'float',
        'txt_page_height' => 'float',
        'txt_page_margin_left' => 'float',
        'txt_page_margin_top' => 'float',
        'txt_page_margin_right' => 'float',
        'txt_page_margin_bottom' => 'float',
        'txt_horizontal_text_alignment' => '\OpenAPI\Client\Model\TextAlignment',
        'txt_font_size' => 'float',
        'txt_font_family' => 'string',
        'txt_font_bold' => 'bool',
        'txt_font_italic' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'content' => 'byte',
        'file_name' => null,
        'password' => null,
        'conformance' => null,
        'content_encoding' => null,
        'enable_color_detection' => null,
        'get_preview' => null,
        'thumbnail_width' => 'int32',
        'thumbnail_height' => 'int32',
        'thumbnail_background_color' => null,
        'thumbnail_fit_to_page_size' => null,
        'txt_page_width' => 'float',
        'txt_page_height' => 'float',
        'txt_page_margin_left' => 'float',
        'txt_page_margin_top' => 'float',
        'txt_page_margin_right' => 'float',
        'txt_page_margin_bottom' => 'float',
        'txt_horizontal_text_alignment' => null,
        'txt_font_size' => 'float',
        'txt_font_family' => null,
        'txt_font_bold' => null,
        'txt_font_italic' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'content' => 'Content',
        'file_name' => 'FileName',
        'password' => 'Password',
        'conformance' => 'Conformance',
        'content_encoding' => 'ContentEncoding',
        'enable_color_detection' => 'EnableColorDetection',
        'get_preview' => 'GetPreview',
        'thumbnail_width' => 'ThumbnailWidth',
        'thumbnail_height' => 'ThumbnailHeight',
        'thumbnail_background_color' => 'ThumbnailBackgroundColor',
        'thumbnail_fit_to_page_size' => 'ThumbnailFitToPageSize',
        'txt_page_width' => 'TxtPageWidth',
        'txt_page_height' => 'TxtPageHeight',
        'txt_page_margin_left' => 'TxtPageMarginLeft',
        'txt_page_margin_top' => 'TxtPageMarginTop',
        'txt_page_margin_right' => 'TxtPageMarginRight',
        'txt_page_margin_bottom' => 'TxtPageMarginBottom',
        'txt_horizontal_text_alignment' => 'TxtHorizontalTextAlignment',
        'txt_font_size' => 'TxtFontSize',
        'txt_font_family' => 'TxtFontFamily',
        'txt_font_bold' => 'TxtFontBold',
        'txt_font_italic' => 'TxtFontItalic'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'content' => 'setContent',
        'file_name' => 'setFileName',
        'password' => 'setPassword',
        'conformance' => 'setConformance',
        'content_encoding' => 'setContentEncoding',
        'enable_color_detection' => 'setEnableColorDetection',
        'get_preview' => 'setGetPreview',
        'thumbnail_width' => 'setThumbnailWidth',
        'thumbnail_height' => 'setThumbnailHeight',
        'thumbnail_background_color' => 'setThumbnailBackgroundColor',
        'thumbnail_fit_to_page_size' => 'setThumbnailFitToPageSize',
        'txt_page_width' => 'setTxtPageWidth',
        'txt_page_height' => 'setTxtPageHeight',
        'txt_page_margin_left' => 'setTxtPageMarginLeft',
        'txt_page_margin_top' => 'setTxtPageMarginTop',
        'txt_page_margin_right' => 'setTxtPageMarginRight',
        'txt_page_margin_bottom' => 'setTxtPageMarginBottom',
        'txt_horizontal_text_alignment' => 'setTxtHorizontalTextAlignment',
        'txt_font_size' => 'setTxtFontSize',
        'txt_font_family' => 'setTxtFontFamily',
        'txt_font_bold' => 'setTxtFontBold',
        'txt_font_italic' => 'setTxtFontItalic'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'content' => 'getContent',
        'file_name' => 'getFileName',
        'password' => 'getPassword',
        'conformance' => 'getConformance',
        'content_encoding' => 'getContentEncoding',
        'enable_color_detection' => 'getEnableColorDetection',
        'get_preview' => 'getGetPreview',
        'thumbnail_width' => 'getThumbnailWidth',
        'thumbnail_height' => 'getThumbnailHeight',
        'thumbnail_background_color' => 'getThumbnailBackgroundColor',
        'thumbnail_fit_to_page_size' => 'getThumbnailFitToPageSize',
        'txt_page_width' => 'getTxtPageWidth',
        'txt_page_height' => 'getTxtPageHeight',
        'txt_page_margin_left' => 'getTxtPageMarginLeft',
        'txt_page_margin_top' => 'getTxtPageMarginTop',
        'txt_page_margin_right' => 'getTxtPageMarginRight',
        'txt_page_margin_bottom' => 'getTxtPageMarginBottom',
        'txt_horizontal_text_alignment' => 'getTxtHorizontalTextAlignment',
        'txt_font_size' => 'getTxtFontSize',
        'txt_font_family' => 'getTxtFontFamily',
        'txt_font_bold' => 'getTxtFontBold',
        'txt_font_italic' => 'getTxtFontItalic'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['content'] = isset($data['content']) ? $data['content'] : null;
        $this->container['file_name'] = isset($data['file_name']) ? $data['file_name'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['conformance'] = isset($data['conformance']) ? $data['conformance'] : null;
        $this->container['content_encoding'] = isset($data['content_encoding']) ? $data['content_encoding'] : null;
        $this->container['enable_color_detection'] = isset($data['enable_color_detection']) ? $data['enable_color_detection'] : false;
        $this->container['get_preview'] = isset($data['get_preview']) ? $data['get_preview'] : false;
        $this->container['thumbnail_width'] = isset($data['thumbnail_width']) ? $data['thumbnail_width'] : 140;
        $this->container['thumbnail_height'] = isset($data['thumbnail_height']) ? $data['thumbnail_height'] : 220;
        $this->container['thumbnail_background_color'] = isset($data['thumbnail_background_color']) ? $data['thumbnail_background_color'] : 'rgba(0,0,0,0)';
        $this->container['thumbnail_fit_to_page_size'] = isset($data['thumbnail_fit_to_page_size']) ? $data['thumbnail_fit_to_page_size'] : true;
        $this->container['txt_page_width'] = isset($data['txt_page_width']) ? $data['txt_page_width'] : 595;
        $this->container['txt_page_height'] = isset($data['txt_page_height']) ? $data['txt_page_height'] : 842;
        $this->container['txt_page_margin_left'] = isset($data['txt_page_margin_left']) ? $data['txt_page_margin_left'] : 10;
        $this->container['txt_page_margin_top'] = isset($data['txt_page_margin_top']) ? $data['txt_page_margin_top'] : 10;
        $this->container['txt_page_margin_right'] = isset($data['txt_page_margin_right']) ? $data['txt_page_margin_right'] : 10;
        $this->container['txt_page_margin_bottom'] = isset($data['txt_page_margin_bottom']) ? $data['txt_page_margin_bottom'] : 10;
        $this->container['txt_horizontal_text_alignment'] = isset($data['txt_horizontal_text_alignment']) ? $data['txt_horizontal_text_alignment'] : null;
        $this->container['txt_font_size'] = isset($data['txt_font_size']) ? $data['txt_font_size'] : 12;
        $this->container['txt_font_family'] = isset($data['txt_font_family']) ? $data['txt_font_family'] : 'Arial Unicode MS';
        $this->container['txt_font_bold'] = isset($data['txt_font_bold']) ? $data['txt_font_bold'] : false;
        $this->container['txt_font_italic'] = isset($data['txt_font_italic']) ? $data['txt_font_italic'] : false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['content'] === null) {
            $invalidProperties[] = "'content' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets content
     *
     * @return string
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param string $content Specifies the data of the document.
     *
     * @return $this
     */
    public function setContent($content)
    {
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name Specifies the name of the document.
     *
     * @return $this
     */
    public function setFileName($file_name)
    {
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password Specifies the password of the document.
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets conformance
     *
     * @return \OpenAPI\Client\Model\PdfConformance|null
     */
    public function getConformance()
    {
        return $this->container['conformance'];
    }

    /**
     * Sets conformance
     *
     * @param \OpenAPI\Client\Model\PdfConformance|null $conformance conformance
     *
     * @return $this
     */
    public function setConformance($conformance)
    {
        $this->container['conformance'] = $conformance;

        return $this;
    }

    /**
     * Gets content_encoding
     *
     * @return \OpenAPI\Client\Model\ContentEncoding|null
     */
    public function getContentEncoding()
    {
        return $this->container['content_encoding'];
    }

    /**
     * Sets content_encoding
     *
     * @param \OpenAPI\Client\Model\ContentEncoding|null $content_encoding content_encoding
     *
     * @return $this
     */
    public function setContentEncoding($content_encoding)
    {
        $this->container['content_encoding'] = $content_encoding;

        return $this;
    }

    /**
     * Gets enable_color_detection
     *
     * @return bool|null
     */
    public function getEnableColorDetection()
    {
        return $this->container['enable_color_detection'];
    }

    /**
     * Sets enable_color_detection
     *
     * @param bool|null $enable_color_detection Specifies whether color detection must be used while importing a raster format to PDF.
     *
     * @return $this
     */
    public function setEnableColorDetection($enable_color_detection)
    {
        $this->container['enable_color_detection'] = $enable_color_detection;

        return $this;
    }

    /**
     * Gets get_preview
     *
     * @return bool|null
     */
    public function getGetPreview()
    {
        return $this->container['get_preview'];
    }

    /**
     * Sets get_preview
     *
     * @param bool|null $get_preview Specifies whether the response must contain a thumbnail of the first page of the document.
     *
     * @return $this
     */
    public function setGetPreview($get_preview)
    {
        $this->container['get_preview'] = $get_preview;

        return $this;
    }

    /**
     * Gets thumbnail_width
     *
     * @return int|null
     */
    public function getThumbnailWidth()
    {
        return $this->container['thumbnail_width'];
    }

    /**
     * Sets thumbnail_width
     *
     * @param int|null $thumbnail_width Specifies, in pixels, the width of the thumbnail to be retrieved. Only applicable if GetPreview has been set to true.
     *
     * @return $this
     */
    public function setThumbnailWidth($thumbnail_width)
    {
        $this->container['thumbnail_width'] = $thumbnail_width;

        return $this;
    }

    /**
     * Gets thumbnail_height
     *
     * @return int|null
     */
    public function getThumbnailHeight()
    {
        return $this->container['thumbnail_height'];
    }

    /**
     * Sets thumbnail_height
     *
     * @param int|null $thumbnail_height Specifies, in pixels, the height of the thumbnail to be retrieved.  Only applicable if GetPreview has been set to true.
     *
     * @return $this
     */
    public function setThumbnailHeight($thumbnail_height)
    {
        $this->container['thumbnail_height'] = $thumbnail_height;

        return $this;
    }

    /**
     * Gets thumbnail_background_color
     *
     * @return string|null
     */
    public function getThumbnailBackgroundColor()
    {
        return $this->container['thumbnail_background_color'];
    }

    /**
     * Sets thumbnail_background_color
     *
     * @param string|null $thumbnail_background_color Specifies the background color of the thumbnail, using the color name (ie: \"red\") or its RGBa code (ie: \"rgba(255,0,0,1)\").   Only applicable if GetPreview has been set to true.
     *
     * @return $this
     */
    public function setThumbnailBackgroundColor($thumbnail_background_color)
    {
        $this->container['thumbnail_background_color'] = $thumbnail_background_color;

        return $this;
    }

    /**
     * Gets thumbnail_fit_to_page_size
     *
     * @return bool|null
     */
    public function getThumbnailFitToPageSize()
    {
        return $this->container['thumbnail_fit_to_page_size'];
    }

    /**
     * Sets thumbnail_fit_to_page_size
     *
     * @param bool|null $thumbnail_fit_to_page_size Specifies if the size of the produced thumbnail is automatically adjusted to don't have any margin.  Only applicable if GetPreview has been set to true.
     *
     * @return $this
     */
    public function setThumbnailFitToPageSize($thumbnail_fit_to_page_size)
    {
        $this->container['thumbnail_fit_to_page_size'] = $thumbnail_fit_to_page_size;

        return $this;
    }

    /**
     * Gets txt_page_width
     *
     * @return float|null
     */
    public function getTxtPageWidth()
    {
        return $this->container['txt_page_width'];
    }

    /**
     * Sets txt_page_width
     *
     * @param float|null $txt_page_width Specifies the page width, in points, of produced documents from txt files.
     *
     * @return $this
     */
    public function setTxtPageWidth($txt_page_width)
    {
        $this->container['txt_page_width'] = $txt_page_width;

        return $this;
    }

    /**
     * Gets txt_page_height
     *
     * @return float|null
     */
    public function getTxtPageHeight()
    {
        return $this->container['txt_page_height'];
    }

    /**
     * Sets txt_page_height
     *
     * @param float|null $txt_page_height Specifies the page height, in points, of produced documents from txt files.
     *
     * @return $this
     */
    public function setTxtPageHeight($txt_page_height)
    {
        $this->container['txt_page_height'] = $txt_page_height;

        return $this;
    }

    /**
     * Gets txt_page_margin_left
     *
     * @return float|null
     */
    public function getTxtPageMarginLeft()
    {
        return $this->container['txt_page_margin_left'];
    }

    /**
     * Sets txt_page_margin_left
     *
     * @param float|null $txt_page_margin_left Specifies the page margin left, in points, of produced documents from txt files.
     *
     * @return $this
     */
    public function setTxtPageMarginLeft($txt_page_margin_left)
    {
        $this->container['txt_page_margin_left'] = $txt_page_margin_left;

        return $this;
    }

    /**
     * Gets txt_page_margin_top
     *
     * @return float|null
     */
    public function getTxtPageMarginTop()
    {
        return $this->container['txt_page_margin_top'];
    }

    /**
     * Sets txt_page_margin_top
     *
     * @param float|null $txt_page_margin_top Specifies the page margin top, in points, of produced documents from txt files.
     *
     * @return $this
     */
    public function setTxtPageMarginTop($txt_page_margin_top)
    {
        $this->container['txt_page_margin_top'] = $txt_page_margin_top;

        return $this;
    }

    /**
     * Gets txt_page_margin_right
     *
     * @return float|null
     */
    public function getTxtPageMarginRight()
    {
        return $this->container['txt_page_margin_right'];
    }

    /**
     * Sets txt_page_margin_right
     *
     * @param float|null $txt_page_margin_right Specifies the page margin right, in points, of produced documents from txt files.
     *
     * @return $this
     */
    public function setTxtPageMarginRight($txt_page_margin_right)
    {
        $this->container['txt_page_margin_right'] = $txt_page_margin_right;

        return $this;
    }

    /**
     * Gets txt_page_margin_bottom
     *
     * @return float|null
     */
    public function getTxtPageMarginBottom()
    {
        return $this->container['txt_page_margin_bottom'];
    }

    /**
     * Sets txt_page_margin_bottom
     *
     * @param float|null $txt_page_margin_bottom Specifies the page margin bottom, in points, of produced documents from txt files.
     *
     * @return $this
     */
    public function setTxtPageMarginBottom($txt_page_margin_bottom)
    {
        $this->container['txt_page_margin_bottom'] = $txt_page_margin_bottom;

        return $this;
    }

    /**
     * Gets txt_horizontal_text_alignment
     *
     * @return \OpenAPI\Client\Model\TextAlignment|null
     */
    public function getTxtHorizontalTextAlignment()
    {
        return $this->container['txt_horizontal_text_alignment'];
    }

    /**
     * Sets txt_horizontal_text_alignment
     *
     * @param \OpenAPI\Client\Model\TextAlignment|null $txt_horizontal_text_alignment txt_horizontal_text_alignment
     *
     * @return $this
     */
    public function setTxtHorizontalTextAlignment($txt_horizontal_text_alignment)
    {
        $this->container['txt_horizontal_text_alignment'] = $txt_horizontal_text_alignment;

        return $this;
    }

    /**
     * Gets txt_font_size
     *
     * @return float|null
     */
    public function getTxtFontSize()
    {
        return $this->container['txt_font_size'];
    }

    /**
     * Sets txt_font_size
     *
     * @param float|null $txt_font_size Specifies the text size, in points, to be used for producing documents from txt files.
     *
     * @return $this
     */
    public function setTxtFontSize($txt_font_size)
    {
        $this->container['txt_font_size'] = $txt_font_size;

        return $this;
    }

    /**
     * Gets txt_font_family
     *
     * @return string|null
     */
    public function getTxtFontFamily()
    {
        return $this->container['txt_font_family'];
    }

    /**
     * Sets txt_font_family
     *
     * @param string|null $txt_font_family Specifies the name of the font to be used for producing documents from txt files.
     *
     * @return $this
     */
    public function setTxtFontFamily($txt_font_family)
    {
        $this->container['txt_font_family'] = $txt_font_family;

        return $this;
    }

    /**
     * Gets txt_font_bold
     *
     * @return bool|null
     */
    public function getTxtFontBold()
    {
        return $this->container['txt_font_bold'];
    }

    /**
     * Sets txt_font_bold
     *
     * @param bool|null $txt_font_bold Specifies whether the font to be used for producing documents from txt files must have a bold style.
     *
     * @return $this
     */
    public function setTxtFontBold($txt_font_bold)
    {
        $this->container['txt_font_bold'] = $txt_font_bold;

        return $this;
    }

    /**
     * Gets txt_font_italic
     *
     * @return bool|null
     */
    public function getTxtFontItalic()
    {
        return $this->container['txt_font_italic'];
    }

    /**
     * Sets txt_font_italic
     *
     * @param bool|null $txt_font_italic Specifies whether the font to be used for producing documents from txt files must have an italic style.
     *
     * @return $this
     */
    public function setTxtFontItalic($txt_font_italic)
    {
        $this->container['txt_font_italic'] = $txt_font_italic;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


