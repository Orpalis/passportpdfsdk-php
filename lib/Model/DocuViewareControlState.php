<?php
/**
 * DocuViewareControlState
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PassportPDF API
 *
 * Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DocuViewareControlState Class Doc Comment
 *
 * @category Class
 * @description Specifies configuration and appearance state of a DocuVieware control.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DocuViewareControlState implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DocuViewareControlState';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'timeout' => 'int',
        'control_id' => 'string',
        'show_logo' => 'bool',
        'remote_ip' => 'string',
        'file_hosting_uri' => 'string',
        'document_uri' => 'string',
        'document_file_name' => 'string',
        'disable_download_progress' => 'bool',
        'document_alignment' => '\OpenAPI\Client\Model\DocumentAlignment',
        'document_position' => '\OpenAPI\Client\Model\DocumentPosition',
        'enable_gd_picture_annotations' => 'bool',
        'disable_annotation_printing' => 'bool',
        'enable_form_fields_edition' => 'bool',
        'annotation_editor_mode' => 'bool',
        'link_annotation_click_behaviour' => '\OpenAPI\Client\Model\LinkAnnotationClickBehaviour',
        'zoom' => 'double',
        'zoom_mode' => '\OpenAPI\Client\Model\ViewerZoomMode',
        'open_zoom_mode' => '\OpenAPI\Client\Model\ViewerZoomMode',
        'view_rotation' => '\OpenAPI\Client\Model\RotateFlip',
        'page_rotation' => '\OpenAPI\Client\Model\RotateFlip',
        'zoom_step' => 'int',
        'scroll_bars' => 'bool',
        'force_scroll_bars' => 'bool',
        'page_view_mode' => '\OpenAPI\Client\Model\PageViewMode',
        'enable_text_selection' => 'bool',
        'enable_text_selection_annotation' => 'bool',
        'locale' => '\OpenAPI\Client\Model\DocuViewareLocale',
        'user_languages' => 'string[]',
        'control_width' => 'string',
        'control_height' => 'string',
        'annotation_drop_shadow' => 'bool',
        'allow_print' => 'bool',
        'allow_upload' => 'bool',
        'enable_multiple_thumbnail_selection' => 'bool',
        'enable_thumbnail_drag_drop' => 'bool',
        'enable_file_upload_button' => 'bool',
        'enable_load_from_uri_button' => 'bool',
        'enable_save_button' => 'bool',
        'enable_pages_navigation_buttons' => 'bool',
        'enable_print_button' => 'bool',
        'enable_print_to_pdf' => 'bool',
        'enable_fit_width_button' => 'bool',
        'enable_zoom100_button' => 'bool',
        'enable_mouse_mode_buttons' => 'bool',
        'enable_pan_mode_button' => 'bool',
        'enable_select_mode_button' => 'bool',
        'enable_marquee_zoom_mode_button' => 'bool',
        'enable_full_screen_button' => 'bool',
        'enable_fit_page_button' => 'bool',
        'enable_zoom_buttons' => 'bool',
        'enable_page_view_buttons' => 'bool',
        'rotate_buttons_mode' => '\OpenAPI\Client\Model\RotateMode',
        'enable_rotate_buttons' => 'bool',
        'enable_annotation_action_buttons' => 'bool',
        'enable_selected_text_annotation_edition' => 'bool',
        'enable_rectangle_highlighter_annotation_button' => 'bool',
        'enable_freehand_highlighter_annotation_button' => 'bool',
        'enable_rubber_stamp_annotation_button' => 'bool',
        'enable_rectangle_annotation_button' => 'bool',
        'enable_ellipse_annotation_button' => 'bool',
        'enable_line_annotation_button' => 'bool',
        'enable_connected_line_annotation_button' => 'bool',
        'enable_freehand_annotation_button' => 'bool',
        'enable_line_arrow_annotation_button' => 'bool',
        'enable_link_annotation_button' => 'bool',
        'enable_ruler_annotation_button' => 'bool',
        'enable_poly_ruler_annotation_button' => 'bool',
        'enable_text_annotation_button' => 'bool',
        'enable_sticky_note_annotation_button' => 'bool',
        'enable_twain_acquisition_button' => 'bool',
        'twain_source_enable_custom_configuration' => 'bool',
        'twain_source_select_feeder' => 'bool',
        'twain_source_bit_depth' => 'int',
        'twain_source_resolution' => 'int',
        'twain_source_enable_duplex' => 'bool',
        'twain_source_hide_ui' => 'bool',
        'free_hand_continuous_drawing_mode' => 'bool',
        'show_text_search_snap_in' => 'bool',
        'show_thumbnails_snap_in' => 'bool',
        'show_bookmarks_snap_in' => 'bool',
        'show_annotations_snap_in' => 'bool',
        'show_annotations_comments_snap_in' => 'bool',
        'show_redaction_snap_in' => 'bool',
        'show_digital_signature_snap_in' => 'bool',
        'thumbnail_width' => 'int',
        'thumbnail_height' => 'int',
        'snap_in_panel_default_width' => 'string',
        'collapsed_snap_in' => 'bool',
        'collapse_snapin_on_document_closed' => 'bool',
        'show_snap_in_collapse_button' => 'bool',
        'show_snap_in_panel_header' => 'bool',
        'show_snap_in_button_strip' => 'bool',
        'show_toolbar' => 'bool',
        'toolbar_style' => '\OpenAPI\Client\Model\ToolbarStyle',
        'toolbar_buttons_spacing' => 'int',
        'toolbar_height' => 'int',
        'stroke_color' => 'string',
        'misc_border_color' => 'string',
        'header_color' => 'string',
        'panel_back_color' => 'string',
        'viewer_back_color' => 'string',
        'active_selected_color' => 'string',
        'toolbar_back_color' => 'string',
        'custom_notification_icon_error' => 'string',
        'custom_notification_icon_question' => 'string',
        'custom_notification_icon_warning' => 'string',
        'custom_notification_icon_info' => 'string',
        'custom_notification_icon_ok' => 'string',
        'allowed_export_formats' => 'string',
        'disable_annotation_drawing_mode_panel' => 'bool',
        'image_quality' => 'int',
        'print_quality' => '\OpenAPI\Client\Model\PrintQuality',
        'enable_documents_drop' => 'bool',
        'ajax_custom_headers' => 'string',
        'file_download_custom_headers' => 'string',
        'text_search_max_results' => 'int',
        'max_upload_size' => 'int',
        'max_download_size' => 'int',
        'max_pages' => 'int',
        'certificates' => '\OpenAPI\Client\Model\DocuViewareCertificate[]',
        'extra_features' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'timeout' => 'int32',
        'control_id' => null,
        'show_logo' => null,
        'remote_ip' => null,
        'file_hosting_uri' => null,
        'document_uri' => null,
        'document_file_name' => null,
        'disable_download_progress' => null,
        'document_alignment' => null,
        'document_position' => null,
        'enable_gd_picture_annotations' => null,
        'disable_annotation_printing' => null,
        'enable_form_fields_edition' => null,
        'annotation_editor_mode' => null,
        'link_annotation_click_behaviour' => null,
        'zoom' => 'double',
        'zoom_mode' => null,
        'open_zoom_mode' => null,
        'view_rotation' => null,
        'page_rotation' => null,
        'zoom_step' => 'int32',
        'scroll_bars' => null,
        'force_scroll_bars' => null,
        'page_view_mode' => null,
        'enable_text_selection' => null,
        'enable_text_selection_annotation' => null,
        'locale' => null,
        'user_languages' => null,
        'control_width' => null,
        'control_height' => null,
        'annotation_drop_shadow' => null,
        'allow_print' => null,
        'allow_upload' => null,
        'enable_multiple_thumbnail_selection' => null,
        'enable_thumbnail_drag_drop' => null,
        'enable_file_upload_button' => null,
        'enable_load_from_uri_button' => null,
        'enable_save_button' => null,
        'enable_pages_navigation_buttons' => null,
        'enable_print_button' => null,
        'enable_print_to_pdf' => null,
        'enable_fit_width_button' => null,
        'enable_zoom100_button' => null,
        'enable_mouse_mode_buttons' => null,
        'enable_pan_mode_button' => null,
        'enable_select_mode_button' => null,
        'enable_marquee_zoom_mode_button' => null,
        'enable_full_screen_button' => null,
        'enable_fit_page_button' => null,
        'enable_zoom_buttons' => null,
        'enable_page_view_buttons' => null,
        'rotate_buttons_mode' => null,
        'enable_rotate_buttons' => null,
        'enable_annotation_action_buttons' => null,
        'enable_selected_text_annotation_edition' => null,
        'enable_rectangle_highlighter_annotation_button' => null,
        'enable_freehand_highlighter_annotation_button' => null,
        'enable_rubber_stamp_annotation_button' => null,
        'enable_rectangle_annotation_button' => null,
        'enable_ellipse_annotation_button' => null,
        'enable_line_annotation_button' => null,
        'enable_connected_line_annotation_button' => null,
        'enable_freehand_annotation_button' => null,
        'enable_line_arrow_annotation_button' => null,
        'enable_link_annotation_button' => null,
        'enable_ruler_annotation_button' => null,
        'enable_poly_ruler_annotation_button' => null,
        'enable_text_annotation_button' => null,
        'enable_sticky_note_annotation_button' => null,
        'enable_twain_acquisition_button' => null,
        'twain_source_enable_custom_configuration' => null,
        'twain_source_select_feeder' => null,
        'twain_source_bit_depth' => 'int32',
        'twain_source_resolution' => 'int32',
        'twain_source_enable_duplex' => null,
        'twain_source_hide_ui' => null,
        'free_hand_continuous_drawing_mode' => null,
        'show_text_search_snap_in' => null,
        'show_thumbnails_snap_in' => null,
        'show_bookmarks_snap_in' => null,
        'show_annotations_snap_in' => null,
        'show_annotations_comments_snap_in' => null,
        'show_redaction_snap_in' => null,
        'show_digital_signature_snap_in' => null,
        'thumbnail_width' => 'int32',
        'thumbnail_height' => 'int32',
        'snap_in_panel_default_width' => null,
        'collapsed_snap_in' => null,
        'collapse_snapin_on_document_closed' => null,
        'show_snap_in_collapse_button' => null,
        'show_snap_in_panel_header' => null,
        'show_snap_in_button_strip' => null,
        'show_toolbar' => null,
        'toolbar_style' => null,
        'toolbar_buttons_spacing' => 'int32',
        'toolbar_height' => 'int32',
        'stroke_color' => null,
        'misc_border_color' => null,
        'header_color' => null,
        'panel_back_color' => null,
        'viewer_back_color' => null,
        'active_selected_color' => null,
        'toolbar_back_color' => null,
        'custom_notification_icon_error' => null,
        'custom_notification_icon_question' => null,
        'custom_notification_icon_warning' => null,
        'custom_notification_icon_info' => null,
        'custom_notification_icon_ok' => null,
        'allowed_export_formats' => null,
        'disable_annotation_drawing_mode_panel' => null,
        'image_quality' => 'int32',
        'print_quality' => null,
        'enable_documents_drop' => null,
        'ajax_custom_headers' => null,
        'file_download_custom_headers' => null,
        'text_search_max_results' => 'int32',
        'max_upload_size' => 'int32',
        'max_download_size' => 'int32',
        'max_pages' => 'int32',
        'certificates' => null,
        'extra_features' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'timeout' => 'Timeout',
        'control_id' => 'ControlID',
        'show_logo' => 'ShowLogo',
        'remote_ip' => 'RemoteIP',
        'file_hosting_uri' => 'FileHostingURI',
        'document_uri' => 'DocumentURI',
        'document_file_name' => 'DocumentFileName',
        'disable_download_progress' => 'DisableDownloadProgress',
        'document_alignment' => 'DocumentAlignment',
        'document_position' => 'DocumentPosition',
        'enable_gd_picture_annotations' => 'EnableGdPictureAnnotations',
        'disable_annotation_printing' => 'DisableAnnotationPrinting',
        'enable_form_fields_edition' => 'EnableFormFieldsEdition',
        'annotation_editor_mode' => 'AnnotationEditorMode',
        'link_annotation_click_behaviour' => 'LinkAnnotationClickBehaviour',
        'zoom' => 'Zoom',
        'zoom_mode' => 'ZoomMode',
        'open_zoom_mode' => 'OpenZoomMode',
        'view_rotation' => 'ViewRotation',
        'page_rotation' => 'PageRotation',
        'zoom_step' => 'ZoomStep',
        'scroll_bars' => 'ScrollBars',
        'force_scroll_bars' => 'ForceScrollBars',
        'page_view_mode' => 'PageViewMode',
        'enable_text_selection' => 'EnableTextSelection',
        'enable_text_selection_annotation' => 'EnableTextSelectionAnnotation',
        'locale' => 'Locale',
        'user_languages' => 'UserLanguages',
        'control_width' => 'ControlWidth',
        'control_height' => 'ControlHeight',
        'annotation_drop_shadow' => 'AnnotationDropShadow',
        'allow_print' => 'AllowPrint',
        'allow_upload' => 'AllowUpload',
        'enable_multiple_thumbnail_selection' => 'EnableMultipleThumbnailSelection',
        'enable_thumbnail_drag_drop' => 'EnableThumbnailDragDrop',
        'enable_file_upload_button' => 'EnableFileUploadButton',
        'enable_load_from_uri_button' => 'EnableLoadFromUriButton',
        'enable_save_button' => 'EnableSaveButton',
        'enable_pages_navigation_buttons' => 'EnablePagesNavigationButtons',
        'enable_print_button' => 'EnablePrintButton',
        'enable_print_to_pdf' => 'EnablePrintToPDF',
        'enable_fit_width_button' => 'EnableFitWidthButton',
        'enable_zoom100_button' => 'EnableZoom100Button',
        'enable_mouse_mode_buttons' => 'EnableMouseModeButtons',
        'enable_pan_mode_button' => 'EnablePanModeButton',
        'enable_select_mode_button' => 'EnableSelectModeButton',
        'enable_marquee_zoom_mode_button' => 'EnableMarqueeZoomModeButton',
        'enable_full_screen_button' => 'EnableFullScreenButton',
        'enable_fit_page_button' => 'EnableFitPageButton',
        'enable_zoom_buttons' => 'EnableZoomButtons',
        'enable_page_view_buttons' => 'EnablePageViewButtons',
        'rotate_buttons_mode' => 'RotateButtonsMode',
        'enable_rotate_buttons' => 'EnableRotateButtons',
        'enable_annotation_action_buttons' => 'EnableAnnotationActionButtons',
        'enable_selected_text_annotation_edition' => 'EnableSelectedTextAnnotationEdition',
        'enable_rectangle_highlighter_annotation_button' => 'EnableRectangleHighlighterAnnotationButton',
        'enable_freehand_highlighter_annotation_button' => 'EnableFreehandHighlighterAnnotationButton',
        'enable_rubber_stamp_annotation_button' => 'EnableRubberStampAnnotationButton',
        'enable_rectangle_annotation_button' => 'EnableRectangleAnnotationButton',
        'enable_ellipse_annotation_button' => 'EnableEllipseAnnotationButton',
        'enable_line_annotation_button' => 'EnableLineAnnotationButton',
        'enable_connected_line_annotation_button' => 'EnableConnectedLineAnnotationButton',
        'enable_freehand_annotation_button' => 'EnableFreehandAnnotationButton',
        'enable_line_arrow_annotation_button' => 'EnableLineArrowAnnotationButton',
        'enable_link_annotation_button' => 'EnableLinkAnnotationButton',
        'enable_ruler_annotation_button' => 'EnableRulerAnnotationButton',
        'enable_poly_ruler_annotation_button' => 'EnablePolyRulerAnnotationButton',
        'enable_text_annotation_button' => 'EnableTextAnnotationButton',
        'enable_sticky_note_annotation_button' => 'EnableStickyNoteAnnotationButton',
        'enable_twain_acquisition_button' => 'EnableTwainAcquisitionButton',
        'twain_source_enable_custom_configuration' => 'TwainSourceEnableCustomConfiguration',
        'twain_source_select_feeder' => 'TwainSourceSelectFeeder',
        'twain_source_bit_depth' => 'TwainSourceBitDepth',
        'twain_source_resolution' => 'TwainSourceResolution',
        'twain_source_enable_duplex' => 'TwainSourceEnableDuplex',
        'twain_source_hide_ui' => 'TwainSourceHideUI',
        'free_hand_continuous_drawing_mode' => 'FreeHandContinuousDrawingMode',
        'show_text_search_snap_in' => 'ShowTextSearchSnapIn',
        'show_thumbnails_snap_in' => 'ShowThumbnailsSnapIn',
        'show_bookmarks_snap_in' => 'ShowBookmarksSnapIn',
        'show_annotations_snap_in' => 'ShowAnnotationsSnapIn',
        'show_annotations_comments_snap_in' => 'ShowAnnotationsCommentsSnapIn',
        'show_redaction_snap_in' => 'ShowRedactionSnapIn',
        'show_digital_signature_snap_in' => 'ShowDigitalSignatureSnapIn',
        'thumbnail_width' => 'ThumbnailWidth',
        'thumbnail_height' => 'ThumbnailHeight',
        'snap_in_panel_default_width' => 'SnapInPanelDefaultWidth',
        'collapsed_snap_in' => 'CollapsedSnapIn',
        'collapse_snapin_on_document_closed' => 'CollapseSnapinOnDocumentClosed',
        'show_snap_in_collapse_button' => 'ShowSnapInCollapseButton',
        'show_snap_in_panel_header' => 'ShowSnapInPanelHeader',
        'show_snap_in_button_strip' => 'ShowSnapInButtonStrip',
        'show_toolbar' => 'ShowToolbar',
        'toolbar_style' => 'ToolbarStyle',
        'toolbar_buttons_spacing' => 'ToolbarButtonsSpacing',
        'toolbar_height' => 'ToolbarHeight',
        'stroke_color' => 'StrokeColor',
        'misc_border_color' => 'MiscBorderColor',
        'header_color' => 'HeaderColor',
        'panel_back_color' => 'PanelBackColor',
        'viewer_back_color' => 'ViewerBackColor',
        'active_selected_color' => 'ActiveSelectedColor',
        'toolbar_back_color' => 'ToolbarBackColor',
        'custom_notification_icon_error' => 'CustomNotificationIconError',
        'custom_notification_icon_question' => 'CustomNotificationIconQuestion',
        'custom_notification_icon_warning' => 'CustomNotificationIconWarning',
        'custom_notification_icon_info' => 'CustomNotificationIconInfo',
        'custom_notification_icon_ok' => 'CustomNotificationIconOk',
        'allowed_export_formats' => 'AllowedExportFormats',
        'disable_annotation_drawing_mode_panel' => 'DisableAnnotationDrawingModePanel',
        'image_quality' => 'ImageQuality',
        'print_quality' => 'PrintQuality',
        'enable_documents_drop' => 'EnableDocumentsDrop',
        'ajax_custom_headers' => 'AjaxCustomHeaders',
        'file_download_custom_headers' => 'FileDownloadCustomHeaders',
        'text_search_max_results' => 'TextSearchMaxResults',
        'max_upload_size' => 'MaxUploadSize',
        'max_download_size' => 'MaxDownloadSize',
        'max_pages' => 'MaxPages',
        'certificates' => 'Certificates',
        'extra_features' => 'ExtraFeatures'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'timeout' => 'setTimeout',
        'control_id' => 'setControlId',
        'show_logo' => 'setShowLogo',
        'remote_ip' => 'setRemoteIp',
        'file_hosting_uri' => 'setFileHostingUri',
        'document_uri' => 'setDocumentUri',
        'document_file_name' => 'setDocumentFileName',
        'disable_download_progress' => 'setDisableDownloadProgress',
        'document_alignment' => 'setDocumentAlignment',
        'document_position' => 'setDocumentPosition',
        'enable_gd_picture_annotations' => 'setEnableGdPictureAnnotations',
        'disable_annotation_printing' => 'setDisableAnnotationPrinting',
        'enable_form_fields_edition' => 'setEnableFormFieldsEdition',
        'annotation_editor_mode' => 'setAnnotationEditorMode',
        'link_annotation_click_behaviour' => 'setLinkAnnotationClickBehaviour',
        'zoom' => 'setZoom',
        'zoom_mode' => 'setZoomMode',
        'open_zoom_mode' => 'setOpenZoomMode',
        'view_rotation' => 'setViewRotation',
        'page_rotation' => 'setPageRotation',
        'zoom_step' => 'setZoomStep',
        'scroll_bars' => 'setScrollBars',
        'force_scroll_bars' => 'setForceScrollBars',
        'page_view_mode' => 'setPageViewMode',
        'enable_text_selection' => 'setEnableTextSelection',
        'enable_text_selection_annotation' => 'setEnableTextSelectionAnnotation',
        'locale' => 'setLocale',
        'user_languages' => 'setUserLanguages',
        'control_width' => 'setControlWidth',
        'control_height' => 'setControlHeight',
        'annotation_drop_shadow' => 'setAnnotationDropShadow',
        'allow_print' => 'setAllowPrint',
        'allow_upload' => 'setAllowUpload',
        'enable_multiple_thumbnail_selection' => 'setEnableMultipleThumbnailSelection',
        'enable_thumbnail_drag_drop' => 'setEnableThumbnailDragDrop',
        'enable_file_upload_button' => 'setEnableFileUploadButton',
        'enable_load_from_uri_button' => 'setEnableLoadFromUriButton',
        'enable_save_button' => 'setEnableSaveButton',
        'enable_pages_navigation_buttons' => 'setEnablePagesNavigationButtons',
        'enable_print_button' => 'setEnablePrintButton',
        'enable_print_to_pdf' => 'setEnablePrintToPdf',
        'enable_fit_width_button' => 'setEnableFitWidthButton',
        'enable_zoom100_button' => 'setEnableZoom100Button',
        'enable_mouse_mode_buttons' => 'setEnableMouseModeButtons',
        'enable_pan_mode_button' => 'setEnablePanModeButton',
        'enable_select_mode_button' => 'setEnableSelectModeButton',
        'enable_marquee_zoom_mode_button' => 'setEnableMarqueeZoomModeButton',
        'enable_full_screen_button' => 'setEnableFullScreenButton',
        'enable_fit_page_button' => 'setEnableFitPageButton',
        'enable_zoom_buttons' => 'setEnableZoomButtons',
        'enable_page_view_buttons' => 'setEnablePageViewButtons',
        'rotate_buttons_mode' => 'setRotateButtonsMode',
        'enable_rotate_buttons' => 'setEnableRotateButtons',
        'enable_annotation_action_buttons' => 'setEnableAnnotationActionButtons',
        'enable_selected_text_annotation_edition' => 'setEnableSelectedTextAnnotationEdition',
        'enable_rectangle_highlighter_annotation_button' => 'setEnableRectangleHighlighterAnnotationButton',
        'enable_freehand_highlighter_annotation_button' => 'setEnableFreehandHighlighterAnnotationButton',
        'enable_rubber_stamp_annotation_button' => 'setEnableRubberStampAnnotationButton',
        'enable_rectangle_annotation_button' => 'setEnableRectangleAnnotationButton',
        'enable_ellipse_annotation_button' => 'setEnableEllipseAnnotationButton',
        'enable_line_annotation_button' => 'setEnableLineAnnotationButton',
        'enable_connected_line_annotation_button' => 'setEnableConnectedLineAnnotationButton',
        'enable_freehand_annotation_button' => 'setEnableFreehandAnnotationButton',
        'enable_line_arrow_annotation_button' => 'setEnableLineArrowAnnotationButton',
        'enable_link_annotation_button' => 'setEnableLinkAnnotationButton',
        'enable_ruler_annotation_button' => 'setEnableRulerAnnotationButton',
        'enable_poly_ruler_annotation_button' => 'setEnablePolyRulerAnnotationButton',
        'enable_text_annotation_button' => 'setEnableTextAnnotationButton',
        'enable_sticky_note_annotation_button' => 'setEnableStickyNoteAnnotationButton',
        'enable_twain_acquisition_button' => 'setEnableTwainAcquisitionButton',
        'twain_source_enable_custom_configuration' => 'setTwainSourceEnableCustomConfiguration',
        'twain_source_select_feeder' => 'setTwainSourceSelectFeeder',
        'twain_source_bit_depth' => 'setTwainSourceBitDepth',
        'twain_source_resolution' => 'setTwainSourceResolution',
        'twain_source_enable_duplex' => 'setTwainSourceEnableDuplex',
        'twain_source_hide_ui' => 'setTwainSourceHideUi',
        'free_hand_continuous_drawing_mode' => 'setFreeHandContinuousDrawingMode',
        'show_text_search_snap_in' => 'setShowTextSearchSnapIn',
        'show_thumbnails_snap_in' => 'setShowThumbnailsSnapIn',
        'show_bookmarks_snap_in' => 'setShowBookmarksSnapIn',
        'show_annotations_snap_in' => 'setShowAnnotationsSnapIn',
        'show_annotations_comments_snap_in' => 'setShowAnnotationsCommentsSnapIn',
        'show_redaction_snap_in' => 'setShowRedactionSnapIn',
        'show_digital_signature_snap_in' => 'setShowDigitalSignatureSnapIn',
        'thumbnail_width' => 'setThumbnailWidth',
        'thumbnail_height' => 'setThumbnailHeight',
        'snap_in_panel_default_width' => 'setSnapInPanelDefaultWidth',
        'collapsed_snap_in' => 'setCollapsedSnapIn',
        'collapse_snapin_on_document_closed' => 'setCollapseSnapinOnDocumentClosed',
        'show_snap_in_collapse_button' => 'setShowSnapInCollapseButton',
        'show_snap_in_panel_header' => 'setShowSnapInPanelHeader',
        'show_snap_in_button_strip' => 'setShowSnapInButtonStrip',
        'show_toolbar' => 'setShowToolbar',
        'toolbar_style' => 'setToolbarStyle',
        'toolbar_buttons_spacing' => 'setToolbarButtonsSpacing',
        'toolbar_height' => 'setToolbarHeight',
        'stroke_color' => 'setStrokeColor',
        'misc_border_color' => 'setMiscBorderColor',
        'header_color' => 'setHeaderColor',
        'panel_back_color' => 'setPanelBackColor',
        'viewer_back_color' => 'setViewerBackColor',
        'active_selected_color' => 'setActiveSelectedColor',
        'toolbar_back_color' => 'setToolbarBackColor',
        'custom_notification_icon_error' => 'setCustomNotificationIconError',
        'custom_notification_icon_question' => 'setCustomNotificationIconQuestion',
        'custom_notification_icon_warning' => 'setCustomNotificationIconWarning',
        'custom_notification_icon_info' => 'setCustomNotificationIconInfo',
        'custom_notification_icon_ok' => 'setCustomNotificationIconOk',
        'allowed_export_formats' => 'setAllowedExportFormats',
        'disable_annotation_drawing_mode_panel' => 'setDisableAnnotationDrawingModePanel',
        'image_quality' => 'setImageQuality',
        'print_quality' => 'setPrintQuality',
        'enable_documents_drop' => 'setEnableDocumentsDrop',
        'ajax_custom_headers' => 'setAjaxCustomHeaders',
        'file_download_custom_headers' => 'setFileDownloadCustomHeaders',
        'text_search_max_results' => 'setTextSearchMaxResults',
        'max_upload_size' => 'setMaxUploadSize',
        'max_download_size' => 'setMaxDownloadSize',
        'max_pages' => 'setMaxPages',
        'certificates' => 'setCertificates',
        'extra_features' => 'setExtraFeatures'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'timeout' => 'getTimeout',
        'control_id' => 'getControlId',
        'show_logo' => 'getShowLogo',
        'remote_ip' => 'getRemoteIp',
        'file_hosting_uri' => 'getFileHostingUri',
        'document_uri' => 'getDocumentUri',
        'document_file_name' => 'getDocumentFileName',
        'disable_download_progress' => 'getDisableDownloadProgress',
        'document_alignment' => 'getDocumentAlignment',
        'document_position' => 'getDocumentPosition',
        'enable_gd_picture_annotations' => 'getEnableGdPictureAnnotations',
        'disable_annotation_printing' => 'getDisableAnnotationPrinting',
        'enable_form_fields_edition' => 'getEnableFormFieldsEdition',
        'annotation_editor_mode' => 'getAnnotationEditorMode',
        'link_annotation_click_behaviour' => 'getLinkAnnotationClickBehaviour',
        'zoom' => 'getZoom',
        'zoom_mode' => 'getZoomMode',
        'open_zoom_mode' => 'getOpenZoomMode',
        'view_rotation' => 'getViewRotation',
        'page_rotation' => 'getPageRotation',
        'zoom_step' => 'getZoomStep',
        'scroll_bars' => 'getScrollBars',
        'force_scroll_bars' => 'getForceScrollBars',
        'page_view_mode' => 'getPageViewMode',
        'enable_text_selection' => 'getEnableTextSelection',
        'enable_text_selection_annotation' => 'getEnableTextSelectionAnnotation',
        'locale' => 'getLocale',
        'user_languages' => 'getUserLanguages',
        'control_width' => 'getControlWidth',
        'control_height' => 'getControlHeight',
        'annotation_drop_shadow' => 'getAnnotationDropShadow',
        'allow_print' => 'getAllowPrint',
        'allow_upload' => 'getAllowUpload',
        'enable_multiple_thumbnail_selection' => 'getEnableMultipleThumbnailSelection',
        'enable_thumbnail_drag_drop' => 'getEnableThumbnailDragDrop',
        'enable_file_upload_button' => 'getEnableFileUploadButton',
        'enable_load_from_uri_button' => 'getEnableLoadFromUriButton',
        'enable_save_button' => 'getEnableSaveButton',
        'enable_pages_navigation_buttons' => 'getEnablePagesNavigationButtons',
        'enable_print_button' => 'getEnablePrintButton',
        'enable_print_to_pdf' => 'getEnablePrintToPdf',
        'enable_fit_width_button' => 'getEnableFitWidthButton',
        'enable_zoom100_button' => 'getEnableZoom100Button',
        'enable_mouse_mode_buttons' => 'getEnableMouseModeButtons',
        'enable_pan_mode_button' => 'getEnablePanModeButton',
        'enable_select_mode_button' => 'getEnableSelectModeButton',
        'enable_marquee_zoom_mode_button' => 'getEnableMarqueeZoomModeButton',
        'enable_full_screen_button' => 'getEnableFullScreenButton',
        'enable_fit_page_button' => 'getEnableFitPageButton',
        'enable_zoom_buttons' => 'getEnableZoomButtons',
        'enable_page_view_buttons' => 'getEnablePageViewButtons',
        'rotate_buttons_mode' => 'getRotateButtonsMode',
        'enable_rotate_buttons' => 'getEnableRotateButtons',
        'enable_annotation_action_buttons' => 'getEnableAnnotationActionButtons',
        'enable_selected_text_annotation_edition' => 'getEnableSelectedTextAnnotationEdition',
        'enable_rectangle_highlighter_annotation_button' => 'getEnableRectangleHighlighterAnnotationButton',
        'enable_freehand_highlighter_annotation_button' => 'getEnableFreehandHighlighterAnnotationButton',
        'enable_rubber_stamp_annotation_button' => 'getEnableRubberStampAnnotationButton',
        'enable_rectangle_annotation_button' => 'getEnableRectangleAnnotationButton',
        'enable_ellipse_annotation_button' => 'getEnableEllipseAnnotationButton',
        'enable_line_annotation_button' => 'getEnableLineAnnotationButton',
        'enable_connected_line_annotation_button' => 'getEnableConnectedLineAnnotationButton',
        'enable_freehand_annotation_button' => 'getEnableFreehandAnnotationButton',
        'enable_line_arrow_annotation_button' => 'getEnableLineArrowAnnotationButton',
        'enable_link_annotation_button' => 'getEnableLinkAnnotationButton',
        'enable_ruler_annotation_button' => 'getEnableRulerAnnotationButton',
        'enable_poly_ruler_annotation_button' => 'getEnablePolyRulerAnnotationButton',
        'enable_text_annotation_button' => 'getEnableTextAnnotationButton',
        'enable_sticky_note_annotation_button' => 'getEnableStickyNoteAnnotationButton',
        'enable_twain_acquisition_button' => 'getEnableTwainAcquisitionButton',
        'twain_source_enable_custom_configuration' => 'getTwainSourceEnableCustomConfiguration',
        'twain_source_select_feeder' => 'getTwainSourceSelectFeeder',
        'twain_source_bit_depth' => 'getTwainSourceBitDepth',
        'twain_source_resolution' => 'getTwainSourceResolution',
        'twain_source_enable_duplex' => 'getTwainSourceEnableDuplex',
        'twain_source_hide_ui' => 'getTwainSourceHideUi',
        'free_hand_continuous_drawing_mode' => 'getFreeHandContinuousDrawingMode',
        'show_text_search_snap_in' => 'getShowTextSearchSnapIn',
        'show_thumbnails_snap_in' => 'getShowThumbnailsSnapIn',
        'show_bookmarks_snap_in' => 'getShowBookmarksSnapIn',
        'show_annotations_snap_in' => 'getShowAnnotationsSnapIn',
        'show_annotations_comments_snap_in' => 'getShowAnnotationsCommentsSnapIn',
        'show_redaction_snap_in' => 'getShowRedactionSnapIn',
        'show_digital_signature_snap_in' => 'getShowDigitalSignatureSnapIn',
        'thumbnail_width' => 'getThumbnailWidth',
        'thumbnail_height' => 'getThumbnailHeight',
        'snap_in_panel_default_width' => 'getSnapInPanelDefaultWidth',
        'collapsed_snap_in' => 'getCollapsedSnapIn',
        'collapse_snapin_on_document_closed' => 'getCollapseSnapinOnDocumentClosed',
        'show_snap_in_collapse_button' => 'getShowSnapInCollapseButton',
        'show_snap_in_panel_header' => 'getShowSnapInPanelHeader',
        'show_snap_in_button_strip' => 'getShowSnapInButtonStrip',
        'show_toolbar' => 'getShowToolbar',
        'toolbar_style' => 'getToolbarStyle',
        'toolbar_buttons_spacing' => 'getToolbarButtonsSpacing',
        'toolbar_height' => 'getToolbarHeight',
        'stroke_color' => 'getStrokeColor',
        'misc_border_color' => 'getMiscBorderColor',
        'header_color' => 'getHeaderColor',
        'panel_back_color' => 'getPanelBackColor',
        'viewer_back_color' => 'getViewerBackColor',
        'active_selected_color' => 'getActiveSelectedColor',
        'toolbar_back_color' => 'getToolbarBackColor',
        'custom_notification_icon_error' => 'getCustomNotificationIconError',
        'custom_notification_icon_question' => 'getCustomNotificationIconQuestion',
        'custom_notification_icon_warning' => 'getCustomNotificationIconWarning',
        'custom_notification_icon_info' => 'getCustomNotificationIconInfo',
        'custom_notification_icon_ok' => 'getCustomNotificationIconOk',
        'allowed_export_formats' => 'getAllowedExportFormats',
        'disable_annotation_drawing_mode_panel' => 'getDisableAnnotationDrawingModePanel',
        'image_quality' => 'getImageQuality',
        'print_quality' => 'getPrintQuality',
        'enable_documents_drop' => 'getEnableDocumentsDrop',
        'ajax_custom_headers' => 'getAjaxCustomHeaders',
        'file_download_custom_headers' => 'getFileDownloadCustomHeaders',
        'text_search_max_results' => 'getTextSearchMaxResults',
        'max_upload_size' => 'getMaxUploadSize',
        'max_download_size' => 'getMaxDownloadSize',
        'max_pages' => 'getMaxPages',
        'certificates' => 'getCertificates',
        'extra_features' => 'getExtraFeatures'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['timeout'] = isset($data['timeout']) ? $data['timeout'] : 20;
        $this->container['control_id'] = isset($data['control_id']) ? $data['control_id'] : 'DocuVieware1';
        $this->container['show_logo'] = isset($data['show_logo']) ? $data['show_logo'] : true;
        $this->container['remote_ip'] = isset($data['remote_ip']) ? $data['remote_ip'] : '';
        $this->container['file_hosting_uri'] = isset($data['file_hosting_uri']) ? $data['file_hosting_uri'] : '';
        $this->container['document_uri'] = isset($data['document_uri']) ? $data['document_uri'] : '';
        $this->container['document_file_name'] = isset($data['document_file_name']) ? $data['document_file_name'] : '';
        $this->container['disable_download_progress'] = isset($data['disable_download_progress']) ? $data['disable_download_progress'] : false;
        $this->container['document_alignment'] = isset($data['document_alignment']) ? $data['document_alignment'] : null;
        $this->container['document_position'] = isset($data['document_position']) ? $data['document_position'] : null;
        $this->container['enable_gd_picture_annotations'] = isset($data['enable_gd_picture_annotations']) ? $data['enable_gd_picture_annotations'] : true;
        $this->container['disable_annotation_printing'] = isset($data['disable_annotation_printing']) ? $data['disable_annotation_printing'] : false;
        $this->container['enable_form_fields_edition'] = isset($data['enable_form_fields_edition']) ? $data['enable_form_fields_edition'] : true;
        $this->container['annotation_editor_mode'] = isset($data['annotation_editor_mode']) ? $data['annotation_editor_mode'] : true;
        $this->container['link_annotation_click_behaviour'] = isset($data['link_annotation_click_behaviour']) ? $data['link_annotation_click_behaviour'] : null;
        $this->container['zoom'] = isset($data['zoom']) ? $data['zoom'] : 1;
        $this->container['zoom_mode'] = isset($data['zoom_mode']) ? $data['zoom_mode'] : null;
        $this->container['open_zoom_mode'] = isset($data['open_zoom_mode']) ? $data['open_zoom_mode'] : null;
        $this->container['view_rotation'] = isset($data['view_rotation']) ? $data['view_rotation'] : null;
        $this->container['page_rotation'] = isset($data['page_rotation']) ? $data['page_rotation'] : null;
        $this->container['zoom_step'] = isset($data['zoom_step']) ? $data['zoom_step'] : 30;
        $this->container['scroll_bars'] = isset($data['scroll_bars']) ? $data['scroll_bars'] : true;
        $this->container['force_scroll_bars'] = isset($data['force_scroll_bars']) ? $data['force_scroll_bars'] : false;
        $this->container['page_view_mode'] = isset($data['page_view_mode']) ? $data['page_view_mode'] : null;
        $this->container['enable_text_selection'] = isset($data['enable_text_selection']) ? $data['enable_text_selection'] : true;
        $this->container['enable_text_selection_annotation'] = isset($data['enable_text_selection_annotation']) ? $data['enable_text_selection_annotation'] : true;
        $this->container['locale'] = isset($data['locale']) ? $data['locale'] : null;
        $this->container['user_languages'] = isset($data['user_languages']) ? $data['user_languages'] : null;
        $this->container['control_width'] = isset($data['control_width']) ? $data['control_width'] : '100%';
        $this->container['control_height'] = isset($data['control_height']) ? $data['control_height'] : '100%';
        $this->container['annotation_drop_shadow'] = isset($data['annotation_drop_shadow']) ? $data['annotation_drop_shadow'] : true;
        $this->container['allow_print'] = isset($data['allow_print']) ? $data['allow_print'] : true;
        $this->container['allow_upload'] = isset($data['allow_upload']) ? $data['allow_upload'] : true;
        $this->container['enable_multiple_thumbnail_selection'] = isset($data['enable_multiple_thumbnail_selection']) ? $data['enable_multiple_thumbnail_selection'] : false;
        $this->container['enable_thumbnail_drag_drop'] = isset($data['enable_thumbnail_drag_drop']) ? $data['enable_thumbnail_drag_drop'] : false;
        $this->container['enable_file_upload_button'] = isset($data['enable_file_upload_button']) ? $data['enable_file_upload_button'] : true;
        $this->container['enable_load_from_uri_button'] = isset($data['enable_load_from_uri_button']) ? $data['enable_load_from_uri_button'] : true;
        $this->container['enable_save_button'] = isset($data['enable_save_button']) ? $data['enable_save_button'] : true;
        $this->container['enable_pages_navigation_buttons'] = isset($data['enable_pages_navigation_buttons']) ? $data['enable_pages_navigation_buttons'] : true;
        $this->container['enable_print_button'] = isset($data['enable_print_button']) ? $data['enable_print_button'] : true;
        $this->container['enable_print_to_pdf'] = isset($data['enable_print_to_pdf']) ? $data['enable_print_to_pdf'] : true;
        $this->container['enable_fit_width_button'] = isset($data['enable_fit_width_button']) ? $data['enable_fit_width_button'] : true;
        $this->container['enable_zoom100_button'] = isset($data['enable_zoom100_button']) ? $data['enable_zoom100_button'] : true;
        $this->container['enable_mouse_mode_buttons'] = isset($data['enable_mouse_mode_buttons']) ? $data['enable_mouse_mode_buttons'] : true;
        $this->container['enable_pan_mode_button'] = isset($data['enable_pan_mode_button']) ? $data['enable_pan_mode_button'] : true;
        $this->container['enable_select_mode_button'] = isset($data['enable_select_mode_button']) ? $data['enable_select_mode_button'] : true;
        $this->container['enable_marquee_zoom_mode_button'] = isset($data['enable_marquee_zoom_mode_button']) ? $data['enable_marquee_zoom_mode_button'] : true;
        $this->container['enable_full_screen_button'] = isset($data['enable_full_screen_button']) ? $data['enable_full_screen_button'] : true;
        $this->container['enable_fit_page_button'] = isset($data['enable_fit_page_button']) ? $data['enable_fit_page_button'] : true;
        $this->container['enable_zoom_buttons'] = isset($data['enable_zoom_buttons']) ? $data['enable_zoom_buttons'] : true;
        $this->container['enable_page_view_buttons'] = isset($data['enable_page_view_buttons']) ? $data['enable_page_view_buttons'] : true;
        $this->container['rotate_buttons_mode'] = isset($data['rotate_buttons_mode']) ? $data['rotate_buttons_mode'] : null;
        $this->container['enable_rotate_buttons'] = isset($data['enable_rotate_buttons']) ? $data['enable_rotate_buttons'] : true;
        $this->container['enable_annotation_action_buttons'] = isset($data['enable_annotation_action_buttons']) ? $data['enable_annotation_action_buttons'] : true;
        $this->container['enable_selected_text_annotation_edition'] = isset($data['enable_selected_text_annotation_edition']) ? $data['enable_selected_text_annotation_edition'] : true;
        $this->container['enable_rectangle_highlighter_annotation_button'] = isset($data['enable_rectangle_highlighter_annotation_button']) ? $data['enable_rectangle_highlighter_annotation_button'] : true;
        $this->container['enable_freehand_highlighter_annotation_button'] = isset($data['enable_freehand_highlighter_annotation_button']) ? $data['enable_freehand_highlighter_annotation_button'] : true;
        $this->container['enable_rubber_stamp_annotation_button'] = isset($data['enable_rubber_stamp_annotation_button']) ? $data['enable_rubber_stamp_annotation_button'] : true;
        $this->container['enable_rectangle_annotation_button'] = isset($data['enable_rectangle_annotation_button']) ? $data['enable_rectangle_annotation_button'] : true;
        $this->container['enable_ellipse_annotation_button'] = isset($data['enable_ellipse_annotation_button']) ? $data['enable_ellipse_annotation_button'] : true;
        $this->container['enable_line_annotation_button'] = isset($data['enable_line_annotation_button']) ? $data['enable_line_annotation_button'] : true;
        $this->container['enable_connected_line_annotation_button'] = isset($data['enable_connected_line_annotation_button']) ? $data['enable_connected_line_annotation_button'] : true;
        $this->container['enable_freehand_annotation_button'] = isset($data['enable_freehand_annotation_button']) ? $data['enable_freehand_annotation_button'] : true;
        $this->container['enable_line_arrow_annotation_button'] = isset($data['enable_line_arrow_annotation_button']) ? $data['enable_line_arrow_annotation_button'] : true;
        $this->container['enable_link_annotation_button'] = isset($data['enable_link_annotation_button']) ? $data['enable_link_annotation_button'] : true;
        $this->container['enable_ruler_annotation_button'] = isset($data['enable_ruler_annotation_button']) ? $data['enable_ruler_annotation_button'] : true;
        $this->container['enable_poly_ruler_annotation_button'] = isset($data['enable_poly_ruler_annotation_button']) ? $data['enable_poly_ruler_annotation_button'] : true;
        $this->container['enable_text_annotation_button'] = isset($data['enable_text_annotation_button']) ? $data['enable_text_annotation_button'] : true;
        $this->container['enable_sticky_note_annotation_button'] = isset($data['enable_sticky_note_annotation_button']) ? $data['enable_sticky_note_annotation_button'] : true;
        $this->container['enable_twain_acquisition_button'] = isset($data['enable_twain_acquisition_button']) ? $data['enable_twain_acquisition_button'] : true;
        $this->container['twain_source_enable_custom_configuration'] = isset($data['twain_source_enable_custom_configuration']) ? $data['twain_source_enable_custom_configuration'] : false;
        $this->container['twain_source_select_feeder'] = isset($data['twain_source_select_feeder']) ? $data['twain_source_select_feeder'] : true;
        $this->container['twain_source_bit_depth'] = isset($data['twain_source_bit_depth']) ? $data['twain_source_bit_depth'] : 24;
        $this->container['twain_source_resolution'] = isset($data['twain_source_resolution']) ? $data['twain_source_resolution'] : 200;
        $this->container['twain_source_enable_duplex'] = isset($data['twain_source_enable_duplex']) ? $data['twain_source_enable_duplex'] : false;
        $this->container['twain_source_hide_ui'] = isset($data['twain_source_hide_ui']) ? $data['twain_source_hide_ui'] : true;
        $this->container['free_hand_continuous_drawing_mode'] = isset($data['free_hand_continuous_drawing_mode']) ? $data['free_hand_continuous_drawing_mode'] : true;
        $this->container['show_text_search_snap_in'] = isset($data['show_text_search_snap_in']) ? $data['show_text_search_snap_in'] : true;
        $this->container['show_thumbnails_snap_in'] = isset($data['show_thumbnails_snap_in']) ? $data['show_thumbnails_snap_in'] : true;
        $this->container['show_bookmarks_snap_in'] = isset($data['show_bookmarks_snap_in']) ? $data['show_bookmarks_snap_in'] : true;
        $this->container['show_annotations_snap_in'] = isset($data['show_annotations_snap_in']) ? $data['show_annotations_snap_in'] : true;
        $this->container['show_annotations_comments_snap_in'] = isset($data['show_annotations_comments_snap_in']) ? $data['show_annotations_comments_snap_in'] : true;
        $this->container['show_redaction_snap_in'] = isset($data['show_redaction_snap_in']) ? $data['show_redaction_snap_in'] : true;
        $this->container['show_digital_signature_snap_in'] = isset($data['show_digital_signature_snap_in']) ? $data['show_digital_signature_snap_in'] : false;
        $this->container['thumbnail_width'] = isset($data['thumbnail_width']) ? $data['thumbnail_width'] : 192;
        $this->container['thumbnail_height'] = isset($data['thumbnail_height']) ? $data['thumbnail_height'] : 256;
        $this->container['snap_in_panel_default_width'] = isset($data['snap_in_panel_default_width']) ? $data['snap_in_panel_default_width'] : '280px';
        $this->container['collapsed_snap_in'] = isset($data['collapsed_snap_in']) ? $data['collapsed_snap_in'] : false;
        $this->container['collapse_snapin_on_document_closed'] = isset($data['collapse_snapin_on_document_closed']) ? $data['collapse_snapin_on_document_closed'] : true;
        $this->container['show_snap_in_collapse_button'] = isset($data['show_snap_in_collapse_button']) ? $data['show_snap_in_collapse_button'] : true;
        $this->container['show_snap_in_panel_header'] = isset($data['show_snap_in_panel_header']) ? $data['show_snap_in_panel_header'] : true;
        $this->container['show_snap_in_button_strip'] = isset($data['show_snap_in_button_strip']) ? $data['show_snap_in_button_strip'] : true;
        $this->container['show_toolbar'] = isset($data['show_toolbar']) ? $data['show_toolbar'] : true;
        $this->container['toolbar_style'] = isset($data['toolbar_style']) ? $data['toolbar_style'] : null;
        $this->container['toolbar_buttons_spacing'] = isset($data['toolbar_buttons_spacing']) ? $data['toolbar_buttons_spacing'] : 12;
        $this->container['toolbar_height'] = isset($data['toolbar_height']) ? $data['toolbar_height'] : 48;
        $this->container['stroke_color'] = isset($data['stroke_color']) ? $data['stroke_color'] : '#646464';
        $this->container['misc_border_color'] = isset($data['misc_border_color']) ? $data['misc_border_color'] : '#DCDCDC';
        $this->container['header_color'] = isset($data['header_color']) ? $data['header_color'] : '#213E4E';
        $this->container['panel_back_color'] = isset($data['panel_back_color']) ? $data['panel_back_color'] : '#FFFFFF';
        $this->container['viewer_back_color'] = isset($data['viewer_back_color']) ? $data['viewer_back_color'] : '#565656';
        $this->container['active_selected_color'] = isset($data['active_selected_color']) ? $data['active_selected_color'] : '#0382D4';
        $this->container['toolbar_back_color'] = isset($data['toolbar_back_color']) ? $data['toolbar_back_color'] : '#F2F2F2';
        $this->container['custom_notification_icon_error'] = isset($data['custom_notification_icon_error']) ? $data['custom_notification_icon_error'] : '';
        $this->container['custom_notification_icon_question'] = isset($data['custom_notification_icon_question']) ? $data['custom_notification_icon_question'] : '';
        $this->container['custom_notification_icon_warning'] = isset($data['custom_notification_icon_warning']) ? $data['custom_notification_icon_warning'] : '';
        $this->container['custom_notification_icon_info'] = isset($data['custom_notification_icon_info']) ? $data['custom_notification_icon_info'] : '';
        $this->container['custom_notification_icon_ok'] = isset($data['custom_notification_icon_ok']) ? $data['custom_notification_icon_ok'] : '';
        $this->container['allowed_export_formats'] = isset($data['allowed_export_formats']) ? $data['allowed_export_formats'] : '*';
        $this->container['disable_annotation_drawing_mode_panel'] = isset($data['disable_annotation_drawing_mode_panel']) ? $data['disable_annotation_drawing_mode_panel'] : false;
        $this->container['image_quality'] = isset($data['image_quality']) ? $data['image_quality'] : 10;
        $this->container['print_quality'] = isset($data['print_quality']) ? $data['print_quality'] : null;
        $this->container['enable_documents_drop'] = isset($data['enable_documents_drop']) ? $data['enable_documents_drop'] : true;
        $this->container['ajax_custom_headers'] = isset($data['ajax_custom_headers']) ? $data['ajax_custom_headers'] : '';
        $this->container['file_download_custom_headers'] = isset($data['file_download_custom_headers']) ? $data['file_download_custom_headers'] : '';
        $this->container['text_search_max_results'] = isset($data['text_search_max_results']) ? $data['text_search_max_results'] : 100;
        $this->container['max_upload_size'] = isset($data['max_upload_size']) ? $data['max_upload_size'] : 10485760;
        $this->container['max_download_size'] = isset($data['max_download_size']) ? $data['max_download_size'] : 10485760;
        $this->container['max_pages'] = isset($data['max_pages']) ? $data['max_pages'] : 3000;
        $this->container['certificates'] = isset($data['certificates']) ? $data['certificates'] : null;
        $this->container['extra_features'] = isset($data['extra_features']) ? $data['extra_features'] : '';
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets timeout
     *
     * @return int|null
     */
    public function getTimeout()
    {
        return $this->container['timeout'];
    }

    /**
     * Sets timeout
     *
     * @param int|null $timeout Specifies the amount of time, in minutes, allowed between requests before the DocuVieware session-state provider terminates the session.<br />
     *
     * @return $this
     */
    public function setTimeout($timeout)
    {
        $this->container['timeout'] = $timeout;

        return $this;
    }

    /**
     * Gets control_id
     *
     * @return string|null
     */
    public function getControlId()
    {
        return $this->container['control_id'];
    }

    /**
     * Sets control_id
     *
     * @param string|null $control_id Specifies client the identifier associated with the control.
     *
     * @return $this
     */
    public function setControlId($control_id)
    {
        $this->container['control_id'] = $control_id;

        return $this;
    }

    /**
     * Gets show_logo
     *
     * @return bool|null
     */
    public function getShowLogo()
    {
        return $this->container['show_logo'];
    }

    /**
     * Sets show_logo
     *
     * @param bool|null $show_logo Specifies if the DocuVieware logo is displayed in the toolbar.
     *
     * @return $this
     */
    public function setShowLogo($show_logo)
    {
        $this->container['show_logo'] = $show_logo;

        return $this;
    }

    /**
     * Gets remote_ip
     *
     * @return string|null
     */
    public function getRemoteIp()
    {
        return $this->container['remote_ip'];
    }

    /**
     * Sets remote_ip
     *
     * @param string|null $remote_ip Specifies the remote IP. This property can be leaved empty if user requests don't need to be traced.
     *
     * @return $this
     */
    public function setRemoteIp($remote_ip)
    {
        $this->container['remote_ip'] = $remote_ip;

        return $this;
    }

    /**
     * Gets file_hosting_uri
     *
     * @return string|null
     */
    public function getFileHostingUri()
    {
        return $this->container['file_hosting_uri'];
    }

    /**
     * Sets file_hosting_uri
     *
     * @param string|null $file_hosting_uri file_hosting_uri
     *
     * @return $this
     */
    public function setFileHostingUri($file_hosting_uri)
    {
        $this->container['file_hosting_uri'] = $file_hosting_uri;

        return $this;
    }

    /**
     * Gets document_uri
     *
     * @return string|null
     */
    public function getDocumentUri()
    {
        return $this->container['document_uri'];
    }

    /**
     * Sets document_uri
     *
     * @param string|null $document_uri Specifies the URI of a document to load into the control.  This can be an empty string if a document is already loaded.  Use the prefix 'fileid:' to load a document from a file ID handled by PassportPDF. ie: 'fileid:00000-00000-00000-00000-00000'.
     *
     * @return $this
     */
    public function setDocumentUri($document_uri)
    {
        $this->container['document_uri'] = $document_uri;

        return $this;
    }

    /**
     * Gets document_file_name
     *
     * @return string|null
     */
    public function getDocumentFileName()
    {
        return $this->container['document_file_name'];
    }

    /**
     * Sets document_file_name
     *
     * @param string|null $document_file_name Specifies the file name of the input document. The file name can help to determine the input document format.  Default value is an empty string.
     *
     * @return $this
     */
    public function setDocumentFileName($document_file_name)
    {
        $this->container['document_file_name'] = $document_file_name;

        return $this;
    }

    /**
     * Gets disable_download_progress
     *
     * @return bool|null
     */
    public function getDisableDownloadProgress()
    {
        return $this->container['disable_download_progress'];
    }

    /**
     * Sets disable_download_progress
     *
     * @param bool|null $disable_download_progress A flag specifying if the control should display a loading progress status bar to the end user while a document is being loaded.
     *
     * @return $this
     */
    public function setDisableDownloadProgress($disable_download_progress)
    {
        $this->container['disable_download_progress'] = $disable_download_progress;

        return $this;
    }

    /**
     * Gets document_alignment
     *
     * @return \OpenAPI\Client\Model\DocumentAlignment|null
     */
    public function getDocumentAlignment()
    {
        return $this->container['document_alignment'];
    }

    /**
     * Sets document_alignment
     *
     * @param \OpenAPI\Client\Model\DocumentAlignment|null $document_alignment document_alignment
     *
     * @return $this
     */
    public function setDocumentAlignment($document_alignment)
    {
        $this->container['document_alignment'] = $document_alignment;

        return $this;
    }

    /**
     * Gets document_position
     *
     * @return \OpenAPI\Client\Model\DocumentPosition|null
     */
    public function getDocumentPosition()
    {
        return $this->container['document_position'];
    }

    /**
     * Sets document_position
     *
     * @param \OpenAPI\Client\Model\DocumentPosition|null $document_position document_position
     *
     * @return $this
     */
    public function setDocumentPosition($document_position)
    {
        $this->container['document_position'] = $document_position;

        return $this;
    }

    /**
     * Gets enable_gd_picture_annotations
     *
     * @return bool|null
     */
    public function getEnableGdPictureAnnotations()
    {
        return $this->container['enable_gd_picture_annotations'];
    }

    /**
     * Sets enable_gd_picture_annotations
     *
     * @param bool|null $enable_gd_picture_annotations Specifies if GdPicture/XMP annotations support is activated.
     *
     * @return $this
     */
    public function setEnableGdPictureAnnotations($enable_gd_picture_annotations)
    {
        $this->container['enable_gd_picture_annotations'] = $enable_gd_picture_annotations;

        return $this;
    }

    /**
     * Gets disable_annotation_printing
     *
     * @return bool|null
     */
    public function getDisableAnnotationPrinting()
    {
        return $this->container['disable_annotation_printing'];
    }

    /**
     * Sets disable_annotation_printing
     *
     * @param bool|null $disable_annotation_printing Specifies whether printing support is disabled for annotations.
     *
     * @return $this
     */
    public function setDisableAnnotationPrinting($disable_annotation_printing)
    {
        $this->container['disable_annotation_printing'] = $disable_annotation_printing;

        return $this;
    }

    /**
     * Gets enable_form_fields_edition
     *
     * @return bool|null
     */
    public function getEnableFormFieldsEdition()
    {
        return $this->container['enable_form_fields_edition'];
    }

    /**
     * Sets enable_form_fields_edition
     *
     * @param bool|null $enable_form_fields_edition Specifies whether form fields can be edited into the client browser or not.
     *
     * @return $this
     */
    public function setEnableFormFieldsEdition($enable_form_fields_edition)
    {
        $this->container['enable_form_fields_edition'] = $enable_form_fields_edition;

        return $this;
    }

    /**
     * Gets annotation_editor_mode
     *
     * @return bool|null
     */
    public function getAnnotationEditorMode()
    {
        return $this->container['annotation_editor_mode'];
    }

    /**
     * Sets annotation_editor_mode
     *
     * @param bool|null $annotation_editor_mode Specifies the editor mode for the GdPicture/XMP annotation support.<br />
     *
     * @return $this
     */
    public function setAnnotationEditorMode($annotation_editor_mode)
    {
        $this->container['annotation_editor_mode'] = $annotation_editor_mode;

        return $this;
    }

    /**
     * Gets link_annotation_click_behaviour
     *
     * @return \OpenAPI\Client\Model\LinkAnnotationClickBehaviour|null
     */
    public function getLinkAnnotationClickBehaviour()
    {
        return $this->container['link_annotation_click_behaviour'];
    }

    /**
     * Sets link_annotation_click_behaviour
     *
     * @param \OpenAPI\Client\Model\LinkAnnotationClickBehaviour|null $link_annotation_click_behaviour link_annotation_click_behaviour
     *
     * @return $this
     */
    public function setLinkAnnotationClickBehaviour($link_annotation_click_behaviour)
    {
        $this->container['link_annotation_click_behaviour'] = $link_annotation_click_behaviour;

        return $this;
    }

    /**
     * Gets zoom
     *
     * @return double|null
     */
    public function getZoom()
    {
        return $this->container['zoom'];
    }

    /**
     * Sets zoom
     *
     * @param double|null $zoom Specifies the current factor of zoom applied during page rendering operations: 1 for 100%, 1.5 for 150%, 2 for 200%...
     *
     * @return $this
     */
    public function setZoom($zoom)
    {
        $this->container['zoom'] = $zoom;

        return $this;
    }

    /**
     * Gets zoom_mode
     *
     * @return \OpenAPI\Client\Model\ViewerZoomMode|null
     */
    public function getZoomMode()
    {
        return $this->container['zoom_mode'];
    }

    /**
     * Sets zoom_mode
     *
     * @param \OpenAPI\Client\Model\ViewerZoomMode|null $zoom_mode zoom_mode
     *
     * @return $this
     */
    public function setZoomMode($zoom_mode)
    {
        $this->container['zoom_mode'] = $zoom_mode;

        return $this;
    }

    /**
     * Gets open_zoom_mode
     *
     * @return \OpenAPI\Client\Model\ViewerZoomMode|null
     */
    public function getOpenZoomMode()
    {
        return $this->container['open_zoom_mode'];
    }

    /**
     * Sets open_zoom_mode
     *
     * @param \OpenAPI\Client\Model\ViewerZoomMode|null $open_zoom_mode open_zoom_mode
     *
     * @return $this
     */
    public function setOpenZoomMode($open_zoom_mode)
    {
        $this->container['open_zoom_mode'] = $open_zoom_mode;

        return $this;
    }

    /**
     * Gets view_rotation
     *
     * @return \OpenAPI\Client\Model\RotateFlip|null
     */
    public function getViewRotation()
    {
        return $this->container['view_rotation'];
    }

    /**
     * Sets view_rotation
     *
     * @param \OpenAPI\Client\Model\RotateFlip|null $view_rotation view_rotation
     *
     * @return $this
     */
    public function setViewRotation($view_rotation)
    {
        $this->container['view_rotation'] = $view_rotation;

        return $this;
    }

    /**
     * Gets page_rotation
     *
     * @return \OpenAPI\Client\Model\RotateFlip|null
     */
    public function getPageRotation()
    {
        return $this->container['page_rotation'];
    }

    /**
     * Sets page_rotation
     *
     * @param \OpenAPI\Client\Model\RotateFlip|null $page_rotation page_rotation
     *
     * @return $this
     */
    public function setPageRotation($page_rotation)
    {
        $this->container['page_rotation'] = $page_rotation;

        return $this;
    }

    /**
     * Gets zoom_step
     *
     * @return int|null
     */
    public function getZoomStep()
    {
        return $this->container['zoom_step'];
    }

    /**
     * Sets zoom_step
     *
     * @param int|null $zoom_step Defines the percentage of increasing or decreasing level of zoom for 'Zoom In' and 'Zoom Out' operations.
     *
     * @return $this
     */
    public function setZoomStep($zoom_step)
    {
        $this->container['zoom_step'] = $zoom_step;

        return $this;
    }

    /**
     * Gets scroll_bars
     *
     * @return bool|null
     */
    public function getScrollBars()
    {
        return $this->container['scroll_bars'];
    }

    /**
     * Sets scroll_bars
     *
     * @param bool|null $scroll_bars Specifies whether scrollbars can be displayed or not within the viewer.<br />
     *
     * @return $this
     */
    public function setScrollBars($scroll_bars)
    {
        $this->container['scroll_bars'] = $scroll_bars;

        return $this;
    }

    /**
     * Gets force_scroll_bars
     *
     * @return bool|null
     */
    public function getForceScrollBars()
    {
        return $this->container['force_scroll_bars'];
    }

    /**
     * Sets force_scroll_bars
     *
     * @param bool|null $force_scroll_bars Specifies whether the viewer shall always show scrollbars.
     *
     * @return $this
     */
    public function setForceScrollBars($force_scroll_bars)
    {
        $this->container['force_scroll_bars'] = $force_scroll_bars;

        return $this;
    }

    /**
     * Gets page_view_mode
     *
     * @return \OpenAPI\Client\Model\PageViewMode|null
     */
    public function getPageViewMode()
    {
        return $this->container['page_view_mode'];
    }

    /**
     * Sets page_view_mode
     *
     * @param \OpenAPI\Client\Model\PageViewMode|null $page_view_mode page_view_mode
     *
     * @return $this
     */
    public function setPageViewMode($page_view_mode)
    {
        $this->container['page_view_mode'] = $page_view_mode;

        return $this;
    }

    /**
     * Gets enable_text_selection
     *
     * @return bool|null
     */
    public function getEnableTextSelection()
    {
        return $this->container['enable_text_selection'];
    }

    /**
     * Sets enable_text_selection
     *
     * @param bool|null $enable_text_selection Specifies if text selection is permitted.
     *
     * @return $this
     */
    public function setEnableTextSelection($enable_text_selection)
    {
        $this->container['enable_text_selection'] = $enable_text_selection;

        return $this;
    }

    /**
     * Gets enable_text_selection_annotation
     *
     * @return bool|null
     */
    public function getEnableTextSelectionAnnotation()
    {
        return $this->container['enable_text_selection_annotation'];
    }

    /**
     * Sets enable_text_selection_annotation
     *
     * @param bool|null $enable_text_selection_annotation Specifies whether the selected text context menu options should contain annotations entries.
     *
     * @return $this
     */
    public function setEnableTextSelectionAnnotation($enable_text_selection_annotation)
    {
        $this->container['enable_text_selection_annotation'] = $enable_text_selection_annotation;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return \OpenAPI\Client\Model\DocuViewareLocale|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param \OpenAPI\Client\Model\DocuViewareLocale|null $locale locale
     *
     * @return $this
     */
    public function setLocale($locale)
    {
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets user_languages
     *
     * @return string[]|null
     */
    public function getUserLanguages()
    {
        return $this->container['user_languages'];
    }

    /**
     * Sets user_languages
     *
     * @param string[]|null $user_languages Specifies the different languages used by the user's browser.
     *
     * @return $this
     */
    public function setUserLanguages($user_languages)
    {
        $this->container['user_languages'] = $user_languages;

        return $this;
    }

    /**
     * Gets control_width
     *
     * @return string|null
     */
    public function getControlWidth()
    {
        return $this->container['control_width'];
    }

    /**
     * Sets control_width
     *
     * @param string|null $control_width Specifies the width of the control within its container.
     *
     * @return $this
     */
    public function setControlWidth($control_width)
    {
        $this->container['control_width'] = $control_width;

        return $this;
    }

    /**
     * Gets control_height
     *
     * @return string|null
     */
    public function getControlHeight()
    {
        return $this->container['control_height'];
    }

    /**
     * Sets control_height
     *
     * @param string|null $control_height Specifies, the height of the control within its container.
     *
     * @return $this
     */
    public function setControlHeight($control_height)
    {
        $this->container['control_height'] = $control_height;

        return $this;
    }

    /**
     * Gets annotation_drop_shadow
     *
     * @return bool|null
     */
    public function getAnnotationDropShadow()
    {
        return $this->container['annotation_drop_shadow'];
    }

    /**
     * Sets annotation_drop_shadow
     *
     * @param bool|null $annotation_drop_shadow Specifies whether GdPicture/XMP annotations are rendered with a drop shadow effect.
     *
     * @return $this
     */
    public function setAnnotationDropShadow($annotation_drop_shadow)
    {
        $this->container['annotation_drop_shadow'] = $annotation_drop_shadow;

        return $this;
    }

    /**
     * Gets allow_print
     *
     * @return bool|null
     */
    public function getAllowPrint()
    {
        return $this->container['allow_print'];
    }

    /**
     * Sets allow_print
     *
     * @param bool|null $allow_print Specifies whether printing is allowed.
     *
     * @return $this
     */
    public function setAllowPrint($allow_print)
    {
        $this->container['allow_print'] = $allow_print;

        return $this;
    }

    /**
     * Gets allow_upload
     *
     * @return bool|null
     */
    public function getAllowUpload()
    {
        return $this->container['allow_upload'];
    }

    /**
     * Sets allow_upload
     *
     * @param bool|null $allow_upload Specifies whether file upload is allowed.
     *
     * @return $this
     */
    public function setAllowUpload($allow_upload)
    {
        $this->container['allow_upload'] = $allow_upload;

        return $this;
    }

    /**
     * Gets enable_multiple_thumbnail_selection
     *
     * @return bool|null
     */
    public function getEnableMultipleThumbnailSelection()
    {
        return $this->container['enable_multiple_thumbnail_selection'];
    }

    /**
     * Sets enable_multiple_thumbnail_selection
     *
     * @param bool|null $enable_multiple_thumbnail_selection Specifies whether multiple thumbnails selection is allowed.
     *
     * @return $this
     */
    public function setEnableMultipleThumbnailSelection($enable_multiple_thumbnail_selection)
    {
        $this->container['enable_multiple_thumbnail_selection'] = $enable_multiple_thumbnail_selection;

        return $this;
    }

    /**
     * Gets enable_thumbnail_drag_drop
     *
     * @return bool|null
     */
    public function getEnableThumbnailDragDrop()
    {
        return $this->container['enable_thumbnail_drag_drop'];
    }

    /**
     * Sets enable_thumbnail_drag_drop
     *
     * @param bool|null $enable_thumbnail_drag_drop Specifies whether the thumbnails can be moved by drag and drop.
     *
     * @return $this
     */
    public function setEnableThumbnailDragDrop($enable_thumbnail_drag_drop)
    {
        $this->container['enable_thumbnail_drag_drop'] = $enable_thumbnail_drag_drop;

        return $this;
    }

    /**
     * Gets enable_file_upload_button
     *
     * @return bool|null
     */
    public function getEnableFileUploadButton()
    {
        return $this->container['enable_file_upload_button'];
    }

    /**
     * Sets enable_file_upload_button
     *
     * @param bool|null $enable_file_upload_button Specifies whether the open button shall be enabled.
     *
     * @return $this
     */
    public function setEnableFileUploadButton($enable_file_upload_button)
    {
        $this->container['enable_file_upload_button'] = $enable_file_upload_button;

        return $this;
    }

    /**
     * Gets enable_load_from_uri_button
     *
     * @return bool|null
     */
    public function getEnableLoadFromUriButton()
    {
        return $this->container['enable_load_from_uri_button'];
    }

    /**
     * Sets enable_load_from_uri_button
     *
     * @param bool|null $enable_load_from_uri_button Specifies whether the 'open from uri' button shall be enabled.
     *
     * @return $this
     */
    public function setEnableLoadFromUriButton($enable_load_from_uri_button)
    {
        $this->container['enable_load_from_uri_button'] = $enable_load_from_uri_button;

        return $this;
    }

    /**
     * Gets enable_save_button
     *
     * @return bool|null
     */
    public function getEnableSaveButton()
    {
        return $this->container['enable_save_button'];
    }

    /**
     * Sets enable_save_button
     *
     * @param bool|null $enable_save_button Specifies whether the save button shall be enabled.
     *
     * @return $this
     */
    public function setEnableSaveButton($enable_save_button)
    {
        $this->container['enable_save_button'] = $enable_save_button;

        return $this;
    }

    /**
     * Gets enable_pages_navigation_buttons
     *
     * @return bool|null
     */
    public function getEnablePagesNavigationButtons()
    {
        return $this->container['enable_pages_navigation_buttons'];
    }

    /**
     * Sets enable_pages_navigation_buttons
     *
     * @param bool|null $enable_pages_navigation_buttons Specifies whether the save button shall be enabled.
     *
     * @return $this
     */
    public function setEnablePagesNavigationButtons($enable_pages_navigation_buttons)
    {
        $this->container['enable_pages_navigation_buttons'] = $enable_pages_navigation_buttons;

        return $this;
    }

    /**
     * Gets enable_print_button
     *
     * @return bool|null
     */
    public function getEnablePrintButton()
    {
        return $this->container['enable_print_button'];
    }

    /**
     * Sets enable_print_button
     *
     * @param bool|null $enable_print_button Specifies whether the print button shall be enabled.
     *
     * @return $this
     */
    public function setEnablePrintButton($enable_print_button)
    {
        $this->container['enable_print_button'] = $enable_print_button;

        return $this;
    }

    /**
     * Gets enable_print_to_pdf
     *
     * @return bool|null
     */
    public function getEnablePrintToPdf()
    {
        return $this->container['enable_print_to_pdf'];
    }

    /**
     * Sets enable_print_to_pdf
     *
     * @param bool|null $enable_print_to_pdf Specifies whether the print to pdf option shall be enabled.
     *
     * @return $this
     */
    public function setEnablePrintToPdf($enable_print_to_pdf)
    {
        $this->container['enable_print_to_pdf'] = $enable_print_to_pdf;

        return $this;
    }

    /**
     * Gets enable_fit_width_button
     *
     * @return bool|null
     */
    public function getEnableFitWidthButton()
    {
        return $this->container['enable_fit_width_button'];
    }

    /**
     * Sets enable_fit_width_button
     *
     * @param bool|null $enable_fit_width_button Specifies whether the fit width button shall be enabled.
     *
     * @return $this
     */
    public function setEnableFitWidthButton($enable_fit_width_button)
    {
        $this->container['enable_fit_width_button'] = $enable_fit_width_button;

        return $this;
    }

    /**
     * Gets enable_zoom100_button
     *
     * @return bool|null
     */
    public function getEnableZoom100Button()
    {
        return $this->container['enable_zoom100_button'];
    }

    /**
     * Sets enable_zoom100_button
     *
     * @param bool|null $enable_zoom100_button Specifies whether the fit original size button shall be enabled.
     *
     * @return $this
     */
    public function setEnableZoom100Button($enable_zoom100_button)
    {
        $this->container['enable_zoom100_button'] = $enable_zoom100_button;

        return $this;
    }

    /**
     * Gets enable_mouse_mode_buttons
     *
     * @return bool|null
     */
    public function getEnableMouseModeButtons()
    {
        return $this->container['enable_mouse_mode_buttons'];
    }

    /**
     * Sets enable_mouse_mode_buttons
     *
     * @param bool|null $enable_mouse_mode_buttons Specifies whether the mouse mode button group shall be enabled.
     *
     * @return $this
     */
    public function setEnableMouseModeButtons($enable_mouse_mode_buttons)
    {
        $this->container['enable_mouse_mode_buttons'] = $enable_mouse_mode_buttons;

        return $this;
    }

    /**
     * Gets enable_pan_mode_button
     *
     * @return bool|null
     */
    public function getEnablePanModeButton()
    {
        return $this->container['enable_pan_mode_button'];
    }

    /**
     * Sets enable_pan_mode_button
     *
     * @param bool|null $enable_pan_mode_button Specifies whether the pan mode button shall be enabled.
     *
     * @return $this
     */
    public function setEnablePanModeButton($enable_pan_mode_button)
    {
        $this->container['enable_pan_mode_button'] = $enable_pan_mode_button;

        return $this;
    }

    /**
     * Gets enable_select_mode_button
     *
     * @return bool|null
     */
    public function getEnableSelectModeButton()
    {
        return $this->container['enable_select_mode_button'];
    }

    /**
     * Sets enable_select_mode_button
     *
     * @param bool|null $enable_select_mode_button Specifies whether the select mode button shall be enabled.
     *
     * @return $this
     */
    public function setEnableSelectModeButton($enable_select_mode_button)
    {
        $this->container['enable_select_mode_button'] = $enable_select_mode_button;

        return $this;
    }

    /**
     * Gets enable_marquee_zoom_mode_button
     *
     * @return bool|null
     */
    public function getEnableMarqueeZoomModeButton()
    {
        return $this->container['enable_marquee_zoom_mode_button'];
    }

    /**
     * Sets enable_marquee_zoom_mode_button
     *
     * @param bool|null $enable_marquee_zoom_mode_button Specifies whether the marquee zoom mode button shall be enabled.
     *
     * @return $this
     */
    public function setEnableMarqueeZoomModeButton($enable_marquee_zoom_mode_button)
    {
        $this->container['enable_marquee_zoom_mode_button'] = $enable_marquee_zoom_mode_button;

        return $this;
    }

    /**
     * Gets enable_full_screen_button
     *
     * @return bool|null
     */
    public function getEnableFullScreenButton()
    {
        return $this->container['enable_full_screen_button'];
    }

    /**
     * Sets enable_full_screen_button
     *
     * @param bool|null $enable_full_screen_button Specifies whether the fullscreen button shall be enabled.
     *
     * @return $this
     */
    public function setEnableFullScreenButton($enable_full_screen_button)
    {
        $this->container['enable_full_screen_button'] = $enable_full_screen_button;

        return $this;
    }

    /**
     * Gets enable_fit_page_button
     *
     * @return bool|null
     */
    public function getEnableFitPageButton()
    {
        return $this->container['enable_fit_page_button'];
    }

    /**
     * Sets enable_fit_page_button
     *
     * @param bool|null $enable_fit_page_button Specifies whether the 'Fit Page' button shall be enabled.
     *
     * @return $this
     */
    public function setEnableFitPageButton($enable_fit_page_button)
    {
        $this->container['enable_fit_page_button'] = $enable_fit_page_button;

        return $this;
    }

    /**
     * Gets enable_zoom_buttons
     *
     * @return bool|null
     */
    public function getEnableZoomButtons()
    {
        return $this->container['enable_zoom_buttons'];
    }

    /**
     * Sets enable_zoom_buttons
     *
     * @param bool|null $enable_zoom_buttons Specifies whether the zoom button group shall be enabled.
     *
     * @return $this
     */
    public function setEnableZoomButtons($enable_zoom_buttons)
    {
        $this->container['enable_zoom_buttons'] = $enable_zoom_buttons;

        return $this;
    }

    /**
     * Gets enable_page_view_buttons
     *
     * @return bool|null
     */
    public function getEnablePageViewButtons()
    {
        return $this->container['enable_page_view_buttons'];
    }

    /**
     * Sets enable_page_view_buttons
     *
     * @param bool|null $enable_page_view_buttons Specifies whether the page view mode button shall be enabled.
     *
     * @return $this
     */
    public function setEnablePageViewButtons($enable_page_view_buttons)
    {
        $this->container['enable_page_view_buttons'] = $enable_page_view_buttons;

        return $this;
    }

    /**
     * Gets rotate_buttons_mode
     *
     * @return \OpenAPI\Client\Model\RotateMode|null
     */
    public function getRotateButtonsMode()
    {
        return $this->container['rotate_buttons_mode'];
    }

    /**
     * Sets rotate_buttons_mode
     *
     * @param \OpenAPI\Client\Model\RotateMode|null $rotate_buttons_mode rotate_buttons_mode
     *
     * @return $this
     */
    public function setRotateButtonsMode($rotate_buttons_mode)
    {
        $this->container['rotate_buttons_mode'] = $rotate_buttons_mode;

        return $this;
    }

    /**
     * Gets enable_rotate_buttons
     *
     * @return bool|null
     */
    public function getEnableRotateButtons()
    {
        return $this->container['enable_rotate_buttons'];
    }

    /**
     * Sets enable_rotate_buttons
     *
     * @param bool|null $enable_rotate_buttons Specifies whether the rotation button group shall be enabled.
     *
     * @return $this
     */
    public function setEnableRotateButtons($enable_rotate_buttons)
    {
        $this->container['enable_rotate_buttons'] = $enable_rotate_buttons;

        return $this;
    }

    /**
     * Gets enable_annotation_action_buttons
     *
     * @return bool|null
     */
    public function getEnableAnnotationActionButtons()
    {
        return $this->container['enable_annotation_action_buttons'];
    }

    /**
     * Sets enable_annotation_action_buttons
     *
     * @param bool|null $enable_annotation_action_buttons Specifies whether the action buttons shall be enabled when an annotation is selected.  This property is only effective if EnableGdPictureAnnotations is set to true.
     *
     * @return $this
     */
    public function setEnableAnnotationActionButtons($enable_annotation_action_buttons)
    {
        $this->container['enable_annotation_action_buttons'] = $enable_annotation_action_buttons;

        return $this;
    }

    /**
     * Gets enable_selected_text_annotation_edition
     *
     * @return bool|null
     */
    public function getEnableSelectedTextAnnotationEdition()
    {
        return $this->container['enable_selected_text_annotation_edition'];
    }

    /**
     * Sets enable_selected_text_annotation_edition
     *
     * @param bool|null $enable_selected_text_annotation_edition Specifies whether the selected text annotations shall be editable.
     *
     * @return $this
     */
    public function setEnableSelectedTextAnnotationEdition($enable_selected_text_annotation_edition)
    {
        $this->container['enable_selected_text_annotation_edition'] = $enable_selected_text_annotation_edition;

        return $this;
    }

    /**
     * Gets enable_rectangle_highlighter_annotation_button
     *
     * @return bool|null
     */
    public function getEnableRectangleHighlighterAnnotationButton()
    {
        return $this->container['enable_rectangle_highlighter_annotation_button'];
    }

    /**
     * Sets enable_rectangle_highlighter_annotation_button
     *
     * @param bool|null $enable_rectangle_highlighter_annotation_button Specifies whether the rectangle highlighter annotation button shall be enabled. <br />  This property is only effective if EnableGdPictureAnnotations is set to true.
     *
     * @return $this
     */
    public function setEnableRectangleHighlighterAnnotationButton($enable_rectangle_highlighter_annotation_button)
    {
        $this->container['enable_rectangle_highlighter_annotation_button'] = $enable_rectangle_highlighter_annotation_button;

        return $this;
    }

    /**
     * Gets enable_freehand_highlighter_annotation_button
     *
     * @return bool|null
     */
    public function getEnableFreehandHighlighterAnnotationButton()
    {
        return $this->container['enable_freehand_highlighter_annotation_button'];
    }

    /**
     * Sets enable_freehand_highlighter_annotation_button
     *
     * @param bool|null $enable_freehand_highlighter_annotation_button Specifies whether the freehand highlighter annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
     *
     * @return $this
     */
    public function setEnableFreehandHighlighterAnnotationButton($enable_freehand_highlighter_annotation_button)
    {
        $this->container['enable_freehand_highlighter_annotation_button'] = $enable_freehand_highlighter_annotation_button;

        return $this;
    }

    /**
     * Gets enable_rubber_stamp_annotation_button
     *
     * @return bool|null
     */
    public function getEnableRubberStampAnnotationButton()
    {
        return $this->container['enable_rubber_stamp_annotation_button'];
    }

    /**
     * Sets enable_rubber_stamp_annotation_button
     *
     * @param bool|null $enable_rubber_stamp_annotation_button Specifies whether the rubber stamp annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
     *
     * @return $this
     */
    public function setEnableRubberStampAnnotationButton($enable_rubber_stamp_annotation_button)
    {
        $this->container['enable_rubber_stamp_annotation_button'] = $enable_rubber_stamp_annotation_button;

        return $this;
    }

    /**
     * Gets enable_rectangle_annotation_button
     *
     * @return bool|null
     */
    public function getEnableRectangleAnnotationButton()
    {
        return $this->container['enable_rectangle_annotation_button'];
    }

    /**
     * Sets enable_rectangle_annotation_button
     *
     * @param bool|null $enable_rectangle_annotation_button Specifies whether the rectangle annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
     *
     * @return $this
     */
    public function setEnableRectangleAnnotationButton($enable_rectangle_annotation_button)
    {
        $this->container['enable_rectangle_annotation_button'] = $enable_rectangle_annotation_button;

        return $this;
    }

    /**
     * Gets enable_ellipse_annotation_button
     *
     * @return bool|null
     */
    public function getEnableEllipseAnnotationButton()
    {
        return $this->container['enable_ellipse_annotation_button'];
    }

    /**
     * Sets enable_ellipse_annotation_button
     *
     * @param bool|null $enable_ellipse_annotation_button Specifies whether the ellipse annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
     *
     * @return $this
     */
    public function setEnableEllipseAnnotationButton($enable_ellipse_annotation_button)
    {
        $this->container['enable_ellipse_annotation_button'] = $enable_ellipse_annotation_button;

        return $this;
    }

    /**
     * Gets enable_line_annotation_button
     *
     * @return bool|null
     */
    public function getEnableLineAnnotationButton()
    {
        return $this->container['enable_line_annotation_button'];
    }

    /**
     * Sets enable_line_annotation_button
     *
     * @param bool|null $enable_line_annotation_button Specifies whether the line annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
     *
     * @return $this
     */
    public function setEnableLineAnnotationButton($enable_line_annotation_button)
    {
        $this->container['enable_line_annotation_button'] = $enable_line_annotation_button;

        return $this;
    }

    /**
     * Gets enable_connected_line_annotation_button
     *
     * @return bool|null
     */
    public function getEnableConnectedLineAnnotationButton()
    {
        return $this->container['enable_connected_line_annotation_button'];
    }

    /**
     * Sets enable_connected_line_annotation_button
     *
     * @param bool|null $enable_connected_line_annotation_button Specifies whether the connected line annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
     *
     * @return $this
     */
    public function setEnableConnectedLineAnnotationButton($enable_connected_line_annotation_button)
    {
        $this->container['enable_connected_line_annotation_button'] = $enable_connected_line_annotation_button;

        return $this;
    }

    /**
     * Gets enable_freehand_annotation_button
     *
     * @return bool|null
     */
    public function getEnableFreehandAnnotationButton()
    {
        return $this->container['enable_freehand_annotation_button'];
    }

    /**
     * Sets enable_freehand_annotation_button
     *
     * @param bool|null $enable_freehand_annotation_button Specifies whether the freehand annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
     *
     * @return $this
     */
    public function setEnableFreehandAnnotationButton($enable_freehand_annotation_button)
    {
        $this->container['enable_freehand_annotation_button'] = $enable_freehand_annotation_button;

        return $this;
    }

    /**
     * Gets enable_line_arrow_annotation_button
     *
     * @return bool|null
     */
    public function getEnableLineArrowAnnotationButton()
    {
        return $this->container['enable_line_arrow_annotation_button'];
    }

    /**
     * Sets enable_line_arrow_annotation_button
     *
     * @param bool|null $enable_line_arrow_annotation_button Specifies whether the line arrow annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
     *
     * @return $this
     */
    public function setEnableLineArrowAnnotationButton($enable_line_arrow_annotation_button)
    {
        $this->container['enable_line_arrow_annotation_button'] = $enable_line_arrow_annotation_button;

        return $this;
    }

    /**
     * Gets enable_link_annotation_button
     *
     * @return bool|null
     */
    public function getEnableLinkAnnotationButton()
    {
        return $this->container['enable_link_annotation_button'];
    }

    /**
     * Sets enable_link_annotation_button
     *
     * @param bool|null $enable_link_annotation_button Specifies whether the link annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
     *
     * @return $this
     */
    public function setEnableLinkAnnotationButton($enable_link_annotation_button)
    {
        $this->container['enable_link_annotation_button'] = $enable_link_annotation_button;

        return $this;
    }

    /**
     * Gets enable_ruler_annotation_button
     *
     * @return bool|null
     */
    public function getEnableRulerAnnotationButton()
    {
        return $this->container['enable_ruler_annotation_button'];
    }

    /**
     * Sets enable_ruler_annotation_button
     *
     * @param bool|null $enable_ruler_annotation_button Specifies whether the ruler annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
     *
     * @return $this
     */
    public function setEnableRulerAnnotationButton($enable_ruler_annotation_button)
    {
        $this->container['enable_ruler_annotation_button'] = $enable_ruler_annotation_button;

        return $this;
    }

    /**
     * Gets enable_poly_ruler_annotation_button
     *
     * @return bool|null
     */
    public function getEnablePolyRulerAnnotationButton()
    {
        return $this->container['enable_poly_ruler_annotation_button'];
    }

    /**
     * Sets enable_poly_ruler_annotation_button
     *
     * @param bool|null $enable_poly_ruler_annotation_button enable_poly_ruler_annotation_button
     *
     * @return $this
     */
    public function setEnablePolyRulerAnnotationButton($enable_poly_ruler_annotation_button)
    {
        $this->container['enable_poly_ruler_annotation_button'] = $enable_poly_ruler_annotation_button;

        return $this;
    }

    /**
     * Gets enable_text_annotation_button
     *
     * @return bool|null
     */
    public function getEnableTextAnnotationButton()
    {
        return $this->container['enable_text_annotation_button'];
    }

    /**
     * Sets enable_text_annotation_button
     *
     * @param bool|null $enable_text_annotation_button Specifies whether the text annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
     *
     * @return $this
     */
    public function setEnableTextAnnotationButton($enable_text_annotation_button)
    {
        $this->container['enable_text_annotation_button'] = $enable_text_annotation_button;

        return $this;
    }

    /**
     * Gets enable_sticky_note_annotation_button
     *
     * @return bool|null
     */
    public function getEnableStickyNoteAnnotationButton()
    {
        return $this->container['enable_sticky_note_annotation_button'];
    }

    /**
     * Sets enable_sticky_note_annotation_button
     *
     * @param bool|null $enable_sticky_note_annotation_button Specifies whether the sticky note annotation button shall be enabled.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
     *
     * @return $this
     */
    public function setEnableStickyNoteAnnotationButton($enable_sticky_note_annotation_button)
    {
        $this->container['enable_sticky_note_annotation_button'] = $enable_sticky_note_annotation_button;

        return $this;
    }

    /**
     * Gets enable_twain_acquisition_button
     *
     * @return bool|null
     */
    public function getEnableTwainAcquisitionButton()
    {
        return $this->container['enable_twain_acquisition_button'];
    }

    /**
     * Sets enable_twain_acquisition_button
     *
     * @param bool|null $enable_twain_acquisition_button Specifies whether the TWAIN acquisition button shall be enabled.
     *
     * @return $this
     */
    public function setEnableTwainAcquisitionButton($enable_twain_acquisition_button)
    {
        $this->container['enable_twain_acquisition_button'] = $enable_twain_acquisition_button;

        return $this;
    }

    /**
     * Gets twain_source_enable_custom_configuration
     *
     * @return bool|null
     */
    public function getTwainSourceEnableCustomConfiguration()
    {
        return $this->container['twain_source_enable_custom_configuration'];
    }

    /**
     * Sets twain_source_enable_custom_configuration
     *
     * @param bool|null $twain_source_enable_custom_configuration Enables the custom configuration support for the TWAIN source.
     *
     * @return $this
     */
    public function setTwainSourceEnableCustomConfiguration($twain_source_enable_custom_configuration)
    {
        $this->container['twain_source_enable_custom_configuration'] = $twain_source_enable_custom_configuration;

        return $this;
    }

    /**
     * Gets twain_source_select_feeder
     *
     * @return bool|null
     */
    public function getTwainSourceSelectFeeder()
    {
        return $this->container['twain_source_select_feeder'];
    }

    /**
     * Sets twain_source_select_feeder
     *
     * @param bool|null $twain_source_select_feeder Specifies whether the TWAIN acquisition source shall acquire from the document feeder or the flatbed.  This property is only effective if TwainSourceSetCustomConfiguration is set to true.
     *
     * @return $this
     */
    public function setTwainSourceSelectFeeder($twain_source_select_feeder)
    {
        $this->container['twain_source_select_feeder'] = $twain_source_select_feeder;

        return $this;
    }

    /**
     * Gets twain_source_bit_depth
     *
     * @return int|null
     */
    public function getTwainSourceBitDepth()
    {
        return $this->container['twain_source_bit_depth'];
    }

    /**
     * Sets twain_source_bit_depth
     *
     * @param int|null $twain_source_bit_depth Specifies the bit depth the TWAIN acquisition source should acquire at. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.
     *
     * @return $this
     */
    public function setTwainSourceBitDepth($twain_source_bit_depth)
    {
        $this->container['twain_source_bit_depth'] = $twain_source_bit_depth;

        return $this;
    }

    /**
     * Gets twain_source_resolution
     *
     * @return int|null
     */
    public function getTwainSourceResolution()
    {
        return $this->container['twain_source_resolution'];
    }

    /**
     * Sets twain_source_resolution
     *
     * @param int|null $twain_source_resolution Specifies the resolution the TWAIN acquisition source should acquire at. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.
     *
     * @return $this
     */
    public function setTwainSourceResolution($twain_source_resolution)
    {
        $this->container['twain_source_resolution'] = $twain_source_resolution;

        return $this;
    }

    /**
     * Gets twain_source_enable_duplex
     *
     * @return bool|null
     */
    public function getTwainSourceEnableDuplex()
    {
        return $this->container['twain_source_enable_duplex'];
    }

    /**
     * Sets twain_source_enable_duplex
     *
     * @param bool|null $twain_source_enable_duplex Specifies whether the TWAIN acquisition source shall enable duplex acquisition. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.
     *
     * @return $this
     */
    public function setTwainSourceEnableDuplex($twain_source_enable_duplex)
    {
        $this->container['twain_source_enable_duplex'] = $twain_source_enable_duplex;

        return $this;
    }

    /**
     * Gets twain_source_hide_ui
     *
     * @return bool|null
     */
    public function getTwainSourceHideUi()
    {
        return $this->container['twain_source_hide_ui'];
    }

    /**
     * Sets twain_source_hide_ui
     *
     * @param bool|null $twain_source_hide_ui Specifies whether the TWAIN acquisition source shall hide or show the device driver user interface before acquisition. <br />  This property is only effective if TwainSourceSetCustomConfiguration is set to true.
     *
     * @return $this
     */
    public function setTwainSourceHideUi($twain_source_hide_ui)
    {
        $this->container['twain_source_hide_ui'] = $twain_source_hide_ui;

        return $this;
    }

    /**
     * Gets free_hand_continuous_drawing_mode
     *
     * @return bool|null
     */
    public function getFreeHandContinuousDrawingMode()
    {
        return $this->container['free_hand_continuous_drawing_mode'];
    }

    /**
     * Sets free_hand_continuous_drawing_mode
     *
     * @param bool|null $free_hand_continuous_drawing_mode Specifies whether the drawing mode for freehand annotation is multi line or not.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
     *
     * @return $this
     */
    public function setFreeHandContinuousDrawingMode($free_hand_continuous_drawing_mode)
    {
        $this->container['free_hand_continuous_drawing_mode'] = $free_hand_continuous_drawing_mode;

        return $this;
    }

    /**
     * Gets show_text_search_snap_in
     *
     * @return bool|null
     */
    public function getShowTextSearchSnapIn()
    {
        return $this->container['show_text_search_snap_in'];
    }

    /**
     * Sets show_text_search_snap_in
     *
     * @param bool|null $show_text_search_snap_in Specifies whether the text search SnapIn is enabled.
     *
     * @return $this
     */
    public function setShowTextSearchSnapIn($show_text_search_snap_in)
    {
        $this->container['show_text_search_snap_in'] = $show_text_search_snap_in;

        return $this;
    }

    /**
     * Gets show_thumbnails_snap_in
     *
     * @return bool|null
     */
    public function getShowThumbnailsSnapIn()
    {
        return $this->container['show_thumbnails_snap_in'];
    }

    /**
     * Sets show_thumbnails_snap_in
     *
     * @param bool|null $show_thumbnails_snap_in Specifies whether the Thumbnails SnapIn is enabled.
     *
     * @return $this
     */
    public function setShowThumbnailsSnapIn($show_thumbnails_snap_in)
    {
        $this->container['show_thumbnails_snap_in'] = $show_thumbnails_snap_in;

        return $this;
    }

    /**
     * Gets show_bookmarks_snap_in
     *
     * @return bool|null
     */
    public function getShowBookmarksSnapIn()
    {
        return $this->container['show_bookmarks_snap_in'];
    }

    /**
     * Sets show_bookmarks_snap_in
     *
     * @param bool|null $show_bookmarks_snap_in Specifies whether the Bookmarks SnapIn is enabled.
     *
     * @return $this
     */
    public function setShowBookmarksSnapIn($show_bookmarks_snap_in)
    {
        $this->container['show_bookmarks_snap_in'] = $show_bookmarks_snap_in;

        return $this;
    }

    /**
     * Gets show_annotations_snap_in
     *
     * @return bool|null
     */
    public function getShowAnnotationsSnapIn()
    {
        return $this->container['show_annotations_snap_in'];
    }

    /**
     * Sets show_annotations_snap_in
     *
     * @param bool|null $show_annotations_snap_in Specifies whether the annotations SnapIn is enabled.
     *
     * @return $this
     */
    public function setShowAnnotationsSnapIn($show_annotations_snap_in)
    {
        $this->container['show_annotations_snap_in'] = $show_annotations_snap_in;

        return $this;
    }

    /**
     * Gets show_annotations_comments_snap_in
     *
     * @return bool|null
     */
    public function getShowAnnotationsCommentsSnapIn()
    {
        return $this->container['show_annotations_comments_snap_in'];
    }

    /**
     * Sets show_annotations_comments_snap_in
     *
     * @param bool|null $show_annotations_comments_snap_in Specifies whether the Annotations Comments SnapIn is enabled.
     *
     * @return $this
     */
    public function setShowAnnotationsCommentsSnapIn($show_annotations_comments_snap_in)
    {
        $this->container['show_annotations_comments_snap_in'] = $show_annotations_comments_snap_in;

        return $this;
    }

    /**
     * Gets show_redaction_snap_in
     *
     * @return bool|null
     */
    public function getShowRedactionSnapIn()
    {
        return $this->container['show_redaction_snap_in'];
    }

    /**
     * Sets show_redaction_snap_in
     *
     * @param bool|null $show_redaction_snap_in Specifies whether the Redaction Snap-In is enabled or not.  <remarks>  Default value is true.  </remarks>
     *
     * @return $this
     */
    public function setShowRedactionSnapIn($show_redaction_snap_in)
    {
        $this->container['show_redaction_snap_in'] = $show_redaction_snap_in;

        return $this;
    }

    /**
     * Gets show_digital_signature_snap_in
     *
     * @return bool|null
     */
    public function getShowDigitalSignatureSnapIn()
    {
        return $this->container['show_digital_signature_snap_in'];
    }

    /**
     * Sets show_digital_signature_snap_in
     *
     * @param bool|null $show_digital_signature_snap_in Specifies whether the Digital Signature Snap-In is enabled or not.  <remarks>  Default value is false.  </remarks>
     *
     * @return $this
     */
    public function setShowDigitalSignatureSnapIn($show_digital_signature_snap_in)
    {
        $this->container['show_digital_signature_snap_in'] = $show_digital_signature_snap_in;

        return $this;
    }

    /**
     * Gets thumbnail_width
     *
     * @return int|null
     */
    public function getThumbnailWidth()
    {
        return $this->container['thumbnail_width'];
    }

    /**
     * Sets thumbnail_width
     *
     * @param int|null $thumbnail_width The width, in pixels, of each thumbnail.
     *
     * @return $this
     */
    public function setThumbnailWidth($thumbnail_width)
    {
        $this->container['thumbnail_width'] = $thumbnail_width;

        return $this;
    }

    /**
     * Gets thumbnail_height
     *
     * @return int|null
     */
    public function getThumbnailHeight()
    {
        return $this->container['thumbnail_height'];
    }

    /**
     * Sets thumbnail_height
     *
     * @param int|null $thumbnail_height The height, in pixels, of each thumbnail.
     *
     * @return $this
     */
    public function setThumbnailHeight($thumbnail_height)
    {
        $this->container['thumbnail_height'] = $thumbnail_height;

        return $this;
    }

    /**
     * Gets snap_in_panel_default_width
     *
     * @return string|null
     */
    public function getSnapInPanelDefaultWidth()
    {
        return $this->container['snap_in_panel_default_width'];
    }

    /**
     * Sets snap_in_panel_default_width
     *
     * @param string|null $snap_in_panel_default_width Specifies the Snap-in panel default width.
     *
     * @return $this
     */
    public function setSnapInPanelDefaultWidth($snap_in_panel_default_width)
    {
        $this->container['snap_in_panel_default_width'] = $snap_in_panel_default_width;

        return $this;
    }

    /**
     * Gets collapsed_snap_in
     *
     * @return bool|null
     */
    public function getCollapsedSnapIn()
    {
        return $this->container['collapsed_snap_in'];
    }

    /**
     * Sets collapsed_snap_in
     *
     * @param bool|null $collapsed_snap_in Specifies whether the Snap-in panel is collapsed or not.
     *
     * @return $this
     */
    public function setCollapsedSnapIn($collapsed_snap_in)
    {
        $this->container['collapsed_snap_in'] = $collapsed_snap_in;

        return $this;
    }

    /**
     * Gets collapse_snapin_on_document_closed
     *
     * @return bool|null
     */
    public function getCollapseSnapinOnDocumentClosed()
    {
        return $this->container['collapse_snapin_on_document_closed'];
    }

    /**
     * Sets collapse_snapin_on_document_closed
     *
     * @param bool|null $collapse_snapin_on_document_closed Specifies whether the Snap-in panel should be automatically collapsed when the displayed document is closed.
     *
     * @return $this
     */
    public function setCollapseSnapinOnDocumentClosed($collapse_snapin_on_document_closed)
    {
        $this->container['collapse_snapin_on_document_closed'] = $collapse_snapin_on_document_closed;

        return $this;
    }

    /**
     * Gets show_snap_in_collapse_button
     *
     * @return bool|null
     */
    public function getShowSnapInCollapseButton()
    {
        return $this->container['show_snap_in_collapse_button'];
    }

    /**
     * Sets show_snap_in_collapse_button
     *
     * @param bool|null $show_snap_in_collapse_button Specifies whether the button that collapses the Snap-in panel is displayed or not.
     *
     * @return $this
     */
    public function setShowSnapInCollapseButton($show_snap_in_collapse_button)
    {
        $this->container['show_snap_in_collapse_button'] = $show_snap_in_collapse_button;

        return $this;
    }

    /**
     * Gets show_snap_in_panel_header
     *
     * @return bool|null
     */
    public function getShowSnapInPanelHeader()
    {
        return $this->container['show_snap_in_panel_header'];
    }

    /**
     * Sets show_snap_in_panel_header
     *
     * @param bool|null $show_snap_in_panel_header Specifies whether the header of the Snap-in panel is displayed or not.
     *
     * @return $this
     */
    public function setShowSnapInPanelHeader($show_snap_in_panel_header)
    {
        $this->container['show_snap_in_panel_header'] = $show_snap_in_panel_header;

        return $this;
    }

    /**
     * Gets show_snap_in_button_strip
     *
     * @return bool|null
     */
    public function getShowSnapInButtonStrip()
    {
        return $this->container['show_snap_in_button_strip'];
    }

    /**
     * Sets show_snap_in_button_strip
     *
     * @param bool|null $show_snap_in_button_strip Specifies whether the Snap-in button strip is displayed or not.
     *
     * @return $this
     */
    public function setShowSnapInButtonStrip($show_snap_in_button_strip)
    {
        $this->container['show_snap_in_button_strip'] = $show_snap_in_button_strip;

        return $this;
    }

    /**
     * Gets show_toolbar
     *
     * @return bool|null
     */
    public function getShowToolbar()
    {
        return $this->container['show_toolbar'];
    }

    /**
     * Sets show_toolbar
     *
     * @param bool|null $show_toolbar Specifies whether the Toolbars are visible or not.
     *
     * @return $this
     */
    public function setShowToolbar($show_toolbar)
    {
        $this->container['show_toolbar'] = $show_toolbar;

        return $this;
    }

    /**
     * Gets toolbar_style
     *
     * @return \OpenAPI\Client\Model\ToolbarStyle|null
     */
    public function getToolbarStyle()
    {
        return $this->container['toolbar_style'];
    }

    /**
     * Sets toolbar_style
     *
     * @param \OpenAPI\Client\Model\ToolbarStyle|null $toolbar_style toolbar_style
     *
     * @return $this
     */
    public function setToolbarStyle($toolbar_style)
    {
        $this->container['toolbar_style'] = $toolbar_style;

        return $this;
    }

    /**
     * Gets toolbar_buttons_spacing
     *
     * @return int|null
     */
    public function getToolbarButtonsSpacing()
    {
        return $this->container['toolbar_buttons_spacing'];
    }

    /**
     * Sets toolbar_buttons_spacing
     *
     * @param int|null $toolbar_buttons_spacing The space, in pixels, between each button of the toolbar.
     *
     * @return $this
     */
    public function setToolbarButtonsSpacing($toolbar_buttons_spacing)
    {
        $this->container['toolbar_buttons_spacing'] = $toolbar_buttons_spacing;

        return $this;
    }

    /**
     * Gets toolbar_height
     *
     * @return int|null
     */
    public function getToolbarHeight()
    {
        return $this->container['toolbar_height'];
    }

    /**
     * Sets toolbar_height
     *
     * @param int|null $toolbar_height The height, in pixels, of the toolbar.
     *
     * @return $this
     */
    public function setToolbarHeight($toolbar_height)
    {
        $this->container['toolbar_height'] = $toolbar_height;

        return $this;
    }

    /**
     * Gets stroke_color
     *
     * @return string|null
     */
    public function getStrokeColor()
    {
        return $this->container['stroke_color'];
    }

    /**
     * Sets stroke_color
     *
     * @param string|null $stroke_color Specifies the color used to stroke viewer elements such borders, toolbar icons and thumbnail text.
     *
     * @return $this
     */
    public function setStrokeColor($stroke_color)
    {
        $this->container['stroke_color'] = $stroke_color;

        return $this;
    }

    /**
     * Gets misc_border_color
     *
     * @return string|null
     */
    public function getMiscBorderColor()
    {
        return $this->container['misc_border_color'];
    }

    /**
     * Sets misc_border_color
     *
     * @param string|null $misc_border_color Specifies the color used to define dropdowns borders, buttons separators, line separators.
     *
     * @return $this
     */
    public function setMiscBorderColor($misc_border_color)
    {
        $this->container['misc_border_color'] = $misc_border_color;

        return $this;
    }

    /**
     * Gets header_color
     *
     * @return string|null
     */
    public function getHeaderColor()
    {
        return $this->container['header_color'];
    }

    /**
     * Sets header_color
     *
     * @param string|null $header_color Specifies the color used in both dialogs and snap-ins headers.
     *
     * @return $this
     */
    public function setHeaderColor($header_color)
    {
        $this->container['header_color'] = $header_color;

        return $this;
    }

    /**
     * Gets panel_back_color
     *
     * @return string|null
     */
    public function getPanelBackColor()
    {
        return $this->container['panel_back_color'];
    }

    /**
     * Sets panel_back_color
     *
     * @param string|null $panel_back_color Specifies the color used in both dialogs and snap-ins body background.
     *
     * @return $this
     */
    public function setPanelBackColor($panel_back_color)
    {
        $this->container['panel_back_color'] = $panel_back_color;

        return $this;
    }

    /**
     * Gets viewer_back_color
     *
     * @return string|null
     */
    public function getViewerBackColor()
    {
        return $this->container['viewer_back_color'];
    }

    /**
     * Sets viewer_back_color
     *
     * @param string|null $viewer_back_color Specifies the viewer area background color.
     *
     * @return $this
     */
    public function setViewerBackColor($viewer_back_color)
    {
        $this->container['viewer_back_color'] = $viewer_back_color;

        return $this;
    }

    /**
     * Gets active_selected_color
     *
     * @return string|null
     */
    public function getActiveSelectedColor()
    {
        return $this->container['active_selected_color'];
    }

    /**
     * Sets active_selected_color
     *
     * @param string|null $active_selected_color Specifies the selected and active elements stroke color.
     *
     * @return $this
     */
    public function setActiveSelectedColor($active_selected_color)
    {
        $this->container['active_selected_color'] = $active_selected_color;

        return $this;
    }

    /**
     * Gets toolbar_back_color
     *
     * @return string|null
     */
    public function getToolbarBackColor()
    {
        return $this->container['toolbar_back_color'];
    }

    /**
     * Sets toolbar_back_color
     *
     * @param string|null $toolbar_back_color Viewer Toolbar Background Color.
     *
     * @return $this
     */
    public function setToolbarBackColor($toolbar_back_color)
    {
        $this->container['toolbar_back_color'] = $toolbar_back_color;

        return $this;
    }

    /**
     * Gets custom_notification_icon_error
     *
     * @return string|null
     */
    public function getCustomNotificationIconError()
    {
        return $this->container['custom_notification_icon_error'];
    }

    /**
     * Sets custom_notification_icon_error
     *
     * @param string|null $custom_notification_icon_error Custom error notification icon.<br />  Used to specify a custom icon within errors notification boxes.
     *
     * @return $this
     */
    public function setCustomNotificationIconError($custom_notification_icon_error)
    {
        $this->container['custom_notification_icon_error'] = $custom_notification_icon_error;

        return $this;
    }

    /**
     * Gets custom_notification_icon_question
     *
     * @return string|null
     */
    public function getCustomNotificationIconQuestion()
    {
        return $this->container['custom_notification_icon_question'];
    }

    /**
     * Sets custom_notification_icon_question
     *
     * @param string|null $custom_notification_icon_question Custom question notification icon.<br />  Used to specify a custom icon within questions notification boxes.
     *
     * @return $this
     */
    public function setCustomNotificationIconQuestion($custom_notification_icon_question)
    {
        $this->container['custom_notification_icon_question'] = $custom_notification_icon_question;

        return $this;
    }

    /**
     * Gets custom_notification_icon_warning
     *
     * @return string|null
     */
    public function getCustomNotificationIconWarning()
    {
        return $this->container['custom_notification_icon_warning'];
    }

    /**
     * Sets custom_notification_icon_warning
     *
     * @param string|null $custom_notification_icon_warning Custom warning notification icon.<br />  Used to specify a custom icon within warnings notification boxes.
     *
     * @return $this
     */
    public function setCustomNotificationIconWarning($custom_notification_icon_warning)
    {
        $this->container['custom_notification_icon_warning'] = $custom_notification_icon_warning;

        return $this;
    }

    /**
     * Gets custom_notification_icon_info
     *
     * @return string|null
     */
    public function getCustomNotificationIconInfo()
    {
        return $this->container['custom_notification_icon_info'];
    }

    /**
     * Sets custom_notification_icon_info
     *
     * @param string|null $custom_notification_icon_info Custom info notification icon.<br />  Used to specify a custom icon within information notification boxes.
     *
     * @return $this
     */
    public function setCustomNotificationIconInfo($custom_notification_icon_info)
    {
        $this->container['custom_notification_icon_info'] = $custom_notification_icon_info;

        return $this;
    }

    /**
     * Gets custom_notification_icon_ok
     *
     * @return string|null
     */
    public function getCustomNotificationIconOk()
    {
        return $this->container['custom_notification_icon_ok'];
    }

    /**
     * Sets custom_notification_icon_ok
     *
     * @param string|null $custom_notification_icon_ok Custom success notification icon.<br />  Used to specify a custom icon within success notification boxes.
     *
     * @return $this
     */
    public function setCustomNotificationIconOk($custom_notification_icon_ok)
    {
        $this->container['custom_notification_icon_ok'] = $custom_notification_icon_ok;

        return $this;
    }

    /**
     * Gets allowed_export_formats
     *
     * @return string|null
     */
    public function getAllowedExportFormats()
    {
        return $this->container['allowed_export_formats'];
    }

    /**
     * Sets allowed_export_formats
     *
     * @param string|null $allowed_export_formats Specifies extensions of the allowed formats for export. Each extension must be separated by a coma.<br />  Wildcard character '*' can be used to specify any supported format.<br />  The following extensions are currently supported: \"PDF\", \"TIFF\".<br />  For example use \"*\" to allow all supported format for export, \"PDF\" to allow only PDF export and \"PDF,TIFF\" to allow PDF and TIFF export.
     *
     * @return $this
     */
    public function setAllowedExportFormats($allowed_export_formats)
    {
        $this->container['allowed_export_formats'] = $allowed_export_formats;

        return $this;
    }

    /**
     * Gets disable_annotation_drawing_mode_panel
     *
     * @return bool|null
     */
    public function getDisableAnnotationDrawingModePanel()
    {
        return $this->container['disable_annotation_drawing_mode_panel'];
    }

    /**
     * Sets disable_annotation_drawing_mode_panel
     *
     * @param bool|null $disable_annotation_drawing_mode_panel Specifies whether the drawing mode panel shall be enabled while user is drawing a free hand annotation.<br />  This property is only effective if EnableGdPictureAnnotations is set to true.
     *
     * @return $this
     */
    public function setDisableAnnotationDrawingModePanel($disable_annotation_drawing_mode_panel)
    {
        $this->container['disable_annotation_drawing_mode_panel'] = $disable_annotation_drawing_mode_panel;

        return $this;
    }

    /**
     * Gets image_quality
     *
     * @return int|null
     */
    public function getImageQuality()
    {
        return $this->container['image_quality'];
    }

    /**
     * Sets image_quality
     *
     * @param int|null $image_quality image_quality
     *
     * @return $this
     */
    public function setImageQuality($image_quality)
    {
        $this->container['image_quality'] = $image_quality;

        return $this;
    }

    /**
     * Gets print_quality
     *
     * @return \OpenAPI\Client\Model\PrintQuality|null
     */
    public function getPrintQuality()
    {
        return $this->container['print_quality'];
    }

    /**
     * Sets print_quality
     *
     * @param \OpenAPI\Client\Model\PrintQuality|null $print_quality print_quality
     *
     * @return $this
     */
    public function setPrintQuality($print_quality)
    {
        $this->container['print_quality'] = $print_quality;

        return $this;
    }

    /**
     * Gets enable_documents_drop
     *
     * @return bool|null
     */
    public function getEnableDocumentsDrop()
    {
        return $this->container['enable_documents_drop'];
    }

    /**
     * Sets enable_documents_drop
     *
     * @param bool|null $enable_documents_drop Specifies whether documents drag & drop is allowed into the viewer area.
     *
     * @return $this
     */
    public function setEnableDocumentsDrop($enable_documents_drop)
    {
        $this->container['enable_documents_drop'] = $enable_documents_drop;

        return $this;
    }

    /**
     * Gets ajax_custom_headers
     *
     * @return string|null
     */
    public function getAjaxCustomHeaders()
    {
        return $this->container['ajax_custom_headers'];
    }

    /**
     * Sets ajax_custom_headers
     *
     * @param string|null $ajax_custom_headers Specifies custom headers for the generated AJAX requests.  Value must be a (properly escaped) JSON-formatted string. Default value is null.
     *
     * @return $this
     */
    public function setAjaxCustomHeaders($ajax_custom_headers)
    {
        $this->container['ajax_custom_headers'] = $ajax_custom_headers;

        return $this;
    }

    /**
     * Gets file_download_custom_headers
     *
     * @return string|null
     */
    public function getFileDownloadCustomHeaders()
    {
        return $this->container['file_download_custom_headers'];
    }

    /**
     * Sets file_download_custom_headers
     *
     * @param string|null $file_download_custom_headers Specifies custom headers to be used for the file download JavaScript API requests (for instance LoadFromUri and LoadFromUriEx). Headers that are set through this property won't be exposed client-side.  Value must be a (properly escaped) JSON-formatted string. Default value is null.
     *
     * @return $this
     */
    public function setFileDownloadCustomHeaders($file_download_custom_headers)
    {
        $this->container['file_download_custom_headers'] = $file_download_custom_headers;

        return $this;
    }

    /**
     * Gets text_search_max_results
     *
     * @return int|null
     */
    public function getTextSearchMaxResults()
    {
        return $this->container['text_search_max_results'];
    }

    /**
     * Sets text_search_max_results
     *
     * @param int|null $text_search_max_results Specifies the maximum number of results provided by a text search request.
     *
     * @return $this
     */
    public function setTextSearchMaxResults($text_search_max_results)
    {
        $this->container['text_search_max_results'] = $text_search_max_results;

        return $this;
    }

    /**
     * Gets max_upload_size
     *
     * @return int|null
     */
    public function getMaxUploadSize()
    {
        return $this->container['max_upload_size'];
    }

    /**
     * Sets max_upload_size
     *
     * @param int|null $max_upload_size Specifies, in bytes, the upload size limit.
     *
     * @return $this
     */
    public function setMaxUploadSize($max_upload_size)
    {
        $this->container['max_upload_size'] = $max_upload_size;

        return $this;
    }

    /**
     * Gets max_download_size
     *
     * @return int|null
     */
    public function getMaxDownloadSize()
    {
        return $this->container['max_download_size'];
    }

    /**
     * Sets max_download_size
     *
     * @param int|null $max_download_size Specifies, in bytes, the download size limit.
     *
     * @return $this
     */
    public function setMaxDownloadSize($max_download_size)
    {
        $this->container['max_download_size'] = $max_download_size;

        return $this;
    }

    /**
     * Gets max_pages
     *
     * @return int|null
     */
    public function getMaxPages()
    {
        return $this->container['max_pages'];
    }

    /**
     * Sets max_pages
     *
     * @param int|null $max_pages Specifies the maximum of pages per loaded document.
     *
     * @return $this
     */
    public function setMaxPages($max_pages)
    {
        $this->container['max_pages'] = $max_pages;

        return $this;
    }

    /**
     * Gets certificates
     *
     * @return \OpenAPI\Client\Model\DocuViewareCertificate[]|null
     */
    public function getCertificates()
    {
        return $this->container['certificates'];
    }

    /**
     * Sets certificates
     *
     * @param \OpenAPI\Client\Model\DocuViewareCertificate[]|null $certificates Specifies a list of certificates to be made available on the client side to apply digital signature to documents.
     *
     * @return $this
     */
    public function setCertificates($certificates)
    {
        $this->container['certificates'] = $certificates;

        return $this;
    }

    /**
     * Gets extra_features
     *
     * @return string|null
     */
    public function getExtraFeatures()
    {
        return $this->container['extra_features'];
    }

    /**
     * Sets extra_features
     *
     * @param string|null $extra_features A formatted string specifying undocumented extra features to handle.
     *
     * @return $this
     */
    public function setExtraFeatures($extra_features)
    {
        $this->container['extra_features'] = $extra_features;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


