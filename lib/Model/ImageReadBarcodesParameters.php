<?php
/**
 * ImageReadBarcodesParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PassportPDF API
 *
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ImageReadBarcodesParameters Class Doc Comment
 *
 * @category Class
 * @description Represents the parameters for a read barcode action.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ImageReadBarcodesParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ImageReadBarcodesParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'file_id' => 'string',
        'page_range' => 'string',
        'roi_left' => 'int',
        'roi_top' => 'int',
        'roi_width' => 'int',
        'roi_height' => 'int',
        'scan_mode' => '\OpenAPI\Client\Model\ScanMode',
        'scan_barcode1_d' => 'bool',
        'scan_barcode_qr' => 'bool',
        'scan_barcode_micro_qr' => 'bool',
        'scan_barcode_pdf417' => 'bool',
        'scan_barcode_data_matrix' => 'bool',
        'scan_barcode_aztec' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'file_id' => null,
        'page_range' => null,
        'roi_left' => 'int32',
        'roi_top' => 'int32',
        'roi_width' => 'int32',
        'roi_height' => 'int32',
        'scan_mode' => null,
        'scan_barcode1_d' => null,
        'scan_barcode_qr' => null,
        'scan_barcode_micro_qr' => null,
        'scan_barcode_pdf417' => null,
        'scan_barcode_data_matrix' => null,
        'scan_barcode_aztec' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file_id' => 'FileId',
        'page_range' => 'PageRange',
        'roi_left' => 'RoiLeft',
        'roi_top' => 'RoiTop',
        'roi_width' => 'RoiWidth',
        'roi_height' => 'RoiHeight',
        'scan_mode' => 'ScanMode',
        'scan_barcode1_d' => 'ScanBarcode1D',
        'scan_barcode_qr' => 'ScanBarcodeQR',
        'scan_barcode_micro_qr' => 'ScanBarcodeMicroQR',
        'scan_barcode_pdf417' => 'ScanBarcodePDF417',
        'scan_barcode_data_matrix' => 'ScanBarcodeDataMatrix',
        'scan_barcode_aztec' => 'ScanBarcodeAztec'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file_id' => 'setFileId',
        'page_range' => 'setPageRange',
        'roi_left' => 'setRoiLeft',
        'roi_top' => 'setRoiTop',
        'roi_width' => 'setRoiWidth',
        'roi_height' => 'setRoiHeight',
        'scan_mode' => 'setScanMode',
        'scan_barcode1_d' => 'setScanBarcode1D',
        'scan_barcode_qr' => 'setScanBarcodeQr',
        'scan_barcode_micro_qr' => 'setScanBarcodeMicroQr',
        'scan_barcode_pdf417' => 'setScanBarcodePdf417',
        'scan_barcode_data_matrix' => 'setScanBarcodeDataMatrix',
        'scan_barcode_aztec' => 'setScanBarcodeAztec'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file_id' => 'getFileId',
        'page_range' => 'getPageRange',
        'roi_left' => 'getRoiLeft',
        'roi_top' => 'getRoiTop',
        'roi_width' => 'getRoiWidth',
        'roi_height' => 'getRoiHeight',
        'scan_mode' => 'getScanMode',
        'scan_barcode1_d' => 'getScanBarcode1D',
        'scan_barcode_qr' => 'getScanBarcodeQr',
        'scan_barcode_micro_qr' => 'getScanBarcodeMicroQr',
        'scan_barcode_pdf417' => 'getScanBarcodePdf417',
        'scan_barcode_data_matrix' => 'getScanBarcodeDataMatrix',
        'scan_barcode_aztec' => 'getScanBarcodeAztec'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file_id'] = isset($data['file_id']) ? $data['file_id'] : null;
        $this->container['page_range'] = isset($data['page_range']) ? $data['page_range'] : null;
        $this->container['roi_left'] = isset($data['roi_left']) ? $data['roi_left'] : 0;
        $this->container['roi_top'] = isset($data['roi_top']) ? $data['roi_top'] : 0;
        $this->container['roi_width'] = isset($data['roi_width']) ? $data['roi_width'] : 0;
        $this->container['roi_height'] = isset($data['roi_height']) ? $data['roi_height'] : 0;
        $this->container['scan_mode'] = isset($data['scan_mode']) ? $data['scan_mode'] : null;
        $this->container['scan_barcode1_d'] = isset($data['scan_barcode1_d']) ? $data['scan_barcode1_d'] : true;
        $this->container['scan_barcode_qr'] = isset($data['scan_barcode_qr']) ? $data['scan_barcode_qr'] : true;
        $this->container['scan_barcode_micro_qr'] = isset($data['scan_barcode_micro_qr']) ? $data['scan_barcode_micro_qr'] : true;
        $this->container['scan_barcode_pdf417'] = isset($data['scan_barcode_pdf417']) ? $data['scan_barcode_pdf417'] : true;
        $this->container['scan_barcode_data_matrix'] = isset($data['scan_barcode_data_matrix']) ? $data['scan_barcode_data_matrix'] : true;
        $this->container['scan_barcode_aztec'] = isset($data['scan_barcode_aztec']) ? $data['scan_barcode_aztec'] : true;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['file_id'] === null) {
            $invalidProperties[] = "'file_id' can't be null";
        }
        if ($this->container['page_range'] === null) {
            $invalidProperties[] = "'page_range' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets file_id
     *
     * @return string
     */
    public function getFileId()
    {
        return $this->container['file_id'];
    }

    /**
     * Sets file_id
     *
     * @param string $file_id The identifier of the previously uploaded file to be processed.
     *
     * @return $this
     */
    public function setFileId($file_id)
    {
        $this->container['file_id'] = $file_id;

        return $this;
    }

    /**
     * Gets page_range
     *
     * @return string
     */
    public function getPageRange()
    {
        return $this->container['page_range'];
    }

    /**
     * Sets page_range
     *
     * @param string $page_range Specifies the number of the page, or the range of pages to read the barcodes from.
     *
     * @return $this
     */
    public function setPageRange($page_range)
    {
        $this->container['page_range'] = $page_range;

        return $this;
    }

    /**
     * Gets roi_left
     *
     * @return int|null
     */
    public function getRoiLeft()
    {
        return $this->container['roi_left'];
    }

    /**
     * Sets roi_left
     *
     * @param int|null $roi_left Specifies the left coordinate, in pixel, of the region to process.
     *
     * @return $this
     */
    public function setRoiLeft($roi_left)
    {
        $this->container['roi_left'] = $roi_left;

        return $this;
    }

    /**
     * Gets roi_top
     *
     * @return int|null
     */
    public function getRoiTop()
    {
        return $this->container['roi_top'];
    }

    /**
     * Sets roi_top
     *
     * @param int|null $roi_top Specifies the top coordinate, in pixel, of the region to process.
     *
     * @return $this
     */
    public function setRoiTop($roi_top)
    {
        $this->container['roi_top'] = $roi_top;

        return $this;
    }

    /**
     * Gets roi_width
     *
     * @return int|null
     */
    public function getRoiWidth()
    {
        return $this->container['roi_width'];
    }

    /**
     * Sets roi_width
     *
     * @param int|null $roi_width Specifies the width, in pixel, of the region to process. 0 causes the entire image to be processed.
     *
     * @return $this
     */
    public function setRoiWidth($roi_width)
    {
        $this->container['roi_width'] = $roi_width;

        return $this;
    }

    /**
     * Gets roi_height
     *
     * @return int|null
     */
    public function getRoiHeight()
    {
        return $this->container['roi_height'];
    }

    /**
     * Sets roi_height
     *
     * @param int|null $roi_height Specifies the height, in pixel, of the region to process. 0 causes the entire image to be processed.
     *
     * @return $this
     */
    public function setRoiHeight($roi_height)
    {
        $this->container['roi_height'] = $roi_height;

        return $this;
    }

    /**
     * Gets scan_mode
     *
     * @return \OpenAPI\Client\Model\ScanMode|null
     */
    public function getScanMode()
    {
        return $this->container['scan_mode'];
    }

    /**
     * Sets scan_mode
     *
     * @param \OpenAPI\Client\Model\ScanMode|null $scan_mode scan_mode
     *
     * @return $this
     */
    public function setScanMode($scan_mode)
    {
        $this->container['scan_mode'] = $scan_mode;

        return $this;
    }

    /**
     * Gets scan_barcode1_d
     *
     * @return bool|null
     */
    public function getScanBarcode1D()
    {
        return $this->container['scan_barcode1_d'];
    }

    /**
     * Sets scan_barcode1_d
     *
     * @param bool|null $scan_barcode1_d Specifies whether the barcodes of type 1D shall be read.
     *
     * @return $this
     */
    public function setScanBarcode1D($scan_barcode1_d)
    {
        $this->container['scan_barcode1_d'] = $scan_barcode1_d;

        return $this;
    }

    /**
     * Gets scan_barcode_qr
     *
     * @return bool|null
     */
    public function getScanBarcodeQr()
    {
        return $this->container['scan_barcode_qr'];
    }

    /**
     * Sets scan_barcode_qr
     *
     * @param bool|null $scan_barcode_qr Specifies whether the barcodes of type QR shall be read.
     *
     * @return $this
     */
    public function setScanBarcodeQr($scan_barcode_qr)
    {
        $this->container['scan_barcode_qr'] = $scan_barcode_qr;

        return $this;
    }

    /**
     * Gets scan_barcode_micro_qr
     *
     * @return bool|null
     */
    public function getScanBarcodeMicroQr()
    {
        return $this->container['scan_barcode_micro_qr'];
    }

    /**
     * Sets scan_barcode_micro_qr
     *
     * @param bool|null $scan_barcode_micro_qr Specifies whether the barcodes of type Micro QR shall be read.
     *
     * @return $this
     */
    public function setScanBarcodeMicroQr($scan_barcode_micro_qr)
    {
        $this->container['scan_barcode_micro_qr'] = $scan_barcode_micro_qr;

        return $this;
    }

    /**
     * Gets scan_barcode_pdf417
     *
     * @return bool|null
     */
    public function getScanBarcodePdf417()
    {
        return $this->container['scan_barcode_pdf417'];
    }

    /**
     * Sets scan_barcode_pdf417
     *
     * @param bool|null $scan_barcode_pdf417 Specifies whether the barcodes of type PDF 147 shall be read.
     *
     * @return $this
     */
    public function setScanBarcodePdf417($scan_barcode_pdf417)
    {
        $this->container['scan_barcode_pdf417'] = $scan_barcode_pdf417;

        return $this;
    }

    /**
     * Gets scan_barcode_data_matrix
     *
     * @return bool|null
     */
    public function getScanBarcodeDataMatrix()
    {
        return $this->container['scan_barcode_data_matrix'];
    }

    /**
     * Sets scan_barcode_data_matrix
     *
     * @param bool|null $scan_barcode_data_matrix Specifies whether the barcodes of type Data Matrix shall be read.
     *
     * @return $this
     */
    public function setScanBarcodeDataMatrix($scan_barcode_data_matrix)
    {
        $this->container['scan_barcode_data_matrix'] = $scan_barcode_data_matrix;

        return $this;
    }

    /**
     * Gets scan_barcode_aztec
     *
     * @return bool|null
     */
    public function getScanBarcodeAztec()
    {
        return $this->container['scan_barcode_aztec'];
    }

    /**
     * Sets scan_barcode_aztec
     *
     * @param bool|null $scan_barcode_aztec Specifies whether the barcodes of type Aztec shall be read.
     *
     * @return $this
     */
    public function setScanBarcodeAztec($scan_barcode_aztec)
    {
        $this->container['scan_barcode_aztec'] = $scan_barcode_aztec;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


