<?php
/**
 * ImageCropParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PassportPDF API
 *
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ImageCropParameters Class Doc Comment
 *
 * @category Class
 * @description Represents the parameters for an image crop action.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ImageCropParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ImageCropParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'file_id' => 'string',
        'page_range' => 'string',
        'crop_box_left' => 'int',
        'crop_box_top' => 'int',
        'crop_box_width' => 'int',
        'crop_box_height' => 'int',
        'crop_unit' => '\OpenAPI\Client\Model\CropUnit'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'file_id' => null,
        'page_range' => null,
        'crop_box_left' => 'int32',
        'crop_box_top' => 'int32',
        'crop_box_width' => 'int32',
        'crop_box_height' => 'int32',
        'crop_unit' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file_id' => 'FileId',
        'page_range' => 'PageRange',
        'crop_box_left' => 'CropBoxLeft',
        'crop_box_top' => 'CropBoxTop',
        'crop_box_width' => 'CropBoxWidth',
        'crop_box_height' => 'CropBoxHeight',
        'crop_unit' => 'CropUnit'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file_id' => 'setFileId',
        'page_range' => 'setPageRange',
        'crop_box_left' => 'setCropBoxLeft',
        'crop_box_top' => 'setCropBoxTop',
        'crop_box_width' => 'setCropBoxWidth',
        'crop_box_height' => 'setCropBoxHeight',
        'crop_unit' => 'setCropUnit'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file_id' => 'getFileId',
        'page_range' => 'getPageRange',
        'crop_box_left' => 'getCropBoxLeft',
        'crop_box_top' => 'getCropBoxTop',
        'crop_box_width' => 'getCropBoxWidth',
        'crop_box_height' => 'getCropBoxHeight',
        'crop_unit' => 'getCropUnit'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file_id'] = isset($data['file_id']) ? $data['file_id'] : null;
        $this->container['page_range'] = isset($data['page_range']) ? $data['page_range'] : null;
        $this->container['crop_box_left'] = isset($data['crop_box_left']) ? $data['crop_box_left'] : null;
        $this->container['crop_box_top'] = isset($data['crop_box_top']) ? $data['crop_box_top'] : null;
        $this->container['crop_box_width'] = isset($data['crop_box_width']) ? $data['crop_box_width'] : null;
        $this->container['crop_box_height'] = isset($data['crop_box_height']) ? $data['crop_box_height'] : null;
        $this->container['crop_unit'] = isset($data['crop_unit']) ? $data['crop_unit'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['file_id'] === null) {
            $invalidProperties[] = "'file_id' can't be null";
        }
        if ($this->container['page_range'] === null) {
            $invalidProperties[] = "'page_range' can't be null";
        }
        if ($this->container['crop_box_left'] === null) {
            $invalidProperties[] = "'crop_box_left' can't be null";
        }
        if ($this->container['crop_box_top'] === null) {
            $invalidProperties[] = "'crop_box_top' can't be null";
        }
        if ($this->container['crop_box_width'] === null) {
            $invalidProperties[] = "'crop_box_width' can't be null";
        }
        if ($this->container['crop_box_height'] === null) {
            $invalidProperties[] = "'crop_box_height' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets file_id
     *
     * @return string
     */
    public function getFileId()
    {
        return $this->container['file_id'];
    }

    /**
     * Sets file_id
     *
     * @param string $file_id The identifier of the previously uploaded file to be processed.
     *
     * @return $this
     */
    public function setFileId($file_id)
    {
        $this->container['file_id'] = $file_id;

        return $this;
    }

    /**
     * Gets page_range
     *
     * @return string
     */
    public function getPageRange()
    {
        return $this->container['page_range'];
    }

    /**
     * Sets page_range
     *
     * @param string $page_range Specifies the number of the page, or the range of pages to crop.
     *
     * @return $this
     */
    public function setPageRange($page_range)
    {
        $this->container['page_range'] = $page_range;

        return $this;
    }

    /**
     * Gets crop_box_left
     *
     * @return int
     */
    public function getCropBoxLeft()
    {
        return $this->container['crop_box_left'];
    }

    /**
     * Sets crop_box_left
     *
     * @param int $crop_box_left Specifies the crop box left coordinate.
     *
     * @return $this
     */
    public function setCropBoxLeft($crop_box_left)
    {
        $this->container['crop_box_left'] = $crop_box_left;

        return $this;
    }

    /**
     * Gets crop_box_top
     *
     * @return int
     */
    public function getCropBoxTop()
    {
        return $this->container['crop_box_top'];
    }

    /**
     * Sets crop_box_top
     *
     * @param int $crop_box_top Specifies the crop box top coordinate.
     *
     * @return $this
     */
    public function setCropBoxTop($crop_box_top)
    {
        $this->container['crop_box_top'] = $crop_box_top;

        return $this;
    }

    /**
     * Gets crop_box_width
     *
     * @return int
     */
    public function getCropBoxWidth()
    {
        return $this->container['crop_box_width'];
    }

    /**
     * Sets crop_box_width
     *
     * @param int $crop_box_width Specifies the crop box width.
     *
     * @return $this
     */
    public function setCropBoxWidth($crop_box_width)
    {
        $this->container['crop_box_width'] = $crop_box_width;

        return $this;
    }

    /**
     * Gets crop_box_height
     *
     * @return int
     */
    public function getCropBoxHeight()
    {
        return $this->container['crop_box_height'];
    }

    /**
     * Sets crop_box_height
     *
     * @param int $crop_box_height Specifies the crop box height.
     *
     * @return $this
     */
    public function setCropBoxHeight($crop_box_height)
    {
        $this->container['crop_box_height'] = $crop_box_height;

        return $this;
    }

    /**
     * Gets crop_unit
     *
     * @return \OpenAPI\Client\Model\CropUnit|null
     */
    public function getCropUnit()
    {
        return $this->container['crop_unit'];
    }

    /**
     * Sets crop_unit
     *
     * @param \OpenAPI\Client\Model\CropUnit|null $crop_unit crop_unit
     *
     * @return $this
     */
    public function setCropUnit($crop_unit)
    {
        $this->container['crop_unit'] = $crop_unit;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


