<?php
/**
 * PdfGetInfoResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PassportPDF API
 *
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PdfGetInfoResponse Class Doc Comment
 *
 * @category Class
 * @description Represents the response to a get info action request.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PdfGetInfoResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PdfGetInfoResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'error' => '\OpenAPI\Client\Model\Error',
        'remaining_tokens' => 'int',
        'page_count' => 'int',
        'version' => 'string',
        'author' => 'string',
        'title' => 'string',
        'subject' => 'string',
        'producer' => 'string',
        'metadata' => 'string',
        'keywords' => 'string',
        'has_user_password' => 'bool',
        'has_owner_password' => 'bool',
        'encryption' => '\OpenAPI\Client\Model\EncryptionAlgorithm',
        'can_print' => 'bool',
        'can_copy' => 'bool',
        'can_modify' => 'bool',
        'can_add_notes' => 'bool',
        'can_fill_fields' => 'bool',
        'can_copy_access' => 'bool',
        'can_assemble' => 'bool',
        'can_print_full' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'error' => null,
        'remaining_tokens' => 'int64',
        'page_count' => 'int32',
        'version' => null,
        'author' => null,
        'title' => null,
        'subject' => null,
        'producer' => null,
        'metadata' => null,
        'keywords' => null,
        'has_user_password' => null,
        'has_owner_password' => null,
        'encryption' => null,
        'can_print' => null,
        'can_copy' => null,
        'can_modify' => null,
        'can_add_notes' => null,
        'can_fill_fields' => null,
        'can_copy_access' => null,
        'can_assemble' => null,
        'can_print_full' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'error' => 'Error',
        'remaining_tokens' => 'RemainingTokens',
        'page_count' => 'PageCount',
        'version' => 'Version',
        'author' => 'Author',
        'title' => 'Title',
        'subject' => 'Subject',
        'producer' => 'Producer',
        'metadata' => 'Metadata',
        'keywords' => 'Keywords',
        'has_user_password' => 'HasUserPassword',
        'has_owner_password' => 'HasOwnerPassword',
        'encryption' => 'Encryption',
        'can_print' => 'CanPrint',
        'can_copy' => 'CanCopy',
        'can_modify' => 'CanModify',
        'can_add_notes' => 'CanAddNotes',
        'can_fill_fields' => 'CanFillFields',
        'can_copy_access' => 'CanCopyAccess',
        'can_assemble' => 'CanAssemble',
        'can_print_full' => 'CanPrintFull'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'error' => 'setError',
        'remaining_tokens' => 'setRemainingTokens',
        'page_count' => 'setPageCount',
        'version' => 'setVersion',
        'author' => 'setAuthor',
        'title' => 'setTitle',
        'subject' => 'setSubject',
        'producer' => 'setProducer',
        'metadata' => 'setMetadata',
        'keywords' => 'setKeywords',
        'has_user_password' => 'setHasUserPassword',
        'has_owner_password' => 'setHasOwnerPassword',
        'encryption' => 'setEncryption',
        'can_print' => 'setCanPrint',
        'can_copy' => 'setCanCopy',
        'can_modify' => 'setCanModify',
        'can_add_notes' => 'setCanAddNotes',
        'can_fill_fields' => 'setCanFillFields',
        'can_copy_access' => 'setCanCopyAccess',
        'can_assemble' => 'setCanAssemble',
        'can_print_full' => 'setCanPrintFull'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'error' => 'getError',
        'remaining_tokens' => 'getRemainingTokens',
        'page_count' => 'getPageCount',
        'version' => 'getVersion',
        'author' => 'getAuthor',
        'title' => 'getTitle',
        'subject' => 'getSubject',
        'producer' => 'getProducer',
        'metadata' => 'getMetadata',
        'keywords' => 'getKeywords',
        'has_user_password' => 'getHasUserPassword',
        'has_owner_password' => 'getHasOwnerPassword',
        'encryption' => 'getEncryption',
        'can_print' => 'getCanPrint',
        'can_copy' => 'getCanCopy',
        'can_modify' => 'getCanModify',
        'can_add_notes' => 'getCanAddNotes',
        'can_fill_fields' => 'getCanFillFields',
        'can_copy_access' => 'getCanCopyAccess',
        'can_assemble' => 'getCanAssemble',
        'can_print_full' => 'getCanPrintFull'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['error'] = isset($data['error']) ? $data['error'] : null;
        $this->container['remaining_tokens'] = isset($data['remaining_tokens']) ? $data['remaining_tokens'] : null;
        $this->container['page_count'] = isset($data['page_count']) ? $data['page_count'] : null;
        $this->container['version'] = isset($data['version']) ? $data['version'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['producer'] = isset($data['producer']) ? $data['producer'] : null;
        $this->container['metadata'] = isset($data['metadata']) ? $data['metadata'] : null;
        $this->container['keywords'] = isset($data['keywords']) ? $data['keywords'] : null;
        $this->container['has_user_password'] = isset($data['has_user_password']) ? $data['has_user_password'] : null;
        $this->container['has_owner_password'] = isset($data['has_owner_password']) ? $data['has_owner_password'] : null;
        $this->container['encryption'] = isset($data['encryption']) ? $data['encryption'] : null;
        $this->container['can_print'] = isset($data['can_print']) ? $data['can_print'] : null;
        $this->container['can_copy'] = isset($data['can_copy']) ? $data['can_copy'] : null;
        $this->container['can_modify'] = isset($data['can_modify']) ? $data['can_modify'] : null;
        $this->container['can_add_notes'] = isset($data['can_add_notes']) ? $data['can_add_notes'] : null;
        $this->container['can_fill_fields'] = isset($data['can_fill_fields']) ? $data['can_fill_fields'] : null;
        $this->container['can_copy_access'] = isset($data['can_copy_access']) ? $data['can_copy_access'] : null;
        $this->container['can_assemble'] = isset($data['can_assemble']) ? $data['can_assemble'] : null;
        $this->container['can_print_full'] = isset($data['can_print_full']) ? $data['can_print_full'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets error
     *
     * @return \OpenAPI\Client\Model\Error|null
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param \OpenAPI\Client\Model\Error|null $error error
     *
     * @return $this
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets remaining_tokens
     *
     * @return int|null
     */
    public function getRemainingTokens()
    {
        return $this->container['remaining_tokens'];
    }

    /**
     * Sets remaining_tokens
     *
     * @param int|null $remaining_tokens Specifies the number of remaining tokens.
     *
     * @return $this
     */
    public function setRemainingTokens($remaining_tokens)
    {
        $this->container['remaining_tokens'] = $remaining_tokens;

        return $this;
    }

    /**
     * Gets page_count
     *
     * @return int|null
     */
    public function getPageCount()
    {
        return $this->container['page_count'];
    }

    /**
     * Sets page_count
     *
     * @param int|null $page_count Specifies the number of pages of the PDF.
     *
     * @return $this
     */
    public function setPageCount($page_count)
    {
        $this->container['page_count'] = $page_count;

        return $this;
    }

    /**
     * Gets version
     *
     * @return string|null
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param string|null $version Specifies the version of the PDF.
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string|null
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string|null $author Specifies the author name specified within the PDF, if any.
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title Specifies the document title specified within the PDF, if any.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject Specifies the document subject specified within the PDF, if any.
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets producer
     *
     * @return string|null
     */
    public function getProducer()
    {
        return $this->container['producer'];
    }

    /**
     * Sets producer
     *
     * @param string|null $producer Specifies the producer name specified within the PDF, if any.
     *
     * @return $this
     */
    public function setProducer($producer)
    {
        $this->container['producer'] = $producer;

        return $this;
    }

    /**
     * Gets metadata
     *
     * @return string|null
     */
    public function getMetadata()
    {
        return $this->container['metadata'];
    }

    /**
     * Sets metadata
     *
     * @param string|null $metadata Specifies the metadata contained within the PDF, if any.
     *
     * @return $this
     */
    public function setMetadata($metadata)
    {
        $this->container['metadata'] = $metadata;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return string|null
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param string|null $keywords Specifies the keywords associated with the PDF, if any.
     *
     * @return $this
     */
    public function setKeywords($keywords)
    {
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets has_user_password
     *
     * @return bool|null
     */
    public function getHasUserPassword()
    {
        return $this->container['has_user_password'];
    }

    /**
     * Sets has_user_password
     *
     * @param bool|null $has_user_password Specifies if the PDF is protected with a user password.
     *
     * @return $this
     */
    public function setHasUserPassword($has_user_password)
    {
        $this->container['has_user_password'] = $has_user_password;

        return $this;
    }

    /**
     * Gets has_owner_password
     *
     * @return bool|null
     */
    public function getHasOwnerPassword()
    {
        return $this->container['has_owner_password'];
    }

    /**
     * Sets has_owner_password
     *
     * @param bool|null $has_owner_password Specifies if the PDF is protected with a owner password.
     *
     * @return $this
     */
    public function setHasOwnerPassword($has_owner_password)
    {
        $this->container['has_owner_password'] = $has_owner_password;

        return $this;
    }

    /**
     * Gets encryption
     *
     * @return \OpenAPI\Client\Model\EncryptionAlgorithm|null
     */
    public function getEncryption()
    {
        return $this->container['encryption'];
    }

    /**
     * Sets encryption
     *
     * @param \OpenAPI\Client\Model\EncryptionAlgorithm|null $encryption encryption
     *
     * @return $this
     */
    public function setEncryption($encryption)
    {
        $this->container['encryption'] = $encryption;

        return $this;
    }

    /**
     * Gets can_print
     *
     * @return bool|null
     */
    public function getCanPrint()
    {
        return $this->container['can_print'];
    }

    /**
     * Sets can_print
     *
     * @param bool|null $can_print Specifies if the user is allowed to print the document, but possibly not at the highest quality level.
     *
     * @return $this
     */
    public function setCanPrint($can_print)
    {
        $this->container['can_print'] = $can_print;

        return $this;
    }

    /**
     * Gets can_copy
     *
     * @return bool|null
     */
    public function getCanCopy()
    {
        return $this->container['can_copy'];
    }

    /**
     * Sets can_copy
     *
     * @param bool|null $can_copy Specifies if the user is allowed to copy or extract text and graphics from the document.
     *
     * @return $this
     */
    public function setCanCopy($can_copy)
    {
        $this->container['can_copy'] = $can_copy;

        return $this;
    }

    /**
     * Gets can_modify
     *
     * @return bool|null
     */
    public function getCanModify()
    {
        return $this->container['can_modify'];
    }

    /**
     * Sets can_modify
     *
     * @param bool|null $can_modify Specifies if the user is allowed to modify the document.
     *
     * @return $this
     */
    public function setCanModify($can_modify)
    {
        $this->container['can_modify'] = $can_modify;

        return $this;
    }

    /**
     * Gets can_add_notes
     *
     * @return bool|null
     */
    public function getCanAddNotes()
    {
        return $this->container['can_add_notes'];
    }

    /**
     * Sets can_add_notes
     *
     * @param bool|null $can_add_notes Specifies if the user is allowed to add annotations.
     *
     * @return $this
     */
    public function setCanAddNotes($can_add_notes)
    {
        $this->container['can_add_notes'] = $can_add_notes;

        return $this;
    }

    /**
     * Gets can_fill_fields
     *
     * @return bool|null
     */
    public function getCanFillFields()
    {
        return $this->container['can_fill_fields'];
    }

    /**
     * Sets can_fill_fields
     *
     * @param bool|null $can_fill_fields Specifies if the user is allowed to fill-in form fields.
     *
     * @return $this
     */
    public function setCanFillFields($can_fill_fields)
    {
        $this->container['can_fill_fields'] = $can_fill_fields;

        return $this;
    }

    /**
     * Gets can_copy_access
     *
     * @return bool|null
     */
    public function getCanCopyAccess()
    {
        return $this->container['can_copy_access'];
    }

    /**
     * Sets can_copy_access
     *
     * @param bool|null $can_copy_access Specifies if the user is allowed for copying or extracting for use with accessibility features.
     *
     * @return $this
     */
    public function setCanCopyAccess($can_copy_access)
    {
        $this->container['can_copy_access'] = $can_copy_access;

        return $this;
    }

    /**
     * Gets can_assemble
     *
     * @return bool|null
     */
    public function getCanAssemble()
    {
        return $this->container['can_assemble'];
    }

    /**
     * Sets can_assemble
     *
     * @param bool|null $can_assemble Specifies if the user is allowed to assemble the document.
     *
     * @return $this
     */
    public function setCanAssemble($can_assemble)
    {
        $this->container['can_assemble'] = $can_assemble;

        return $this;
    }

    /**
     * Gets can_print_full
     *
     * @return bool|null
     */
    public function getCanPrintFull()
    {
        return $this->container['can_print_full'];
    }

    /**
     * Sets can_print_full
     *
     * @param bool|null $can_print_full Specifies if the user is allowed to print the document with high resolution.
     *
     * @return $this
     */
    public function setCanPrintFull($can_print_full)
    {
        $this->container['can_print_full'] = $can_print_full;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


