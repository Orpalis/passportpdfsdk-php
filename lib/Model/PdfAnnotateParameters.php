<?php
/**
 * PdfAnnotateParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PassportPDF API
 *
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PdfAnnotateParameters Class Doc Comment
 *
 * @category Class
 * @description Represents the parameters for an annotate action.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PdfAnnotateParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PdfAnnotateParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'file_id' => 'string',
        'page_range' => 'string',
        'annotation_type' => '\OpenAPI\Client\Model\AnnotationType',
        'sticky_note_annotation_parameters' => '\OpenAPI\Client\Model\StickyNoteAnnotationParameters',
        'link_annotation_parameters' => '\OpenAPI\Client\Model\LinkAnnotationParameters',
        'free_text_annotation_parameters' => '\OpenAPI\Client\Model\FreeTextAnnotationParameters',
        'line_annotation_parameters' => '\OpenAPI\Client\Model\LineAnnotationParameters',
        'square_and_circle_annotation_parameters' => '\OpenAPI\Client\Model\SquareAndCircleAnnotationParameters',
        'rubber_stamp_annotation_parameters' => '\OpenAPI\Client\Model\RubberStampAnnotationParameters'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'file_id' => null,
        'page_range' => null,
        'annotation_type' => null,
        'sticky_note_annotation_parameters' => null,
        'link_annotation_parameters' => null,
        'free_text_annotation_parameters' => null,
        'line_annotation_parameters' => null,
        'square_and_circle_annotation_parameters' => null,
        'rubber_stamp_annotation_parameters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file_id' => 'FileId',
        'page_range' => 'PageRange',
        'annotation_type' => 'AnnotationType',
        'sticky_note_annotation_parameters' => 'StickyNoteAnnotationParameters',
        'link_annotation_parameters' => 'LinkAnnotationParameters',
        'free_text_annotation_parameters' => 'FreeTextAnnotationParameters',
        'line_annotation_parameters' => 'LineAnnotationParameters',
        'square_and_circle_annotation_parameters' => 'SquareAndCircleAnnotationParameters',
        'rubber_stamp_annotation_parameters' => 'RubberStampAnnotationParameters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file_id' => 'setFileId',
        'page_range' => 'setPageRange',
        'annotation_type' => 'setAnnotationType',
        'sticky_note_annotation_parameters' => 'setStickyNoteAnnotationParameters',
        'link_annotation_parameters' => 'setLinkAnnotationParameters',
        'free_text_annotation_parameters' => 'setFreeTextAnnotationParameters',
        'line_annotation_parameters' => 'setLineAnnotationParameters',
        'square_and_circle_annotation_parameters' => 'setSquareAndCircleAnnotationParameters',
        'rubber_stamp_annotation_parameters' => 'setRubberStampAnnotationParameters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file_id' => 'getFileId',
        'page_range' => 'getPageRange',
        'annotation_type' => 'getAnnotationType',
        'sticky_note_annotation_parameters' => 'getStickyNoteAnnotationParameters',
        'link_annotation_parameters' => 'getLinkAnnotationParameters',
        'free_text_annotation_parameters' => 'getFreeTextAnnotationParameters',
        'line_annotation_parameters' => 'getLineAnnotationParameters',
        'square_and_circle_annotation_parameters' => 'getSquareAndCircleAnnotationParameters',
        'rubber_stamp_annotation_parameters' => 'getRubberStampAnnotationParameters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file_id'] = isset($data['file_id']) ? $data['file_id'] : null;
        $this->container['page_range'] = isset($data['page_range']) ? $data['page_range'] : null;
        $this->container['annotation_type'] = isset($data['annotation_type']) ? $data['annotation_type'] : null;
        $this->container['sticky_note_annotation_parameters'] = isset($data['sticky_note_annotation_parameters']) ? $data['sticky_note_annotation_parameters'] : null;
        $this->container['link_annotation_parameters'] = isset($data['link_annotation_parameters']) ? $data['link_annotation_parameters'] : null;
        $this->container['free_text_annotation_parameters'] = isset($data['free_text_annotation_parameters']) ? $data['free_text_annotation_parameters'] : null;
        $this->container['line_annotation_parameters'] = isset($data['line_annotation_parameters']) ? $data['line_annotation_parameters'] : null;
        $this->container['square_and_circle_annotation_parameters'] = isset($data['square_and_circle_annotation_parameters']) ? $data['square_and_circle_annotation_parameters'] : null;
        $this->container['rubber_stamp_annotation_parameters'] = isset($data['rubber_stamp_annotation_parameters']) ? $data['rubber_stamp_annotation_parameters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['file_id'] === null) {
            $invalidProperties[] = "'file_id' can't be null";
        }
        if ($this->container['page_range'] === null) {
            $invalidProperties[] = "'page_range' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets file_id
     *
     * @return string
     */
    public function getFileId()
    {
        return $this->container['file_id'];
    }

    /**
     * Sets file_id
     *
     * @param string $file_id The identifier of the previously uploaded file to be processed.
     *
     * @return $this
     */
    public function setFileId($file_id)
    {
        $this->container['file_id'] = $file_id;

        return $this;
    }

    /**
     * Gets page_range
     *
     * @return string
     */
    public function getPageRange()
    {
        return $this->container['page_range'];
    }

    /**
     * Sets page_range
     *
     * @param string $page_range Specifies the page or the range of page to be annotated.
     *
     * @return $this
     */
    public function setPageRange($page_range)
    {
        $this->container['page_range'] = $page_range;

        return $this;
    }

    /**
     * Gets annotation_type
     *
     * @return \OpenAPI\Client\Model\AnnotationType|null
     */
    public function getAnnotationType()
    {
        return $this->container['annotation_type'];
    }

    /**
     * Sets annotation_type
     *
     * @param \OpenAPI\Client\Model\AnnotationType|null $annotation_type annotation_type
     *
     * @return $this
     */
    public function setAnnotationType($annotation_type)
    {
        $this->container['annotation_type'] = $annotation_type;

        return $this;
    }

    /**
     * Gets sticky_note_annotation_parameters
     *
     * @return \OpenAPI\Client\Model\StickyNoteAnnotationParameters|null
     */
    public function getStickyNoteAnnotationParameters()
    {
        return $this->container['sticky_note_annotation_parameters'];
    }

    /**
     * Sets sticky_note_annotation_parameters
     *
     * @param \OpenAPI\Client\Model\StickyNoteAnnotationParameters|null $sticky_note_annotation_parameters sticky_note_annotation_parameters
     *
     * @return $this
     */
    public function setStickyNoteAnnotationParameters($sticky_note_annotation_parameters)
    {
        $this->container['sticky_note_annotation_parameters'] = $sticky_note_annotation_parameters;

        return $this;
    }

    /**
     * Gets link_annotation_parameters
     *
     * @return \OpenAPI\Client\Model\LinkAnnotationParameters|null
     */
    public function getLinkAnnotationParameters()
    {
        return $this->container['link_annotation_parameters'];
    }

    /**
     * Sets link_annotation_parameters
     *
     * @param \OpenAPI\Client\Model\LinkAnnotationParameters|null $link_annotation_parameters link_annotation_parameters
     *
     * @return $this
     */
    public function setLinkAnnotationParameters($link_annotation_parameters)
    {
        $this->container['link_annotation_parameters'] = $link_annotation_parameters;

        return $this;
    }

    /**
     * Gets free_text_annotation_parameters
     *
     * @return \OpenAPI\Client\Model\FreeTextAnnotationParameters|null
     */
    public function getFreeTextAnnotationParameters()
    {
        return $this->container['free_text_annotation_parameters'];
    }

    /**
     * Sets free_text_annotation_parameters
     *
     * @param \OpenAPI\Client\Model\FreeTextAnnotationParameters|null $free_text_annotation_parameters free_text_annotation_parameters
     *
     * @return $this
     */
    public function setFreeTextAnnotationParameters($free_text_annotation_parameters)
    {
        $this->container['free_text_annotation_parameters'] = $free_text_annotation_parameters;

        return $this;
    }

    /**
     * Gets line_annotation_parameters
     *
     * @return \OpenAPI\Client\Model\LineAnnotationParameters|null
     */
    public function getLineAnnotationParameters()
    {
        return $this->container['line_annotation_parameters'];
    }

    /**
     * Sets line_annotation_parameters
     *
     * @param \OpenAPI\Client\Model\LineAnnotationParameters|null $line_annotation_parameters line_annotation_parameters
     *
     * @return $this
     */
    public function setLineAnnotationParameters($line_annotation_parameters)
    {
        $this->container['line_annotation_parameters'] = $line_annotation_parameters;

        return $this;
    }

    /**
     * Gets square_and_circle_annotation_parameters
     *
     * @return \OpenAPI\Client\Model\SquareAndCircleAnnotationParameters|null
     */
    public function getSquareAndCircleAnnotationParameters()
    {
        return $this->container['square_and_circle_annotation_parameters'];
    }

    /**
     * Sets square_and_circle_annotation_parameters
     *
     * @param \OpenAPI\Client\Model\SquareAndCircleAnnotationParameters|null $square_and_circle_annotation_parameters square_and_circle_annotation_parameters
     *
     * @return $this
     */
    public function setSquareAndCircleAnnotationParameters($square_and_circle_annotation_parameters)
    {
        $this->container['square_and_circle_annotation_parameters'] = $square_and_circle_annotation_parameters;

        return $this;
    }

    /**
     * Gets rubber_stamp_annotation_parameters
     *
     * @return \OpenAPI\Client\Model\RubberStampAnnotationParameters|null
     */
    public function getRubberStampAnnotationParameters()
    {
        return $this->container['rubber_stamp_annotation_parameters'];
    }

    /**
     * Sets rubber_stamp_annotation_parameters
     *
     * @param \OpenAPI\Client\Model\RubberStampAnnotationParameters|null $rubber_stamp_annotation_parameters rubber_stamp_annotation_parameters
     *
     * @return $this
     */
    public function setRubberStampAnnotationParameters($rubber_stamp_annotation_parameters)
    {
        $this->container['rubber_stamp_annotation_parameters'] = $rubber_stamp_annotation_parameters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


