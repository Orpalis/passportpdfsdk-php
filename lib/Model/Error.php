<?php
/**
 * Error
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PassportPDF API
 *
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Error Class Doc Comment
 *
 * @category Class
 * @description Contains all the information related to an error which has occured.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Error implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Error';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'result_code' => '\OpenAPI\Client\Model\PassportPDFStatus',
        'ext_result_status' => 'string',
        'ext_result_message' => 'string',
        'internal_error_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'result_code' => null,
        'ext_result_status' => null,
        'ext_result_message' => null,
        'internal_error_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'result_code' => 'ResultCode',
        'ext_result_status' => 'ExtResultStatus',
        'ext_result_message' => 'ExtResultMessage',
        'internal_error_id' => 'InternalErrorId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'result_code' => 'setResultCode',
        'ext_result_status' => 'setExtResultStatus',
        'ext_result_message' => 'setExtResultMessage',
        'internal_error_id' => 'setInternalErrorId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'result_code' => 'getResultCode',
        'ext_result_status' => 'getExtResultStatus',
        'ext_result_message' => 'getExtResultMessage',
        'internal_error_id' => 'getInternalErrorId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['result_code'] = isset($data['result_code']) ? $data['result_code'] : null;
        $this->container['ext_result_status'] = isset($data['ext_result_status']) ? $data['ext_result_status'] : null;
        $this->container['ext_result_message'] = isset($data['ext_result_message']) ? $data['ext_result_message'] : null;
        $this->container['internal_error_id'] = isset($data['internal_error_id']) ? $data['internal_error_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets result_code
     *
     * @return \OpenAPI\Client\Model\PassportPDFStatus|null
     */
    public function getResultCode()
    {
        return $this->container['result_code'];
    }

    /**
     * Sets result_code
     *
     * @param \OpenAPI\Client\Model\PassportPDFStatus|null $result_code result_code
     *
     * @return $this
     */
    public function setResultCode($result_code)
    {
        $this->container['result_code'] = $result_code;

        return $this;
    }

    /**
     * Gets ext_result_status
     *
     * @return string|null
     */
    public function getExtResultStatus()
    {
        return $this->container['ext_result_status'];
    }

    /**
     * Sets ext_result_status
     *
     * @param string|null $ext_result_status Specifies a result code related to an error which occured in an external component.
     *
     * @return $this
     */
    public function setExtResultStatus($ext_result_status)
    {
        $this->container['ext_result_status'] = $ext_result_status;

        return $this;
    }

    /**
     * Gets ext_result_message
     *
     * @return string|null
     */
    public function getExtResultMessage()
    {
        return $this->container['ext_result_message'];
    }

    /**
     * Sets ext_result_message
     *
     * @param string|null $ext_result_message Specifies a message which further describes the error.
     *
     * @return $this
     */
    public function setExtResultMessage($ext_result_message)
    {
        $this->container['ext_result_message'] = $ext_result_message;

        return $this;
    }

    /**
     * Gets internal_error_id
     *
     * @return string|null
     */
    public function getInternalErrorId()
    {
        return $this->container['internal_error_id'];
    }

    /**
     * Sets internal_error_id
     *
     * @param string|null $internal_error_id Specifies a unique identifier, allowing to easily assess the error.
     *
     * @return $this
     */
    public function setInternalErrorId($internal_error_id)
    {
        $this->container['internal_error_id'] = $internal_error_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


