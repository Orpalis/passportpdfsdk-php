<?php
/**
 * ImageFilterParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PassportPDF API
 *
 * Introduction:    PassportPDF API is a REST API that lets you perform complex operations on documents and images easily.  You may consume the API by using our.NET SDK (other platforms / languages are soon to come), or any REST client by sending your requests to the appropriate endpoints.   A list of all the available endpoints can be found on the API reference page at https://passportpdfapi.com/references/api/index.html        Authentication:    Each available operation has a predefined cost, expressed as a number of tokens.  These tokens are deducted from your \"passport,\" which has a unique identifier that acts as an API key. This key is, therefore, required to be provided with each request for the latter to be honored(except if the operation does not have a cost, typically when you request a simple data with a GET).  Your key must be included in the header of the request, under the name \"X-PassportPdf-API-Key.\"  If you are using the.NET SDK, you can either set your key in the ApiKey property of your API instance(PdfApi or ImageApi, for example) or set it globally in the GlobalConfiguration instance if you want to set it once for the whole life cycle of your application.          Communication with the API:    All the available actions are listed on the API reference page, as previously mentioned.  There are several different controllers, i.e., routes, which categorize the actions.For example, you may use the PDF controller(\"/api/pdf\" route) to perform PDF - related operations, and the Image controller(\"/api/image\") for images.  Each action defines what kind of parameters(if any) is expected, and what kind of response is served.Parameters and responses are represented using data models, or \"schemas,\" and are listed in the \"Schemas\" section of the reference.   Parameters and response models of a given action are both prefixed by the controller name, the action name, and \"Parameters\" / \"Response,\" e.g. \"api/pdf/reduce\" respectively receives and serves a PdfReduceParameters and PdfReduceResponse models.  Using the .NET SDK, you will find the objects to interact with the different controllers in the PassportPDF.Api namespace and all the schemas in the PassportPDF.Model namespace.        Processing documents:    Each document manipulation starts with importing the file onto the API.  The LoadDocument action of the PDF controller lets you import your document as a PDF.  Note that the GetPDFImportSupportedFileExtensions action of the same controller will let you know all the different types of files that you may import as a PDF. LoadDocument responds with a JSON-serialized PdfLoadDocumentResponse model, which contains a \"FileId\" property.This identifier is required for the API to know about your document for further manipulations, hence the presence of a \"FileId\" property in the PdfReduceParameters schema (and many other parameters schemas). To download the changes made to a file, you need, of course, to download the new version of the file from the API.  To save your document as a PDF, you will need to use the SaveDocument action of the PDF controller and provide a PdfSaveDocumentParameters data model that contains the identifier of your file.        Errors:    Conventional HTTP response codes are used to indicate the success or failure of an API request.   The Error data model also defines some information about an error that occurred on the API.   Each response model has an Error in its definition, and its sole existence in the serialized response - which should thus always be checked - indicates that something went wrong.  Among the information given by the Error schema, \"ResultCode\" specifies a value of the \"PassportPDFStatus\" enumeration, that defines a first level of error information. \"InternalErrorId\" defines a unique identifier for the error, which comes very handy for us to troubleshoot any issue you may encounter quickly.        Efficiency considerations:    Multipart upload/download is available and lets you directly stream a file to/from the API.  In the PDF controller, LoadDocument/LoadDocumentMultipart and SaveDocument/SaveDocumentToFile may be used to upload/download a document using respectively binary data serialization and streaming multipart HTTP requests.  The second approach should be favored when dealing with large files, as it will be much more efficient in that context.
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ImageFilterParameters Class Doc Comment
 *
 * @category Class
 * @description Represents the parameters for an image filtering action.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ImageFilterParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ImageFilterParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'file_id' => 'string',
        'page_range' => 'string',
        'filters' => '\OpenAPI\Client\Model\ImageFilters[]',
        'roi_left' => 'int',
        'roi_top' => 'int',
        'roi_width' => 'int',
        'roi_height' => 'int',
        'gaussian_kernel_size' => 'int',
        'unsharp_mask_radius' => 'int',
        'unsharp_mask_amount' => 'double',
        'unsharp_mask_threshold' => 'int',
        'subtract_background_rolling_ball_size' => 'int',
        'subtract_background_light_background' => 'bool',
        'median_kernel_size' => 'int',
        'min_kernel_size' => 'int',
        'max_kernel_size' => 'int',
        'soften_value' => 'int',
        'colorize_hue' => 'float',
        'colorize_saturation' => 'float',
        'colorize_luminosity' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'file_id' => null,
        'page_range' => null,
        'filters' => null,
        'roi_left' => 'int32',
        'roi_top' => 'int32',
        'roi_width' => 'int32',
        'roi_height' => 'int32',
        'gaussian_kernel_size' => 'int32',
        'unsharp_mask_radius' => 'int32',
        'unsharp_mask_amount' => 'double',
        'unsharp_mask_threshold' => 'int32',
        'subtract_background_rolling_ball_size' => 'int32',
        'subtract_background_light_background' => null,
        'median_kernel_size' => 'int32',
        'min_kernel_size' => 'int32',
        'max_kernel_size' => 'int32',
        'soften_value' => 'int32',
        'colorize_hue' => 'float',
        'colorize_saturation' => 'float',
        'colorize_luminosity' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file_id' => 'FileId',
        'page_range' => 'PageRange',
        'filters' => 'Filters',
        'roi_left' => 'RoiLeft',
        'roi_top' => 'RoiTop',
        'roi_width' => 'RoiWidth',
        'roi_height' => 'RoiHeight',
        'gaussian_kernel_size' => 'GaussianKernelSize',
        'unsharp_mask_radius' => 'UnsharpMaskRadius',
        'unsharp_mask_amount' => 'UnsharpMaskAmount',
        'unsharp_mask_threshold' => 'UnsharpMaskThreshold',
        'subtract_background_rolling_ball_size' => 'SubtractBackgroundRollingBallSize',
        'subtract_background_light_background' => 'SubtractBackgroundLightBackground',
        'median_kernel_size' => 'MedianKernelSize',
        'min_kernel_size' => 'MinKernelSize',
        'max_kernel_size' => 'MaxKernelSize',
        'soften_value' => 'SoftenValue',
        'colorize_hue' => 'ColorizeHue',
        'colorize_saturation' => 'ColorizeSaturation',
        'colorize_luminosity' => 'ColorizeLuminosity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file_id' => 'setFileId',
        'page_range' => 'setPageRange',
        'filters' => 'setFilters',
        'roi_left' => 'setRoiLeft',
        'roi_top' => 'setRoiTop',
        'roi_width' => 'setRoiWidth',
        'roi_height' => 'setRoiHeight',
        'gaussian_kernel_size' => 'setGaussianKernelSize',
        'unsharp_mask_radius' => 'setUnsharpMaskRadius',
        'unsharp_mask_amount' => 'setUnsharpMaskAmount',
        'unsharp_mask_threshold' => 'setUnsharpMaskThreshold',
        'subtract_background_rolling_ball_size' => 'setSubtractBackgroundRollingBallSize',
        'subtract_background_light_background' => 'setSubtractBackgroundLightBackground',
        'median_kernel_size' => 'setMedianKernelSize',
        'min_kernel_size' => 'setMinKernelSize',
        'max_kernel_size' => 'setMaxKernelSize',
        'soften_value' => 'setSoftenValue',
        'colorize_hue' => 'setColorizeHue',
        'colorize_saturation' => 'setColorizeSaturation',
        'colorize_luminosity' => 'setColorizeLuminosity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file_id' => 'getFileId',
        'page_range' => 'getPageRange',
        'filters' => 'getFilters',
        'roi_left' => 'getRoiLeft',
        'roi_top' => 'getRoiTop',
        'roi_width' => 'getRoiWidth',
        'roi_height' => 'getRoiHeight',
        'gaussian_kernel_size' => 'getGaussianKernelSize',
        'unsharp_mask_radius' => 'getUnsharpMaskRadius',
        'unsharp_mask_amount' => 'getUnsharpMaskAmount',
        'unsharp_mask_threshold' => 'getUnsharpMaskThreshold',
        'subtract_background_rolling_ball_size' => 'getSubtractBackgroundRollingBallSize',
        'subtract_background_light_background' => 'getSubtractBackgroundLightBackground',
        'median_kernel_size' => 'getMedianKernelSize',
        'min_kernel_size' => 'getMinKernelSize',
        'max_kernel_size' => 'getMaxKernelSize',
        'soften_value' => 'getSoftenValue',
        'colorize_hue' => 'getColorizeHue',
        'colorize_saturation' => 'getColorizeSaturation',
        'colorize_luminosity' => 'getColorizeLuminosity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file_id'] = isset($data['file_id']) ? $data['file_id'] : null;
        $this->container['page_range'] = isset($data['page_range']) ? $data['page_range'] : null;
        $this->container['filters'] = isset($data['filters']) ? $data['filters'] : null;
        $this->container['roi_left'] = isset($data['roi_left']) ? $data['roi_left'] : 0;
        $this->container['roi_top'] = isset($data['roi_top']) ? $data['roi_top'] : 0;
        $this->container['roi_width'] = isset($data['roi_width']) ? $data['roi_width'] : 0;
        $this->container['roi_height'] = isset($data['roi_height']) ? $data['roi_height'] : 0;
        $this->container['gaussian_kernel_size'] = isset($data['gaussian_kernel_size']) ? $data['gaussian_kernel_size'] : 3;
        $this->container['unsharp_mask_radius'] = isset($data['unsharp_mask_radius']) ? $data['unsharp_mask_radius'] : 5;
        $this->container['unsharp_mask_amount'] = isset($data['unsharp_mask_amount']) ? $data['unsharp_mask_amount'] : 0.5;
        $this->container['unsharp_mask_threshold'] = isset($data['unsharp_mask_threshold']) ? $data['unsharp_mask_threshold'] : 40;
        $this->container['subtract_background_rolling_ball_size'] = isset($data['subtract_background_rolling_ball_size']) ? $data['subtract_background_rolling_ball_size'] : 50;
        $this->container['subtract_background_light_background'] = isset($data['subtract_background_light_background']) ? $data['subtract_background_light_background'] : true;
        $this->container['median_kernel_size'] = isset($data['median_kernel_size']) ? $data['median_kernel_size'] : 4;
        $this->container['min_kernel_size'] = isset($data['min_kernel_size']) ? $data['min_kernel_size'] : 2;
        $this->container['max_kernel_size'] = isset($data['max_kernel_size']) ? $data['max_kernel_size'] : 2;
        $this->container['soften_value'] = isset($data['soften_value']) ? $data['soften_value'] : 0;
        $this->container['colorize_hue'] = isset($data['colorize_hue']) ? $data['colorize_hue'] : 0;
        $this->container['colorize_saturation'] = isset($data['colorize_saturation']) ? $data['colorize_saturation'] : 0;
        $this->container['colorize_luminosity'] = isset($data['colorize_luminosity']) ? $data['colorize_luminosity'] : 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['file_id'] === null) {
            $invalidProperties[] = "'file_id' can't be null";
        }
        if ($this->container['page_range'] === null) {
            $invalidProperties[] = "'page_range' can't be null";
        }
        if ($this->container['filters'] === null) {
            $invalidProperties[] = "'filters' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets file_id
     *
     * @return string
     */
    public function getFileId()
    {
        return $this->container['file_id'];
    }

    /**
     * Sets file_id
     *
     * @param string $file_id The identifier of the previously uploaded file to be processed.
     *
     * @return $this
     */
    public function setFileId($file_id)
    {
        $this->container['file_id'] = $file_id;

        return $this;
    }

    /**
     * Gets page_range
     *
     * @return string
     */
    public function getPageRange()
    {
        return $this->container['page_range'];
    }

    /**
     * Sets page_range
     *
     * @param string $page_range Specifies the number of the page, or the range of pages to apply the filter(s) to.
     *
     * @return $this
     */
    public function setPageRange($page_range)
    {
        $this->container['page_range'] = $page_range;

        return $this;
    }

    /**
     * Gets filters
     *
     * @return \OpenAPI\Client\Model\ImageFilters[]
     */
    public function getFilters()
    {
        return $this->container['filters'];
    }

    /**
     * Sets filters
     *
     * @param \OpenAPI\Client\Model\ImageFilters[] $filters Specifies an array of filters to be applied.  A maximum of 5 entries is supported.
     *
     * @return $this
     */
    public function setFilters($filters)
    {
        $this->container['filters'] = $filters;

        return $this;
    }

    /**
     * Gets roi_left
     *
     * @return int|null
     */
    public function getRoiLeft()
    {
        return $this->container['roi_left'];
    }

    /**
     * Sets roi_left
     *
     * @param int|null $roi_left Specifies the left coordinate, in pixel, of the region to process.
     *
     * @return $this
     */
    public function setRoiLeft($roi_left)
    {
        $this->container['roi_left'] = $roi_left;

        return $this;
    }

    /**
     * Gets roi_top
     *
     * @return int|null
     */
    public function getRoiTop()
    {
        return $this->container['roi_top'];
    }

    /**
     * Sets roi_top
     *
     * @param int|null $roi_top Specifies the top coordinate, in pixel, of the region to process.
     *
     * @return $this
     */
    public function setRoiTop($roi_top)
    {
        $this->container['roi_top'] = $roi_top;

        return $this;
    }

    /**
     * Gets roi_width
     *
     * @return int|null
     */
    public function getRoiWidth()
    {
        return $this->container['roi_width'];
    }

    /**
     * Sets roi_width
     *
     * @param int|null $roi_width Specifies the width, in pixel, of the region to process. 0 causes the entire image to be processed.
     *
     * @return $this
     */
    public function setRoiWidth($roi_width)
    {
        $this->container['roi_width'] = $roi_width;

        return $this;
    }

    /**
     * Gets roi_height
     *
     * @return int|null
     */
    public function getRoiHeight()
    {
        return $this->container['roi_height'];
    }

    /**
     * Sets roi_height
     *
     * @param int|null $roi_height Specifies the height, in pixel, of the region to process. 0 causes the entire image to be processed.
     *
     * @return $this
     */
    public function setRoiHeight($roi_height)
    {
        $this->container['roi_height'] = $roi_height;

        return $this;
    }

    /**
     * Gets gaussian_kernel_size
     *
     * @return int|null
     */
    public function getGaussianKernelSize()
    {
        return $this->container['gaussian_kernel_size'];
    }

    /**
     * Sets gaussian_kernel_size
     *
     * @param int|null $gaussian_kernel_size Specifies the kernel size for the Gaussian filter (if enabled). The size of the square kernel to use. Should be a odd value. For example, a size of 3 will involve 3 * 3 pixels in each pass. The larger the value the more blur you get. The range is larger or equal than 3, and less than the Image's Smaller Dimension (Width, Height) divided by 2. Suggested value is 3 for a [96-120] DPI image and 5 for a [200-250] dpi bitmap.
     *
     * @return $this
     */
    public function setGaussianKernelSize($gaussian_kernel_size)
    {
        $this->container['gaussian_kernel_size'] = $gaussian_kernel_size;

        return $this;
    }

    /**
     * Gets unsharp_mask_radius
     *
     * @return int|null
     */
    public function getUnsharpMaskRadius()
    {
        return $this->container['unsharp_mask_radius'];
    }

    /**
     * Sets unsharp_mask_radius
     *
     * @param int|null $unsharp_mask_radius Size of Edges to become after the unsharp mask effect is applied. It controls how wide they get after the filter is applied. Radius and Amount interact, reducing one, allows more of the other. Minimum Value of Radius should be 3 or more to allow for enough pixels surrounding the edge to be investigated. If value passed less than 3 is passed it will be ammended automatically to 3. Proper value is 5. Value >= 3.
     *
     * @return $this
     */
    public function setUnsharpMaskRadius($unsharp_mask_radius)
    {
        $this->container['unsharp_mask_radius'] = $unsharp_mask_radius;

        return $this;
    }

    /**
     * Gets unsharp_mask_amount
     *
     * @return double|null
     */
    public function getUnsharpMaskAmount()
    {
        return $this->container['unsharp_mask_amount'];
    }

    /**
     * Sets unsharp_mask_amount
     *
     * @param double|null $unsharp_mask_amount Amount of Contrast to be added to areas of edges where filter will be applies. It controls how much darker and how much brighter the edges become. Proper value is 0.5, Value between 0.0-5.0.
     *
     * @return $this
     */
    public function setUnsharpMaskAmount($unsharp_mask_amount)
    {
        $this->container['unsharp_mask_amount'] = $unsharp_mask_amount;

        return $this;
    }

    /**
     * Gets unsharp_mask_threshold
     *
     * @return int|null
     */
    public function getUnsharpMaskThreshold()
    {
        return $this->container['unsharp_mask_threshold'];
    }

    /**
     * Sets unsharp_mask_threshold
     *
     * @param int|null $unsharp_mask_threshold Specifies the amount of edges to be sharpened. Smaller values sharpen more, higher values exclude the subtle edges from being sharpened. Proper value is 40. Value between 0-255.
     *
     * @return $this
     */
    public function setUnsharpMaskThreshold($unsharp_mask_threshold)
    {
        $this->container['unsharp_mask_threshold'] = $unsharp_mask_threshold;

        return $this;
    }

    /**
     * Gets subtract_background_rolling_ball_size
     *
     * @return int|null
     */
    public function getSubtractBackgroundRollingBallSize()
    {
        return $this->container['subtract_background_rolling_ball_size'];
    }

    /**
     * Sets subtract_background_rolling_ball_size
     *
     * @param int|null $subtract_background_rolling_ball_size Size of ball rolled under the image. Controlled the amount of subtraction. Value >= 50.
     *
     * @return $this
     */
    public function setSubtractBackgroundRollingBallSize($subtract_background_rolling_ball_size)
    {
        $this->container['subtract_background_rolling_ball_size'] = $subtract_background_rolling_ball_size;

        return $this;
    }

    /**
     * Gets subtract_background_light_background
     *
     * @return bool|null
     */
    public function getSubtractBackgroundLightBackground()
    {
        return $this->container['subtract_background_light_background'];
    }

    /**
     * Sets subtract_background_light_background
     *
     * @param bool|null $subtract_background_light_background Whether a background is lighter or not than the foreground.Value >= true.
     *
     * @return $this
     */
    public function setSubtractBackgroundLightBackground($subtract_background_light_background)
    {
        $this->container['subtract_background_light_background'] = $subtract_background_light_background;

        return $this;
    }

    /**
     * Gets median_kernel_size
     *
     * @return int|null
     */
    public function getMedianKernelSize()
    {
        return $this->container['median_kernel_size'];
    }

    /**
     * Sets median_kernel_size
     *
     * @param int|null $median_kernel_size Specifies the kernel size for the median filter (if enabled). Level corresponding to number of pixels to include in the median operation, where Level = n, corresponds to (n*2+1)^2 pixels to be included. For Example, KernelSize = 1 includes 9 pixels in the median operation, KernelSize = 2 includes 25 pixels in the median operation. Range from 1 to 60.
     *
     * @return $this
     */
    public function setMedianKernelSize($median_kernel_size)
    {
        $this->container['median_kernel_size'] = $median_kernel_size;

        return $this;
    }

    /**
     * Gets min_kernel_size
     *
     * @return int|null
     */
    public function getMinKernelSize()
    {
        return $this->container['min_kernel_size'];
    }

    /**
     * Sets min_kernel_size
     *
     * @param int|null $min_kernel_size Specifies the kernel size for the minimum filter (if enabled). How large should objects grow in each direction of the four directions, left, right, top, and bottom This value should be larger than 1 and smaller than Image's Smaller Dimension (Width or Height) divided by 2.
     *
     * @return $this
     */
    public function setMinKernelSize($min_kernel_size)
    {
        $this->container['min_kernel_size'] = $min_kernel_size;

        return $this;
    }

    /**
     * Gets max_kernel_size
     *
     * @return int|null
     */
    public function getMaxKernelSize()
    {
        return $this->container['max_kernel_size'];
    }

    /**
     * Sets max_kernel_size
     *
     * @param int|null $max_kernel_size Specifies the kernel size for the maximum filter (if enabled). How much smaller should objects become in each direction of the four directions, left, right, top, and bottom. This value should be larger than 1 and smaller than Image's Smaller Dimension (Width or Height) divided by 2.
     *
     * @return $this
     */
    public function setMaxKernelSize($max_kernel_size)
    {
        $this->container['max_kernel_size'] = $max_kernel_size;

        return $this;
    }

    /**
     * Gets soften_value
     *
     * @return int|null
     */
    public function getSoftenValue()
    {
        return $this->container['soften_value'];
    }

    /**
     * Sets soften_value
     *
     * @param int|null $soften_value Specifies the value for the soften filter (if enabled). Factor between 1 and 100.
     *
     * @return $this
     */
    public function setSoftenValue($soften_value)
    {
        $this->container['soften_value'] = $soften_value;

        return $this;
    }

    /**
     * Gets colorize_hue
     *
     * @return float|null
     */
    public function getColorizeHue()
    {
        return $this->container['colorize_hue'];
    }

    /**
     * Sets colorize_hue
     *
     * @param float|null $colorize_hue Hue for the colorization effect (if enabled) [0..100].
     *
     * @return $this
     */
    public function setColorizeHue($colorize_hue)
    {
        $this->container['colorize_hue'] = $colorize_hue;

        return $this;
    }

    /**
     * Gets colorize_saturation
     *
     * @return float|null
     */
    public function getColorizeSaturation()
    {
        return $this->container['colorize_saturation'];
    }

    /**
     * Sets colorize_saturation
     *
     * @param float|null $colorize_saturation Saturation for the colorization effect (if enabled) [0..100].
     *
     * @return $this
     */
    public function setColorizeSaturation($colorize_saturation)
    {
        $this->container['colorize_saturation'] = $colorize_saturation;

        return $this;
    }

    /**
     * Gets colorize_luminosity
     *
     * @return float|null
     */
    public function getColorizeLuminosity()
    {
        return $this->container['colorize_luminosity'];
    }

    /**
     * Sets colorize_luminosity
     *
     * @param float|null $colorize_luminosity Luminosity for the colorization effect  (if enabled) [0..100].
     *
     * @return $this
     */
    public function setColorizeLuminosity($colorize_luminosity)
    {
        $this->container['colorize_luminosity'] = $colorize_luminosity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


