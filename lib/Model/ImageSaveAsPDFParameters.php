<?php
/**
 * ImageSaveAsPDFParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PassportPDF API
 *
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ImageSaveAsPDFParameters Class Doc Comment
 *
 * @category Class
 * @description Represents the parameters for a save as PDF action.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ImageSaveAsPDFParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ImageSaveAsPDFParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'file_id' => 'string',
        'page_range' => 'string',
        'conformance' => '\OpenAPI\Client\Model\PdfConformance',
        'color_image_compression' => '\OpenAPI\Client\Model\PdfImageCompressionScheme',
        'bitonal_image_compression' => '\OpenAPI\Client\Model\PdfImageCompressionScheme',
        'enable_color_detection' => 'bool',
        'image_quality' => 'int',
        'downscale_resolution' => 'int',
        'fast_web_view' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'file_id' => null,
        'page_range' => null,
        'conformance' => null,
        'color_image_compression' => null,
        'bitonal_image_compression' => null,
        'enable_color_detection' => null,
        'image_quality' => 'int32',
        'downscale_resolution' => 'int32',
        'fast_web_view' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file_id' => 'FileId',
        'page_range' => 'PageRange',
        'conformance' => 'Conformance',
        'color_image_compression' => 'ColorImageCompression',
        'bitonal_image_compression' => 'BitonalImageCompression',
        'enable_color_detection' => 'EnableColorDetection',
        'image_quality' => 'ImageQuality',
        'downscale_resolution' => 'DownscaleResolution',
        'fast_web_view' => 'FastWebView'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file_id' => 'setFileId',
        'page_range' => 'setPageRange',
        'conformance' => 'setConformance',
        'color_image_compression' => 'setColorImageCompression',
        'bitonal_image_compression' => 'setBitonalImageCompression',
        'enable_color_detection' => 'setEnableColorDetection',
        'image_quality' => 'setImageQuality',
        'downscale_resolution' => 'setDownscaleResolution',
        'fast_web_view' => 'setFastWebView'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file_id' => 'getFileId',
        'page_range' => 'getPageRange',
        'conformance' => 'getConformance',
        'color_image_compression' => 'getColorImageCompression',
        'bitonal_image_compression' => 'getBitonalImageCompression',
        'enable_color_detection' => 'getEnableColorDetection',
        'image_quality' => 'getImageQuality',
        'downscale_resolution' => 'getDownscaleResolution',
        'fast_web_view' => 'getFastWebView'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file_id'] = isset($data['file_id']) ? $data['file_id'] : null;
        $this->container['page_range'] = isset($data['page_range']) ? $data['page_range'] : '*';
        $this->container['conformance'] = isset($data['conformance']) ? $data['conformance'] : null;
        $this->container['color_image_compression'] = isset($data['color_image_compression']) ? $data['color_image_compression'] : null;
        $this->container['bitonal_image_compression'] = isset($data['bitonal_image_compression']) ? $data['bitonal_image_compression'] : null;
        $this->container['enable_color_detection'] = isset($data['enable_color_detection']) ? $data['enable_color_detection'] : false;
        $this->container['image_quality'] = isset($data['image_quality']) ? $data['image_quality'] : 75;
        $this->container['downscale_resolution'] = isset($data['downscale_resolution']) ? $data['downscale_resolution'] : 0;
        $this->container['fast_web_view'] = isset($data['fast_web_view']) ? $data['fast_web_view'] : false;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['file_id'] === null) {
            $invalidProperties[] = "'file_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets file_id
     *
     * @return string
     */
    public function getFileId()
    {
        return $this->container['file_id'];
    }

    /**
     * Sets file_id
     *
     * @param string $file_id The identifier of the previously uploaded file to be processed.
     *
     * @return $this
     */
    public function setFileId($file_id)
    {
        $this->container['file_id'] = $file_id;

        return $this;
    }

    /**
     * Gets page_range
     *
     * @return string|null
     */
    public function getPageRange()
    {
        return $this->container['page_range'];
    }

    /**
     * Sets page_range
     *
     * @param string|null $page_range Specifies the number of the page, or the range of pages to be saved as PDF.
     *
     * @return $this
     */
    public function setPageRange($page_range)
    {
        $this->container['page_range'] = $page_range;

        return $this;
    }

    /**
     * Gets conformance
     *
     * @return \OpenAPI\Client\Model\PdfConformance|null
     */
    public function getConformance()
    {
        return $this->container['conformance'];
    }

    /**
     * Sets conformance
     *
     * @param \OpenAPI\Client\Model\PdfConformance|null $conformance conformance
     *
     * @return $this
     */
    public function setConformance($conformance)
    {
        $this->container['conformance'] = $conformance;

        return $this;
    }

    /**
     * Gets color_image_compression
     *
     * @return \OpenAPI\Client\Model\PdfImageCompressionScheme|null
     */
    public function getColorImageCompression()
    {
        return $this->container['color_image_compression'];
    }

    /**
     * Sets color_image_compression
     *
     * @param \OpenAPI\Client\Model\PdfImageCompressionScheme|null $color_image_compression color_image_compression
     *
     * @return $this
     */
    public function setColorImageCompression($color_image_compression)
    {
        $this->container['color_image_compression'] = $color_image_compression;

        return $this;
    }

    /**
     * Gets bitonal_image_compression
     *
     * @return \OpenAPI\Client\Model\PdfImageCompressionScheme|null
     */
    public function getBitonalImageCompression()
    {
        return $this->container['bitonal_image_compression'];
    }

    /**
     * Sets bitonal_image_compression
     *
     * @param \OpenAPI\Client\Model\PdfImageCompressionScheme|null $bitonal_image_compression bitonal_image_compression
     *
     * @return $this
     */
    public function setBitonalImageCompression($bitonal_image_compression)
    {
        $this->container['bitonal_image_compression'] = $bitonal_image_compression;

        return $this;
    }

    /**
     * Gets enable_color_detection
     *
     * @return bool|null
     */
    public function getEnableColorDetection()
    {
        return $this->container['enable_color_detection'];
    }

    /**
     * Sets enable_color_detection
     *
     * @param bool|null $enable_color_detection Specifies is color detection must be used.
     *
     * @return $this
     */
    public function setEnableColorDetection($enable_color_detection)
    {
        $this->container['enable_color_detection'] = $enable_color_detection;

        return $this;
    }

    /**
     * Gets image_quality
     *
     * @return int|null
     */
    public function getImageQuality()
    {
        return $this->container['image_quality'];
    }

    /**
     * Sets image_quality
     *
     * @param int|null $image_quality Specifies the quality to be used for the compression of the images from the PDF.  Must be in the range [0 (best compression - worst quality) - 100 (worst quality - best compression)].
     *
     * @return $this
     */
    public function setImageQuality($image_quality)
    {
        $this->container['image_quality'] = $image_quality;

        return $this;
    }

    /**
     * Gets downscale_resolution
     *
     * @return int|null
     */
    public function getDownscaleResolution()
    {
        return $this->container['downscale_resolution'];
    }

    /**
     * Sets downscale_resolution
     *
     * @param int|null $downscale_resolution Specifies the resolution for downscaling images, if any.
     *
     * @return $this
     */
    public function setDownscaleResolution($downscale_resolution)
    {
        $this->container['downscale_resolution'] = $downscale_resolution;

        return $this;
    }

    /**
     * Gets fast_web_view
     *
     * @return bool|null
     */
    public function getFastWebView()
    {
        return $this->container['fast_web_view'];
    }

    /**
     * Sets fast_web_view
     *
     * @param bool|null $fast_web_view Specifies whether the PDF shall be optimized for online distribution.
     *
     * @return $this
     */
    public function setFastWebView($fast_web_view)
    {
        $this->container['fast_web_view'] = $fast_web_view;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


