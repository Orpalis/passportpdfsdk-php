<?php
/**
 * DocuViewareCertificate
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PassportPDF API
 *
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DocuViewareCertificate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DocuViewareCertificate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DocuViewareCertificate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'display_name' => 'string',
        'data' => 'string',
        'password' => 'string',
        'timestamp_server_uri' => 'string',
        'timestamp_server_user_name' => 'string',
        'timestamp_server_user_password' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'display_name' => null,
        'data' => 'byte',
        'password' => null,
        'timestamp_server_uri' => null,
        'timestamp_server_user_name' => null,
        'timestamp_server_user_password' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'display_name' => 'DisplayName',
        'data' => 'Data',
        'password' => 'Password',
        'timestamp_server_uri' => 'TimestampServerURI',
        'timestamp_server_user_name' => 'TimestampServerUserName',
        'timestamp_server_user_password' => 'TimestampServerUserPassword'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'display_name' => 'setDisplayName',
        'data' => 'setData',
        'password' => 'setPassword',
        'timestamp_server_uri' => 'setTimestampServerUri',
        'timestamp_server_user_name' => 'setTimestampServerUserName',
        'timestamp_server_user_password' => 'setTimestampServerUserPassword'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'display_name' => 'getDisplayName',
        'data' => 'getData',
        'password' => 'getPassword',
        'timestamp_server_uri' => 'getTimestampServerUri',
        'timestamp_server_user_name' => 'getTimestampServerUserName',
        'timestamp_server_user_password' => 'getTimestampServerUserPassword'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['data'] = isset($data['data']) ? $data['data'] : null;
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['timestamp_server_uri'] = isset($data['timestamp_server_uri']) ? $data['timestamp_server_uri'] : null;
        $this->container['timestamp_server_user_name'] = isset($data['timestamp_server_user_name']) ? $data['timestamp_server_user_name'] : null;
        $this->container['timestamp_server_user_password'] = isset($data['timestamp_server_user_password']) ? $data['timestamp_server_user_password'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data data
     *
     * @return $this
     */
    public function setData($data)
    {
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string|null
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string|null $password password
     *
     * @return $this
     */
    public function setPassword($password)
    {
        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets timestamp_server_uri
     *
     * @return string|null
     */
    public function getTimestampServerUri()
    {
        return $this->container['timestamp_server_uri'];
    }

    /**
     * Sets timestamp_server_uri
     *
     * @param string|null $timestamp_server_uri timestamp_server_uri
     *
     * @return $this
     */
    public function setTimestampServerUri($timestamp_server_uri)
    {
        $this->container['timestamp_server_uri'] = $timestamp_server_uri;

        return $this;
    }

    /**
     * Gets timestamp_server_user_name
     *
     * @return string|null
     */
    public function getTimestampServerUserName()
    {
        return $this->container['timestamp_server_user_name'];
    }

    /**
     * Sets timestamp_server_user_name
     *
     * @param string|null $timestamp_server_user_name timestamp_server_user_name
     *
     * @return $this
     */
    public function setTimestampServerUserName($timestamp_server_user_name)
    {
        $this->container['timestamp_server_user_name'] = $timestamp_server_user_name;

        return $this;
    }

    /**
     * Gets timestamp_server_user_password
     *
     * @return string|null
     */
    public function getTimestampServerUserPassword()
    {
        return $this->container['timestamp_server_user_password'];
    }

    /**
     * Sets timestamp_server_user_password
     *
     * @param string|null $timestamp_server_user_password timestamp_server_user_password
     *
     * @return $this
     */
    public function setTimestampServerUserPassword($timestamp_server_user_password)
    {
        $this->container['timestamp_server_user_password'] = $timestamp_server_user_password;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


