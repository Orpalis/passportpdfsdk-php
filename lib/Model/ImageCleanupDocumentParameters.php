<?php
/**
 * ImageCleanupDocumentParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PassportPDF API
 *
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ImageCleanupDocumentParameters Class Doc Comment
 *
 * @category Class
 * @description Represents the parameters for a cleanup document action.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ImageCleanupDocumentParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ImageCleanupDocumentParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'file_id' => 'string',
        'page_range' => 'string',
        'remove_black_borders' => 'bool',
        'deskew' => 'bool',
        'remove_left_margin_punch_holes' => 'bool',
        'remove_top_margin_punch_holes' => 'bool',
        'remove_right_margin_punch_holes' => 'bool',
        'remove_bottom_margin_punch_holes' => 'bool',
        'despeckle_strength' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'file_id' => null,
        'page_range' => null,
        'remove_black_borders' => null,
        'deskew' => null,
        'remove_left_margin_punch_holes' => null,
        'remove_top_margin_punch_holes' => null,
        'remove_right_margin_punch_holes' => null,
        'remove_bottom_margin_punch_holes' => null,
        'despeckle_strength' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file_id' => 'FileId',
        'page_range' => 'PageRange',
        'remove_black_borders' => 'RemoveBlackBorders',
        'deskew' => 'Deskew',
        'remove_left_margin_punch_holes' => 'RemoveLeftMarginPunchHoles',
        'remove_top_margin_punch_holes' => 'RemoveTopMarginPunchHoles',
        'remove_right_margin_punch_holes' => 'RemoveRightMarginPunchHoles',
        'remove_bottom_margin_punch_holes' => 'RemoveBottomMarginPunchHoles',
        'despeckle_strength' => 'DespeckleStrength'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file_id' => 'setFileId',
        'page_range' => 'setPageRange',
        'remove_black_borders' => 'setRemoveBlackBorders',
        'deskew' => 'setDeskew',
        'remove_left_margin_punch_holes' => 'setRemoveLeftMarginPunchHoles',
        'remove_top_margin_punch_holes' => 'setRemoveTopMarginPunchHoles',
        'remove_right_margin_punch_holes' => 'setRemoveRightMarginPunchHoles',
        'remove_bottom_margin_punch_holes' => 'setRemoveBottomMarginPunchHoles',
        'despeckle_strength' => 'setDespeckleStrength'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file_id' => 'getFileId',
        'page_range' => 'getPageRange',
        'remove_black_borders' => 'getRemoveBlackBorders',
        'deskew' => 'getDeskew',
        'remove_left_margin_punch_holes' => 'getRemoveLeftMarginPunchHoles',
        'remove_top_margin_punch_holes' => 'getRemoveTopMarginPunchHoles',
        'remove_right_margin_punch_holes' => 'getRemoveRightMarginPunchHoles',
        'remove_bottom_margin_punch_holes' => 'getRemoveBottomMarginPunchHoles',
        'despeckle_strength' => 'getDespeckleStrength'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file_id'] = isset($data['file_id']) ? $data['file_id'] : null;
        $this->container['page_range'] = isset($data['page_range']) ? $data['page_range'] : null;
        $this->container['remove_black_borders'] = isset($data['remove_black_borders']) ? $data['remove_black_borders'] : false;
        $this->container['deskew'] = isset($data['deskew']) ? $data['deskew'] : false;
        $this->container['remove_left_margin_punch_holes'] = isset($data['remove_left_margin_punch_holes']) ? $data['remove_left_margin_punch_holes'] : false;
        $this->container['remove_top_margin_punch_holes'] = isset($data['remove_top_margin_punch_holes']) ? $data['remove_top_margin_punch_holes'] : false;
        $this->container['remove_right_margin_punch_holes'] = isset($data['remove_right_margin_punch_holes']) ? $data['remove_right_margin_punch_holes'] : false;
        $this->container['remove_bottom_margin_punch_holes'] = isset($data['remove_bottom_margin_punch_holes']) ? $data['remove_bottom_margin_punch_holes'] : false;
        $this->container['despeckle_strength'] = isset($data['despeckle_strength']) ? $data['despeckle_strength'] : 0;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['file_id'] === null) {
            $invalidProperties[] = "'file_id' can't be null";
        }
        if ($this->container['page_range'] === null) {
            $invalidProperties[] = "'page_range' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets file_id
     *
     * @return string
     */
    public function getFileId()
    {
        return $this->container['file_id'];
    }

    /**
     * Sets file_id
     *
     * @param string $file_id The identifier of the previously uploaded file to be processed.
     *
     * @return $this
     */
    public function setFileId($file_id)
    {
        $this->container['file_id'] = $file_id;

        return $this;
    }

    /**
     * Gets page_range
     *
     * @return string
     */
    public function getPageRange()
    {
        return $this->container['page_range'];
    }

    /**
     * Sets page_range
     *
     * @param string $page_range Specifies the number of the page, or the range of pages to cleanup.
     *
     * @return $this
     */
    public function setPageRange($page_range)
    {
        $this->container['page_range'] = $page_range;

        return $this;
    }

    /**
     * Gets remove_black_borders
     *
     * @return bool|null
     */
    public function getRemoveBlackBorders()
    {
        return $this->container['remove_black_borders'];
    }

    /**
     * Sets remove_black_borders
     *
     * @param bool|null $remove_black_borders Specifies whether the dark borders of the document image shall be replaced with white content.
     *
     * @return $this
     */
    public function setRemoveBlackBorders($remove_black_borders)
    {
        $this->container['remove_black_borders'] = $remove_black_borders;

        return $this;
    }

    /**
     * Gets deskew
     *
     * @return bool|null
     */
    public function getDeskew()
    {
        return $this->container['deskew'];
    }

    /**
     * Sets deskew
     *
     * @param bool|null $deskew Specifies whether the document shall be deskewed.
     *
     * @return $this
     */
    public function setDeskew($deskew)
    {
        $this->container['deskew'] = $deskew;

        return $this;
    }

    /**
     * Gets remove_left_margin_punch_holes
     *
     * @return bool|null
     */
    public function getRemoveLeftMarginPunchHoles()
    {
        return $this->container['remove_left_margin_punch_holes'];
    }

    /**
     * Sets remove_left_margin_punch_holes
     *
     * @param bool|null $remove_left_margin_punch_holes Specifies whether punch holes shall be removed from the left margin of the document.
     *
     * @return $this
     */
    public function setRemoveLeftMarginPunchHoles($remove_left_margin_punch_holes)
    {
        $this->container['remove_left_margin_punch_holes'] = $remove_left_margin_punch_holes;

        return $this;
    }

    /**
     * Gets remove_top_margin_punch_holes
     *
     * @return bool|null
     */
    public function getRemoveTopMarginPunchHoles()
    {
        return $this->container['remove_top_margin_punch_holes'];
    }

    /**
     * Sets remove_top_margin_punch_holes
     *
     * @param bool|null $remove_top_margin_punch_holes Specifies whether punch holes shall be removed from the top margin of the document.
     *
     * @return $this
     */
    public function setRemoveTopMarginPunchHoles($remove_top_margin_punch_holes)
    {
        $this->container['remove_top_margin_punch_holes'] = $remove_top_margin_punch_holes;

        return $this;
    }

    /**
     * Gets remove_right_margin_punch_holes
     *
     * @return bool|null
     */
    public function getRemoveRightMarginPunchHoles()
    {
        return $this->container['remove_right_margin_punch_holes'];
    }

    /**
     * Sets remove_right_margin_punch_holes
     *
     * @param bool|null $remove_right_margin_punch_holes Specifies whether punch holes shall be removed from the right margin of the document.
     *
     * @return $this
     */
    public function setRemoveRightMarginPunchHoles($remove_right_margin_punch_holes)
    {
        $this->container['remove_right_margin_punch_holes'] = $remove_right_margin_punch_holes;

        return $this;
    }

    /**
     * Gets remove_bottom_margin_punch_holes
     *
     * @return bool|null
     */
    public function getRemoveBottomMarginPunchHoles()
    {
        return $this->container['remove_bottom_margin_punch_holes'];
    }

    /**
     * Sets remove_bottom_margin_punch_holes
     *
     * @param bool|null $remove_bottom_margin_punch_holes Specifies whether punch holes shall be removed from the bottom margin of the document.
     *
     * @return $this
     */
    public function setRemoveBottomMarginPunchHoles($remove_bottom_margin_punch_holes)
    {
        $this->container['remove_bottom_margin_punch_holes'] = $remove_bottom_margin_punch_holes;

        return $this;
    }

    /**
     * Gets despeckle_strength
     *
     * @return int|null
     */
    public function getDespeckleStrength()
    {
        return $this->container['despeckle_strength'];
    }

    /**
     * Sets despeckle_strength
     *
     * @param int|null $despeckle_strength Specifies the strength of the despeckle filter to be applied on the image.
     *
     * @return $this
     */
    public function setDespeckleStrength($despeckle_strength)
    {
        $this->container['despeckle_strength'] = $despeckle_strength;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


