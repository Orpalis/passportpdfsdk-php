<?php
/**
 * PdfProtectParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PassportPDF API
 *
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PdfProtectParameters Class Doc Comment
 *
 * @category Class
 * @description Represents the parameters for a protect action.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PdfProtectParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PdfProtectParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'file_id' => 'string',
        'owner_password' => 'string',
        'user_password' => 'string',
        'encryption' => '\OpenAPI\Client\Model\EncryptionAlgorithm',
        'can_print' => 'bool',
        'can_copy' => 'bool',
        'can_modify' => 'bool',
        'can_add_notes' => 'bool',
        'can_fill_fields' => 'bool',
        'can_copy_access' => 'bool',
        'can_assemble' => 'bool',
        'can_print_full' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'file_id' => null,
        'owner_password' => null,
        'user_password' => null,
        'encryption' => null,
        'can_print' => null,
        'can_copy' => null,
        'can_modify' => null,
        'can_add_notes' => null,
        'can_fill_fields' => null,
        'can_copy_access' => null,
        'can_assemble' => null,
        'can_print_full' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file_id' => 'FileId',
        'owner_password' => 'OwnerPassword',
        'user_password' => 'UserPassword',
        'encryption' => 'Encryption',
        'can_print' => 'CanPrint',
        'can_copy' => 'CanCopy',
        'can_modify' => 'CanModify',
        'can_add_notes' => 'CanAddNotes',
        'can_fill_fields' => 'CanFillFields',
        'can_copy_access' => 'CanCopyAccess',
        'can_assemble' => 'CanAssemble',
        'can_print_full' => 'CanPrintFull'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file_id' => 'setFileId',
        'owner_password' => 'setOwnerPassword',
        'user_password' => 'setUserPassword',
        'encryption' => 'setEncryption',
        'can_print' => 'setCanPrint',
        'can_copy' => 'setCanCopy',
        'can_modify' => 'setCanModify',
        'can_add_notes' => 'setCanAddNotes',
        'can_fill_fields' => 'setCanFillFields',
        'can_copy_access' => 'setCanCopyAccess',
        'can_assemble' => 'setCanAssemble',
        'can_print_full' => 'setCanPrintFull'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file_id' => 'getFileId',
        'owner_password' => 'getOwnerPassword',
        'user_password' => 'getUserPassword',
        'encryption' => 'getEncryption',
        'can_print' => 'getCanPrint',
        'can_copy' => 'getCanCopy',
        'can_modify' => 'getCanModify',
        'can_add_notes' => 'getCanAddNotes',
        'can_fill_fields' => 'getCanFillFields',
        'can_copy_access' => 'getCanCopyAccess',
        'can_assemble' => 'getCanAssemble',
        'can_print_full' => 'getCanPrintFull'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file_id'] = isset($data['file_id']) ? $data['file_id'] : null;
        $this->container['owner_password'] = isset($data['owner_password']) ? $data['owner_password'] : '';
        $this->container['user_password'] = isset($data['user_password']) ? $data['user_password'] : '';
        $this->container['encryption'] = isset($data['encryption']) ? $data['encryption'] : null;
        $this->container['can_print'] = isset($data['can_print']) ? $data['can_print'] : true;
        $this->container['can_copy'] = isset($data['can_copy']) ? $data['can_copy'] : true;
        $this->container['can_modify'] = isset($data['can_modify']) ? $data['can_modify'] : true;
        $this->container['can_add_notes'] = isset($data['can_add_notes']) ? $data['can_add_notes'] : true;
        $this->container['can_fill_fields'] = isset($data['can_fill_fields']) ? $data['can_fill_fields'] : true;
        $this->container['can_copy_access'] = isset($data['can_copy_access']) ? $data['can_copy_access'] : true;
        $this->container['can_assemble'] = isset($data['can_assemble']) ? $data['can_assemble'] : true;
        $this->container['can_print_full'] = isset($data['can_print_full']) ? $data['can_print_full'] : true;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['file_id'] === null) {
            $invalidProperties[] = "'file_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets file_id
     *
     * @return string
     */
    public function getFileId()
    {
        return $this->container['file_id'];
    }

    /**
     * Sets file_id
     *
     * @param string $file_id The identifier of the previously uploaded file to be processed.
     *
     * @return $this
     */
    public function setFileId($file_id)
    {
        $this->container['file_id'] = $file_id;

        return $this;
    }

    /**
     * Gets owner_password
     *
     * @return string|null
     */
    public function getOwnerPassword()
    {
        return $this->container['owner_password'];
    }

    /**
     * Sets owner_password
     *
     * @param string|null $owner_password Specifies the owner password to be set.
     *
     * @return $this
     */
    public function setOwnerPassword($owner_password)
    {
        $this->container['owner_password'] = $owner_password;

        return $this;
    }

    /**
     * Gets user_password
     *
     * @return string|null
     */
    public function getUserPassword()
    {
        return $this->container['user_password'];
    }

    /**
     * Sets user_password
     *
     * @param string|null $user_password Specifies the user password to be set.
     *
     * @return $this
     */
    public function setUserPassword($user_password)
    {
        $this->container['user_password'] = $user_password;

        return $this;
    }

    /**
     * Gets encryption
     *
     * @return \OpenAPI\Client\Model\EncryptionAlgorithm|null
     */
    public function getEncryption()
    {
        return $this->container['encryption'];
    }

    /**
     * Sets encryption
     *
     * @param \OpenAPI\Client\Model\EncryptionAlgorithm|null $encryption encryption
     *
     * @return $this
     */
    public function setEncryption($encryption)
    {
        $this->container['encryption'] = $encryption;

        return $this;
    }

    /**
     * Gets can_print
     *
     * @return bool|null
     */
    public function getCanPrint()
    {
        return $this->container['can_print'];
    }

    /**
     * Sets can_print
     *
     * @param bool|null $can_print Allows the user to print the document, but possibly not at the highest quality level. Ignored if no encryption algorithm is set.
     *
     * @return $this
     */
    public function setCanPrint($can_print)
    {
        $this->container['can_print'] = $can_print;

        return $this;
    }

    /**
     * Gets can_copy
     *
     * @return bool|null
     */
    public function getCanCopy()
    {
        return $this->container['can_copy'];
    }

    /**
     * Sets can_copy
     *
     * @param bool|null $can_copy Allows the user to copy or extract text and graphics from the document. Ignored if the no encryption scheme is set.
     *
     * @return $this
     */
    public function setCanCopy($can_copy)
    {
        $this->container['can_copy'] = $can_copy;

        return $this;
    }

    /**
     * Gets can_modify
     *
     * @return bool|null
     */
    public function getCanModify()
    {
        return $this->container['can_modify'];
    }

    /**
     * Sets can_modify
     *
     * @param bool|null $can_modify Allows the user to modify the document. Ignored if the no encryption scheme is set.
     *
     * @return $this
     */
    public function setCanModify($can_modify)
    {
        $this->container['can_modify'] = $can_modify;

        return $this;
    }

    /**
     * Gets can_add_notes
     *
     * @return bool|null
     */
    public function getCanAddNotes()
    {
        return $this->container['can_add_notes'];
    }

    /**
     * Sets can_add_notes
     *
     * @param bool|null $can_add_notes Allows the user to add annotations. Ignored if the no encryption scheme is set.
     *
     * @return $this
     */
    public function setCanAddNotes($can_add_notes)
    {
        $this->container['can_add_notes'] = $can_add_notes;

        return $this;
    }

    /**
     * Gets can_fill_fields
     *
     * @return bool|null
     */
    public function getCanFillFields()
    {
        return $this->container['can_fill_fields'];
    }

    /**
     * Sets can_fill_fields
     *
     * @param bool|null $can_fill_fields Allows the user to fill-in form fields. Only works with 128-bit encryption.
     *
     * @return $this
     */
    public function setCanFillFields($can_fill_fields)
    {
        $this->container['can_fill_fields'] = $can_fill_fields;

        return $this;
    }

    /**
     * Gets can_copy_access
     *
     * @return bool|null
     */
    public function getCanCopyAccess()
    {
        return $this->container['can_copy_access'];
    }

    /**
     * Sets can_copy_access
     *
     * @param bool|null $can_copy_access Enables copying or extracting for use with accessibility features. Only works with 128-bit encryption.
     *
     * @return $this
     */
    public function setCanCopyAccess($can_copy_access)
    {
        $this->container['can_copy_access'] = $can_copy_access;

        return $this;
    }

    /**
     * Gets can_assemble
     *
     * @return bool|null
     */
    public function getCanAssemble()
    {
        return $this->container['can_assemble'];
    }

    /**
     * Sets can_assemble
     *
     * @param bool|null $can_assemble Allows the user to assemble the document. Only works with 128-bit encryption.
     *
     * @return $this
     */
    public function setCanAssemble($can_assemble)
    {
        $this->container['can_assemble'] = $can_assemble;

        return $this;
    }

    /**
     * Gets can_print_full
     *
     * @return bool|null
     */
    public function getCanPrintFull()
    {
        return $this->container['can_print_full'];
    }

    /**
     * Sets can_print_full
     *
     * @param bool|null $can_print_full Allows high resolution printing of the document. Only works with 128-bit encryption.
     *
     * @return $this
     */
    public function setCanPrintFull($can_print_full)
    {
        $this->container['can_print_full'] = $can_print_full;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


