<?php
/**
 * ReduceWarningInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * PassportPDF API
 *
 * Another brick in the cloud
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ReduceWarningInfo Class Doc Comment
 *
 * @category Class
 * @description Represents information about a warning that occured during a reduce action.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ReduceWarningInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ReduceWarningInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'warning_code' => '\OpenAPI\Client\Model\ReduceWarningCode',
        'page_number' => 'int',
        'page_image_number' => 'int',
        'ext_warning_message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'warning_code' => null,
        'page_number' => 'int32',
        'page_image_number' => 'int32',
        'ext_warning_message' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'warning_code' => 'WarningCode',
        'page_number' => 'PageNumber',
        'page_image_number' => 'PageImageNumber',
        'ext_warning_message' => 'ExtWarningMessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'warning_code' => 'setWarningCode',
        'page_number' => 'setPageNumber',
        'page_image_number' => 'setPageImageNumber',
        'ext_warning_message' => 'setExtWarningMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'warning_code' => 'getWarningCode',
        'page_number' => 'getPageNumber',
        'page_image_number' => 'getPageImageNumber',
        'ext_warning_message' => 'getExtWarningMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['warning_code'] = isset($data['warning_code']) ? $data['warning_code'] : null;
        $this->container['page_number'] = isset($data['page_number']) ? $data['page_number'] : null;
        $this->container['page_image_number'] = isset($data['page_image_number']) ? $data['page_image_number'] : null;
        $this->container['ext_warning_message'] = isset($data['ext_warning_message']) ? $data['ext_warning_message'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets warning_code
     *
     * @return \OpenAPI\Client\Model\ReduceWarningCode|null
     */
    public function getWarningCode()
    {
        return $this->container['warning_code'];
    }

    /**
     * Sets warning_code
     *
     * @param \OpenAPI\Client\Model\ReduceWarningCode|null $warning_code warning_code
     *
     * @return $this
     */
    public function setWarningCode($warning_code)
    {
        $this->container['warning_code'] = $warning_code;

        return $this;
    }

    /**
     * Gets page_number
     *
     * @return int|null
     */
    public function getPageNumber()
    {
        return $this->container['page_number'];
    }

    /**
     * Sets page_number
     *
     * @param int|null $page_number The number of the page processed when the warning occured.
     *
     * @return $this
     */
    public function setPageNumber($page_number)
    {
        $this->container['page_number'] = $page_number;

        return $this;
    }

    /**
     * Gets page_image_number
     *
     * @return int|null
     */
    public function getPageImageNumber()
    {
        return $this->container['page_image_number'];
    }

    /**
     * Sets page_image_number
     *
     * @param int|null $page_image_number The number of the image of the page processed when the warning occured.
     *
     * @return $this
     */
    public function setPageImageNumber($page_image_number)
    {
        $this->container['page_image_number'] = $page_image_number;

        return $this;
    }

    /**
     * Gets ext_warning_message
     *
     * @return string|null
     */
    public function getExtWarningMessage()
    {
        return $this->container['ext_warning_message'];
    }

    /**
     * Sets ext_warning_message
     *
     * @param string|null $ext_warning_message The warning message associated with the warning, if any.
     *
     * @return $this
     */
    public function setExtWarningMessage($ext_warning_message)
    {
        $this->container['ext_warning_message'] = $ext_warning_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


